// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;
using Hexa.NET.ZLib;

namespace Hexa.NET.Libpng
{
	/// <summary>
	/// The internal structure that png_image::opaque points to. <br/>
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public partial struct PngControl
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe PngStruct* PngPtr;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe PngInfo* InfoPtr;

		/// <summary>
		/// Always a jmp_buf at present. <br/>
		/// </summary>
		public unsafe void* ErrorBuf;

		/// <summary>
		/// Memory buffer. <br/>
		/// </summary>
		public unsafe byte* Memory;

		/// <summary>
		/// Size of the memory buffer. <br/>
		/// </summary>
		public nuint Size;

		/// <summary>
		/// Otherwise it is a read structure <br/>
		/// </summary>
		public uint ForWrite;

		/// <summary>
		/// We own the file in io_ptr <br/>
		/// </summary>
		public uint OwnedFile;


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe PngControl(PngStruct* pngPtr = default, PngInfo* infoPtr = default, void* errorBuf = default, byte* memory = default, nuint size = default, uint forWrite = default, uint ownedFile = default)
		{
			PngPtr = pngPtr;
			InfoPtr = infoPtr;
			ErrorBuf = errorBuf;
			Memory = memory;
			Size = size;
			ForWrite = forWrite;
			OwnedFile = ownedFile;
		}


	}

}
