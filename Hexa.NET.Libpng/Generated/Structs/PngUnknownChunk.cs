// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;
using Hexa.NET.ZLib;

namespace Hexa.NET.Libpng
{
	/// <summary>
	/// png_unknown_chunk is a structure to hold queued chunks for which there is<br/>
	/// no specific support.  The idea is that we can use this to queue<br/>
	/// up private chunks for output even though the library doesn't actually<br/>
	/// know about their semantics.<br/>
	/// The data in the structure is set by libpng on read and used on write.<br/>
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public partial struct PngUnknownChunk
	{
		/// <summary>
		/// Textual chunk name with '<br/>
		/// \<br/>
		/// 0' terminator <br/>
		/// </summary>
		public byte Name_0;
		public byte Name_1;
		public byte Name_2;
		public byte Name_3;
		public byte Name_4;

		/// <summary>
		/// Data, should not be modified on read! <br/>
		/// </summary>
		public unsafe byte* Data;

		/// <summary>
		/// To be documented.
		/// </summary>
		public nuint Size;

		/// <summary>
		/// mode of operation at read time <br/>
		/// </summary>
		public byte Location;


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe PngUnknownChunk(byte* name = default, byte* data = default, nuint size = default, byte location = default)
		{
			if (name != default(byte*))
			{
				Name_0 = name[0];
				Name_1 = name[1];
				Name_2 = name[2];
				Name_3 = name[3];
				Name_4 = name[4];
			}
			Data = data;
			Size = size;
			Location = location;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe PngUnknownChunk(Span<byte> name = default, byte* data = default, nuint size = default, byte location = default)
		{
			if (name != default(Span<byte>))
			{
				Name_0 = name[0];
				Name_1 = name[1];
				Name_2 = name[2];
				Name_3 = name[3];
				Name_4 = name[4];
			}
			Data = data;
			Size = size;
			Location = location;
		}


	}

}
