// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;
using Hexa.NET.ZLib;

namespace Hexa.NET.Libpng
{
	/// <summary>
	/// png_time is a way to hold the time in an machine independent way.<br/>
	/// Two conversions are provided, both from time_t and struct tm.  There<br/>
	/// is no portable way to convert to either of these structures, as far<br/>
	/// as I know.  If you know of a portable way, send it to me.  As a side<br/>
	/// note - PNG has always been Year 2000 compliant!<br/>
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public partial struct PngTime
	{
		/// <summary>
		/// full year, as in, 1995 <br/>
		/// </summary>
		public ushort Year;

		/// <summary>
		/// month of year, 1 - 12 <br/>
		/// </summary>
		public byte Month;

		/// <summary>
		/// day of month, 1 - 31 <br/>
		/// </summary>
		public byte Day;

		/// <summary>
		/// hour of day, 0 - 23 <br/>
		/// </summary>
		public byte Hour;

		/// <summary>
		/// minute of hour, 0 - 59 <br/>
		/// </summary>
		public byte Minute;

		/// <summary>
		/// second of minute, 0 - 60 (for leap seconds) <br/>
		/// </summary>
		public byte Second;


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe PngTime(ushort year = default, byte month = default, byte day = default, byte hour = default, byte minute = default, byte second = default)
		{
			Year = year;
			Month = month;
			Day = day;
			Hour = hour;
			Minute = minute;
			Second = second;
		}


	}

}
