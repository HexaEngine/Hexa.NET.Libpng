// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;
using Hexa.NET.ZLib;

namespace Hexa.NET.Libpng
{
	/// <summary>
	/// To be documented.
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public partial struct PngImage
	{
		/// <summary>
		/// Initialize to NULL, free with png_image_free <br/>
		/// </summary>
		public unsafe PngControl* Opaque;

		/// <summary>
		/// Set to PNG_IMAGE_VERSION <br/>
		/// </summary>
		public uint Version;

		/// <summary>
		/// Image width in pixels (columns) <br/>
		/// </summary>
		public uint Width;

		/// <summary>
		/// Image height in pixels (rows) <br/>
		/// </summary>
		public uint Height;

		/// <summary>
		/// Image format as defined below <br/>
		/// </summary>
		public uint Format;

		/// <summary>
		/// A bit mask containing informational flags <br/>
		/// </summary>
		public uint Flags;

		/// <summary>
		/// To be documented.
		/// </summary>
		public uint ColormapEntries;

		/// <summary>
		/// To be documented.
		/// </summary>
		public uint WarningOrError;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte Message_0;
		public byte Message_1;
		public byte Message_2;
		public byte Message_3;
		public byte Message_4;
		public byte Message_5;
		public byte Message_6;
		public byte Message_7;
		public byte Message_8;
		public byte Message_9;
		public byte Message_10;
		public byte Message_11;
		public byte Message_12;
		public byte Message_13;
		public byte Message_14;
		public byte Message_15;
		public byte Message_16;
		public byte Message_17;
		public byte Message_18;
		public byte Message_19;
		public byte Message_20;
		public byte Message_21;
		public byte Message_22;
		public byte Message_23;
		public byte Message_24;
		public byte Message_25;
		public byte Message_26;
		public byte Message_27;
		public byte Message_28;
		public byte Message_29;
		public byte Message_30;
		public byte Message_31;
		public byte Message_32;
		public byte Message_33;
		public byte Message_34;
		public byte Message_35;
		public byte Message_36;
		public byte Message_37;
		public byte Message_38;
		public byte Message_39;
		public byte Message_40;
		public byte Message_41;
		public byte Message_42;
		public byte Message_43;
		public byte Message_44;
		public byte Message_45;
		public byte Message_46;
		public byte Message_47;
		public byte Message_48;
		public byte Message_49;
		public byte Message_50;
		public byte Message_51;
		public byte Message_52;
		public byte Message_53;
		public byte Message_54;
		public byte Message_55;
		public byte Message_56;
		public byte Message_57;
		public byte Message_58;
		public byte Message_59;
		public byte Message_60;
		public byte Message_61;
		public byte Message_62;
		public byte Message_63;


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe PngImage(PngControl* opaque = default, uint version = default, uint width = default, uint height = default, uint format = default, uint flags = default, uint colormapEntries = default, uint warningOrError = default, byte* message = default)
		{
			Opaque = opaque;
			Version = version;
			Width = width;
			Height = height;
			Format = format;
			Flags = flags;
			ColormapEntries = colormapEntries;
			WarningOrError = warningOrError;
			if (message != default(byte*))
			{
				Message_0 = message[0];
				Message_1 = message[1];
				Message_2 = message[2];
				Message_3 = message[3];
				Message_4 = message[4];
				Message_5 = message[5];
				Message_6 = message[6];
				Message_7 = message[7];
				Message_8 = message[8];
				Message_9 = message[9];
				Message_10 = message[10];
				Message_11 = message[11];
				Message_12 = message[12];
				Message_13 = message[13];
				Message_14 = message[14];
				Message_15 = message[15];
				Message_16 = message[16];
				Message_17 = message[17];
				Message_18 = message[18];
				Message_19 = message[19];
				Message_20 = message[20];
				Message_21 = message[21];
				Message_22 = message[22];
				Message_23 = message[23];
				Message_24 = message[24];
				Message_25 = message[25];
				Message_26 = message[26];
				Message_27 = message[27];
				Message_28 = message[28];
				Message_29 = message[29];
				Message_30 = message[30];
				Message_31 = message[31];
				Message_32 = message[32];
				Message_33 = message[33];
				Message_34 = message[34];
				Message_35 = message[35];
				Message_36 = message[36];
				Message_37 = message[37];
				Message_38 = message[38];
				Message_39 = message[39];
				Message_40 = message[40];
				Message_41 = message[41];
				Message_42 = message[42];
				Message_43 = message[43];
				Message_44 = message[44];
				Message_45 = message[45];
				Message_46 = message[46];
				Message_47 = message[47];
				Message_48 = message[48];
				Message_49 = message[49];
				Message_50 = message[50];
				Message_51 = message[51];
				Message_52 = message[52];
				Message_53 = message[53];
				Message_54 = message[54];
				Message_55 = message[55];
				Message_56 = message[56];
				Message_57 = message[57];
				Message_58 = message[58];
				Message_59 = message[59];
				Message_60 = message[60];
				Message_61 = message[61];
				Message_62 = message[62];
				Message_63 = message[63];
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe PngImage(PngControl* opaque = default, uint version = default, uint width = default, uint height = default, uint format = default, uint flags = default, uint colormapEntries = default, uint warningOrError = default, Span<byte> message = default)
		{
			Opaque = opaque;
			Version = version;
			Width = width;
			Height = height;
			Format = format;
			Flags = flags;
			ColormapEntries = colormapEntries;
			WarningOrError = warningOrError;
			if (message != default(Span<byte>))
			{
				Message_0 = message[0];
				Message_1 = message[1];
				Message_2 = message[2];
				Message_3 = message[3];
				Message_4 = message[4];
				Message_5 = message[5];
				Message_6 = message[6];
				Message_7 = message[7];
				Message_8 = message[8];
				Message_9 = message[9];
				Message_10 = message[10];
				Message_11 = message[11];
				Message_12 = message[12];
				Message_13 = message[13];
				Message_14 = message[14];
				Message_15 = message[15];
				Message_16 = message[16];
				Message_17 = message[17];
				Message_18 = message[18];
				Message_19 = message[19];
				Message_20 = message[20];
				Message_21 = message[21];
				Message_22 = message[22];
				Message_23 = message[23];
				Message_24 = message[24];
				Message_25 = message[25];
				Message_26 = message[26];
				Message_27 = message[27];
				Message_28 = message[28];
				Message_29 = message[29];
				Message_30 = message[30];
				Message_31 = message[31];
				Message_32 = message[32];
				Message_33 = message[33];
				Message_34 = message[34];
				Message_35 = message[35];
				Message_36 = message[36];
				Message_37 = message[37];
				Message_38 = message[38];
				Message_39 = message[39];
				Message_40 = message[40];
				Message_41 = message[41];
				Message_42 = message[42];
				Message_43 = message[43];
				Message_44 = message[44];
				Message_45 = message[45];
				Message_46 = message[46];
				Message_47 = message[47];
				Message_48 = message[48];
				Message_49 = message[49];
				Message_50 = message[50];
				Message_51 = message[51];
				Message_52 = message[52];
				Message_53 = message[53];
				Message_54 = message[54];
				Message_55 = message[55];
				Message_56 = message[56];
				Message_57 = message[57];
				Message_58 = message[58];
				Message_59 = message[59];
				Message_60 = message[60];
				Message_61 = message[61];
				Message_62 = message[62];
				Message_63 = message[63];
			}
		}


	}

}
