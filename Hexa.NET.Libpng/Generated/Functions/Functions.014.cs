// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;
using Hexa.NET.ZLib;

namespace Hexa.NET.Libpng
{
	public unsafe partial class Libpng
	{

		/// <summary>
		/// Mastering display luminance in cd/m2 (nits). <br/>
		/// </summary>
		public static uint GetMDCVFixed(PngStruct* pngPtr, PngInfo* infoPtr, ref int intWhiteX, ref int intWhiteY, ref int intRedX, int* intRedY, ref int intGreenX, int* intGreenY, int* intBlueX, ref int intBlueY, uint* masteringDisplayMaximumLuminanceScaledBy10000, uint* masteringDisplayMinimumLuminanceScaledBy10000)
		{
			fixed (int* pintWhiteX = &intWhiteX)
			{
				fixed (int* pintWhiteY = &intWhiteY)
				{
					fixed (int* pintRedX = &intRedX)
					{
						fixed (int* pintGreenX = &intGreenX)
						{
							fixed (int* pintBlueY = &intBlueY)
							{
								uint ret = GetMDCVFixedNative(pngPtr, infoPtr, (int*)pintWhiteX, (int*)pintWhiteY, (int*)pintRedX, intRedY, (int*)pintGreenX, intGreenY, intBlueX, (int*)pintBlueY, masteringDisplayMaximumLuminanceScaledBy10000, masteringDisplayMinimumLuminanceScaledBy10000);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// Mastering display luminance in cd/m2 (nits). <br/>
		/// </summary>
		public static uint GetMDCVFixed(PngStruct* pngPtr, PngInfo* infoPtr, int* intWhiteX, int* intWhiteY, int* intRedX, ref int intRedY, ref int intGreenX, int* intGreenY, int* intBlueX, ref int intBlueY, uint* masteringDisplayMaximumLuminanceScaledBy10000, uint* masteringDisplayMinimumLuminanceScaledBy10000)
		{
			fixed (int* pintRedY = &intRedY)
			{
				fixed (int* pintGreenX = &intGreenX)
				{
					fixed (int* pintBlueY = &intBlueY)
					{
						uint ret = GetMDCVFixedNative(pngPtr, infoPtr, intWhiteX, intWhiteY, intRedX, (int*)pintRedY, (int*)pintGreenX, intGreenY, intBlueX, (int*)pintBlueY, masteringDisplayMaximumLuminanceScaledBy10000, masteringDisplayMinimumLuminanceScaledBy10000);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Mastering display luminance in cd/m2 (nits). <br/>
		/// </summary>
		public static uint GetMDCVFixed(PngStruct* pngPtr, PngInfo* infoPtr, ref int intWhiteX, int* intWhiteY, int* intRedX, ref int intRedY, ref int intGreenX, int* intGreenY, int* intBlueX, ref int intBlueY, uint* masteringDisplayMaximumLuminanceScaledBy10000, uint* masteringDisplayMinimumLuminanceScaledBy10000)
		{
			fixed (int* pintWhiteX = &intWhiteX)
			{
				fixed (int* pintRedY = &intRedY)
				{
					fixed (int* pintGreenX = &intGreenX)
					{
						fixed (int* pintBlueY = &intBlueY)
						{
							uint ret = GetMDCVFixedNative(pngPtr, infoPtr, (int*)pintWhiteX, intWhiteY, intRedX, (int*)pintRedY, (int*)pintGreenX, intGreenY, intBlueX, (int*)pintBlueY, masteringDisplayMaximumLuminanceScaledBy10000, masteringDisplayMinimumLuminanceScaledBy10000);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// Mastering display luminance in cd/m2 (nits). <br/>
		/// </summary>
		public static uint GetMDCVFixed(PngStruct* pngPtr, PngInfo* infoPtr, int* intWhiteX, ref int intWhiteY, int* intRedX, ref int intRedY, ref int intGreenX, int* intGreenY, int* intBlueX, ref int intBlueY, uint* masteringDisplayMaximumLuminanceScaledBy10000, uint* masteringDisplayMinimumLuminanceScaledBy10000)
		{
			fixed (int* pintWhiteY = &intWhiteY)
			{
				fixed (int* pintRedY = &intRedY)
				{
					fixed (int* pintGreenX = &intGreenX)
					{
						fixed (int* pintBlueY = &intBlueY)
						{
							uint ret = GetMDCVFixedNative(pngPtr, infoPtr, intWhiteX, (int*)pintWhiteY, intRedX, (int*)pintRedY, (int*)pintGreenX, intGreenY, intBlueX, (int*)pintBlueY, masteringDisplayMaximumLuminanceScaledBy10000, masteringDisplayMinimumLuminanceScaledBy10000);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// Mastering display luminance in cd/m2 (nits). <br/>
		/// </summary>
		public static uint GetMDCVFixed(PngStruct* pngPtr, PngInfo* infoPtr, ref int intWhiteX, ref int intWhiteY, int* intRedX, ref int intRedY, ref int intGreenX, int* intGreenY, int* intBlueX, ref int intBlueY, uint* masteringDisplayMaximumLuminanceScaledBy10000, uint* masteringDisplayMinimumLuminanceScaledBy10000)
		{
			fixed (int* pintWhiteX = &intWhiteX)
			{
				fixed (int* pintWhiteY = &intWhiteY)
				{
					fixed (int* pintRedY = &intRedY)
					{
						fixed (int* pintGreenX = &intGreenX)
						{
							fixed (int* pintBlueY = &intBlueY)
							{
								uint ret = GetMDCVFixedNative(pngPtr, infoPtr, (int*)pintWhiteX, (int*)pintWhiteY, intRedX, (int*)pintRedY, (int*)pintGreenX, intGreenY, intBlueX, (int*)pintBlueY, masteringDisplayMaximumLuminanceScaledBy10000, masteringDisplayMinimumLuminanceScaledBy10000);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// Mastering display luminance in cd/m2 (nits). <br/>
		/// </summary>
		public static uint GetMDCVFixed(PngStruct* pngPtr, PngInfo* infoPtr, int* intWhiteX, int* intWhiteY, ref int intRedX, ref int intRedY, ref int intGreenX, int* intGreenY, int* intBlueX, ref int intBlueY, uint* masteringDisplayMaximumLuminanceScaledBy10000, uint* masteringDisplayMinimumLuminanceScaledBy10000)
		{
			fixed (int* pintRedX = &intRedX)
			{
				fixed (int* pintRedY = &intRedY)
				{
					fixed (int* pintGreenX = &intGreenX)
					{
						fixed (int* pintBlueY = &intBlueY)
						{
							uint ret = GetMDCVFixedNative(pngPtr, infoPtr, intWhiteX, intWhiteY, (int*)pintRedX, (int*)pintRedY, (int*)pintGreenX, intGreenY, intBlueX, (int*)pintBlueY, masteringDisplayMaximumLuminanceScaledBy10000, masteringDisplayMinimumLuminanceScaledBy10000);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// Mastering display luminance in cd/m2 (nits). <br/>
		/// </summary>
		public static uint GetMDCVFixed(PngStruct* pngPtr, PngInfo* infoPtr, ref int intWhiteX, int* intWhiteY, ref int intRedX, ref int intRedY, ref int intGreenX, int* intGreenY, int* intBlueX, ref int intBlueY, uint* masteringDisplayMaximumLuminanceScaledBy10000, uint* masteringDisplayMinimumLuminanceScaledBy10000)
		{
			fixed (int* pintWhiteX = &intWhiteX)
			{
				fixed (int* pintRedX = &intRedX)
				{
					fixed (int* pintRedY = &intRedY)
					{
						fixed (int* pintGreenX = &intGreenX)
						{
							fixed (int* pintBlueY = &intBlueY)
							{
								uint ret = GetMDCVFixedNative(pngPtr, infoPtr, (int*)pintWhiteX, intWhiteY, (int*)pintRedX, (int*)pintRedY, (int*)pintGreenX, intGreenY, intBlueX, (int*)pintBlueY, masteringDisplayMaximumLuminanceScaledBy10000, masteringDisplayMinimumLuminanceScaledBy10000);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// Mastering display luminance in cd/m2 (nits). <br/>
		/// </summary>
		public static uint GetMDCVFixed(PngStruct* pngPtr, PngInfo* infoPtr, int* intWhiteX, ref int intWhiteY, ref int intRedX, ref int intRedY, ref int intGreenX, int* intGreenY, int* intBlueX, ref int intBlueY, uint* masteringDisplayMaximumLuminanceScaledBy10000, uint* masteringDisplayMinimumLuminanceScaledBy10000)
		{
			fixed (int* pintWhiteY = &intWhiteY)
			{
				fixed (int* pintRedX = &intRedX)
				{
					fixed (int* pintRedY = &intRedY)
					{
						fixed (int* pintGreenX = &intGreenX)
						{
							fixed (int* pintBlueY = &intBlueY)
							{
								uint ret = GetMDCVFixedNative(pngPtr, infoPtr, intWhiteX, (int*)pintWhiteY, (int*)pintRedX, (int*)pintRedY, (int*)pintGreenX, intGreenY, intBlueX, (int*)pintBlueY, masteringDisplayMaximumLuminanceScaledBy10000, masteringDisplayMinimumLuminanceScaledBy10000);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// Mastering display luminance in cd/m2 (nits). <br/>
		/// </summary>
		public static uint GetMDCVFixed(PngStruct* pngPtr, PngInfo* infoPtr, ref int intWhiteX, ref int intWhiteY, ref int intRedX, ref int intRedY, ref int intGreenX, int* intGreenY, int* intBlueX, ref int intBlueY, uint* masteringDisplayMaximumLuminanceScaledBy10000, uint* masteringDisplayMinimumLuminanceScaledBy10000)
		{
			fixed (int* pintWhiteX = &intWhiteX)
			{
				fixed (int* pintWhiteY = &intWhiteY)
				{
					fixed (int* pintRedX = &intRedX)
					{
						fixed (int* pintRedY = &intRedY)
						{
							fixed (int* pintGreenX = &intGreenX)
							{
								fixed (int* pintBlueY = &intBlueY)
								{
									uint ret = GetMDCVFixedNative(pngPtr, infoPtr, (int*)pintWhiteX, (int*)pintWhiteY, (int*)pintRedX, (int*)pintRedY, (int*)pintGreenX, intGreenY, intBlueX, (int*)pintBlueY, masteringDisplayMaximumLuminanceScaledBy10000, masteringDisplayMinimumLuminanceScaledBy10000);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// Mastering display luminance in cd/m2 (nits). <br/>
		/// </summary>
		public static uint GetMDCVFixed(PngStruct* pngPtr, PngInfo* infoPtr, int* intWhiteX, int* intWhiteY, int* intRedX, int* intRedY, int* intGreenX, ref int intGreenY, int* intBlueX, ref int intBlueY, uint* masteringDisplayMaximumLuminanceScaledBy10000, uint* masteringDisplayMinimumLuminanceScaledBy10000)
		{
			fixed (int* pintGreenY = &intGreenY)
			{
				fixed (int* pintBlueY = &intBlueY)
				{
					uint ret = GetMDCVFixedNative(pngPtr, infoPtr, intWhiteX, intWhiteY, intRedX, intRedY, intGreenX, (int*)pintGreenY, intBlueX, (int*)pintBlueY, masteringDisplayMaximumLuminanceScaledBy10000, masteringDisplayMinimumLuminanceScaledBy10000);
					return ret;
				}
			}
		}

		/// <summary>
		/// Mastering display luminance in cd/m2 (nits). <br/>
		/// </summary>
		public static uint GetMDCVFixed(PngStruct* pngPtr, PngInfo* infoPtr, ref int intWhiteX, int* intWhiteY, int* intRedX, int* intRedY, int* intGreenX, ref int intGreenY, int* intBlueX, ref int intBlueY, uint* masteringDisplayMaximumLuminanceScaledBy10000, uint* masteringDisplayMinimumLuminanceScaledBy10000)
		{
			fixed (int* pintWhiteX = &intWhiteX)
			{
				fixed (int* pintGreenY = &intGreenY)
				{
					fixed (int* pintBlueY = &intBlueY)
					{
						uint ret = GetMDCVFixedNative(pngPtr, infoPtr, (int*)pintWhiteX, intWhiteY, intRedX, intRedY, intGreenX, (int*)pintGreenY, intBlueX, (int*)pintBlueY, masteringDisplayMaximumLuminanceScaledBy10000, masteringDisplayMinimumLuminanceScaledBy10000);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Mastering display luminance in cd/m2 (nits). <br/>
		/// </summary>
		public static uint GetMDCVFixed(PngStruct* pngPtr, PngInfo* infoPtr, int* intWhiteX, ref int intWhiteY, int* intRedX, int* intRedY, int* intGreenX, ref int intGreenY, int* intBlueX, ref int intBlueY, uint* masteringDisplayMaximumLuminanceScaledBy10000, uint* masteringDisplayMinimumLuminanceScaledBy10000)
		{
			fixed (int* pintWhiteY = &intWhiteY)
			{
				fixed (int* pintGreenY = &intGreenY)
				{
					fixed (int* pintBlueY = &intBlueY)
					{
						uint ret = GetMDCVFixedNative(pngPtr, infoPtr, intWhiteX, (int*)pintWhiteY, intRedX, intRedY, intGreenX, (int*)pintGreenY, intBlueX, (int*)pintBlueY, masteringDisplayMaximumLuminanceScaledBy10000, masteringDisplayMinimumLuminanceScaledBy10000);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Mastering display luminance in cd/m2 (nits). <br/>
		/// </summary>
		public static uint GetMDCVFixed(PngStruct* pngPtr, PngInfo* infoPtr, ref int intWhiteX, ref int intWhiteY, int* intRedX, int* intRedY, int* intGreenX, ref int intGreenY, int* intBlueX, ref int intBlueY, uint* masteringDisplayMaximumLuminanceScaledBy10000, uint* masteringDisplayMinimumLuminanceScaledBy10000)
		{
			fixed (int* pintWhiteX = &intWhiteX)
			{
				fixed (int* pintWhiteY = &intWhiteY)
				{
					fixed (int* pintGreenY = &intGreenY)
					{
						fixed (int* pintBlueY = &intBlueY)
						{
							uint ret = GetMDCVFixedNative(pngPtr, infoPtr, (int*)pintWhiteX, (int*)pintWhiteY, intRedX, intRedY, intGreenX, (int*)pintGreenY, intBlueX, (int*)pintBlueY, masteringDisplayMaximumLuminanceScaledBy10000, masteringDisplayMinimumLuminanceScaledBy10000);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// Mastering display luminance in cd/m2 (nits). <br/>
		/// </summary>
		public static uint GetMDCVFixed(PngStruct* pngPtr, PngInfo* infoPtr, int* intWhiteX, int* intWhiteY, ref int intRedX, int* intRedY, int* intGreenX, ref int intGreenY, int* intBlueX, ref int intBlueY, uint* masteringDisplayMaximumLuminanceScaledBy10000, uint* masteringDisplayMinimumLuminanceScaledBy10000)
		{
			fixed (int* pintRedX = &intRedX)
			{
				fixed (int* pintGreenY = &intGreenY)
				{
					fixed (int* pintBlueY = &intBlueY)
					{
						uint ret = GetMDCVFixedNative(pngPtr, infoPtr, intWhiteX, intWhiteY, (int*)pintRedX, intRedY, intGreenX, (int*)pintGreenY, intBlueX, (int*)pintBlueY, masteringDisplayMaximumLuminanceScaledBy10000, masteringDisplayMinimumLuminanceScaledBy10000);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Mastering display luminance in cd/m2 (nits). <br/>
		/// </summary>
		public static uint GetMDCVFixed(PngStruct* pngPtr, PngInfo* infoPtr, ref int intWhiteX, int* intWhiteY, ref int intRedX, int* intRedY, int* intGreenX, ref int intGreenY, int* intBlueX, ref int intBlueY, uint* masteringDisplayMaximumLuminanceScaledBy10000, uint* masteringDisplayMinimumLuminanceScaledBy10000)
		{
			fixed (int* pintWhiteX = &intWhiteX)
			{
				fixed (int* pintRedX = &intRedX)
				{
					fixed (int* pintGreenY = &intGreenY)
					{
						fixed (int* pintBlueY = &intBlueY)
						{
							uint ret = GetMDCVFixedNative(pngPtr, infoPtr, (int*)pintWhiteX, intWhiteY, (int*)pintRedX, intRedY, intGreenX, (int*)pintGreenY, intBlueX, (int*)pintBlueY, masteringDisplayMaximumLuminanceScaledBy10000, masteringDisplayMinimumLuminanceScaledBy10000);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// Mastering display luminance in cd/m2 (nits). <br/>
		/// </summary>
		public static uint GetMDCVFixed(PngStruct* pngPtr, PngInfo* infoPtr, int* intWhiteX, ref int intWhiteY, ref int intRedX, int* intRedY, int* intGreenX, ref int intGreenY, int* intBlueX, ref int intBlueY, uint* masteringDisplayMaximumLuminanceScaledBy10000, uint* masteringDisplayMinimumLuminanceScaledBy10000)
		{
			fixed (int* pintWhiteY = &intWhiteY)
			{
				fixed (int* pintRedX = &intRedX)
				{
					fixed (int* pintGreenY = &intGreenY)
					{
						fixed (int* pintBlueY = &intBlueY)
						{
							uint ret = GetMDCVFixedNative(pngPtr, infoPtr, intWhiteX, (int*)pintWhiteY, (int*)pintRedX, intRedY, intGreenX, (int*)pintGreenY, intBlueX, (int*)pintBlueY, masteringDisplayMaximumLuminanceScaledBy10000, masteringDisplayMinimumLuminanceScaledBy10000);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// Mastering display luminance in cd/m2 (nits). <br/>
		/// </summary>
		public static uint GetMDCVFixed(PngStruct* pngPtr, PngInfo* infoPtr, ref int intWhiteX, ref int intWhiteY, ref int intRedX, int* intRedY, int* intGreenX, ref int intGreenY, int* intBlueX, ref int intBlueY, uint* masteringDisplayMaximumLuminanceScaledBy10000, uint* masteringDisplayMinimumLuminanceScaledBy10000)
		{
			fixed (int* pintWhiteX = &intWhiteX)
			{
				fixed (int* pintWhiteY = &intWhiteY)
				{
					fixed (int* pintRedX = &intRedX)
					{
						fixed (int* pintGreenY = &intGreenY)
						{
							fixed (int* pintBlueY = &intBlueY)
							{
								uint ret = GetMDCVFixedNative(pngPtr, infoPtr, (int*)pintWhiteX, (int*)pintWhiteY, (int*)pintRedX, intRedY, intGreenX, (int*)pintGreenY, intBlueX, (int*)pintBlueY, masteringDisplayMaximumLuminanceScaledBy10000, masteringDisplayMinimumLuminanceScaledBy10000);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// Mastering display luminance in cd/m2 (nits). <br/>
		/// </summary>
		public static uint GetMDCVFixed(PngStruct* pngPtr, PngInfo* infoPtr, int* intWhiteX, int* intWhiteY, int* intRedX, ref int intRedY, int* intGreenX, ref int intGreenY, int* intBlueX, ref int intBlueY, uint* masteringDisplayMaximumLuminanceScaledBy10000, uint* masteringDisplayMinimumLuminanceScaledBy10000)
		{
			fixed (int* pintRedY = &intRedY)
			{
				fixed (int* pintGreenY = &intGreenY)
				{
					fixed (int* pintBlueY = &intBlueY)
					{
						uint ret = GetMDCVFixedNative(pngPtr, infoPtr, intWhiteX, intWhiteY, intRedX, (int*)pintRedY, intGreenX, (int*)pintGreenY, intBlueX, (int*)pintBlueY, masteringDisplayMaximumLuminanceScaledBy10000, masteringDisplayMinimumLuminanceScaledBy10000);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Mastering display luminance in cd/m2 (nits). <br/>
		/// </summary>
		public static uint GetMDCVFixed(PngStruct* pngPtr, PngInfo* infoPtr, ref int intWhiteX, int* intWhiteY, int* intRedX, ref int intRedY, int* intGreenX, ref int intGreenY, int* intBlueX, ref int intBlueY, uint* masteringDisplayMaximumLuminanceScaledBy10000, uint* masteringDisplayMinimumLuminanceScaledBy10000)
		{
			fixed (int* pintWhiteX = &intWhiteX)
			{
				fixed (int* pintRedY = &intRedY)
				{
					fixed (int* pintGreenY = &intGreenY)
					{
						fixed (int* pintBlueY = &intBlueY)
						{
							uint ret = GetMDCVFixedNative(pngPtr, infoPtr, (int*)pintWhiteX, intWhiteY, intRedX, (int*)pintRedY, intGreenX, (int*)pintGreenY, intBlueX, (int*)pintBlueY, masteringDisplayMaximumLuminanceScaledBy10000, masteringDisplayMinimumLuminanceScaledBy10000);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// Mastering display luminance in cd/m2 (nits). <br/>
		/// </summary>
		public static uint GetMDCVFixed(PngStruct* pngPtr, PngInfo* infoPtr, int* intWhiteX, ref int intWhiteY, int* intRedX, ref int intRedY, int* intGreenX, ref int intGreenY, int* intBlueX, ref int intBlueY, uint* masteringDisplayMaximumLuminanceScaledBy10000, uint* masteringDisplayMinimumLuminanceScaledBy10000)
		{
			fixed (int* pintWhiteY = &intWhiteY)
			{
				fixed (int* pintRedY = &intRedY)
				{
					fixed (int* pintGreenY = &intGreenY)
					{
						fixed (int* pintBlueY = &intBlueY)
						{
							uint ret = GetMDCVFixedNative(pngPtr, infoPtr, intWhiteX, (int*)pintWhiteY, intRedX, (int*)pintRedY, intGreenX, (int*)pintGreenY, intBlueX, (int*)pintBlueY, masteringDisplayMaximumLuminanceScaledBy10000, masteringDisplayMinimumLuminanceScaledBy10000);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// Mastering display luminance in cd/m2 (nits). <br/>
		/// </summary>
		public static uint GetMDCVFixed(PngStruct* pngPtr, PngInfo* infoPtr, ref int intWhiteX, ref int intWhiteY, int* intRedX, ref int intRedY, int* intGreenX, ref int intGreenY, int* intBlueX, ref int intBlueY, uint* masteringDisplayMaximumLuminanceScaledBy10000, uint* masteringDisplayMinimumLuminanceScaledBy10000)
		{
			fixed (int* pintWhiteX = &intWhiteX)
			{
				fixed (int* pintWhiteY = &intWhiteY)
				{
					fixed (int* pintRedY = &intRedY)
					{
						fixed (int* pintGreenY = &intGreenY)
						{
							fixed (int* pintBlueY = &intBlueY)
							{
								uint ret = GetMDCVFixedNative(pngPtr, infoPtr, (int*)pintWhiteX, (int*)pintWhiteY, intRedX, (int*)pintRedY, intGreenX, (int*)pintGreenY, intBlueX, (int*)pintBlueY, masteringDisplayMaximumLuminanceScaledBy10000, masteringDisplayMinimumLuminanceScaledBy10000);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// Mastering display luminance in cd/m2 (nits). <br/>
		/// </summary>
		public static uint GetMDCVFixed(PngStruct* pngPtr, PngInfo* infoPtr, int* intWhiteX, int* intWhiteY, ref int intRedX, ref int intRedY, int* intGreenX, ref int intGreenY, int* intBlueX, ref int intBlueY, uint* masteringDisplayMaximumLuminanceScaledBy10000, uint* masteringDisplayMinimumLuminanceScaledBy10000)
		{
			fixed (int* pintRedX = &intRedX)
			{
				fixed (int* pintRedY = &intRedY)
				{
					fixed (int* pintGreenY = &intGreenY)
					{
						fixed (int* pintBlueY = &intBlueY)
						{
							uint ret = GetMDCVFixedNative(pngPtr, infoPtr, intWhiteX, intWhiteY, (int*)pintRedX, (int*)pintRedY, intGreenX, (int*)pintGreenY, intBlueX, (int*)pintBlueY, masteringDisplayMaximumLuminanceScaledBy10000, masteringDisplayMinimumLuminanceScaledBy10000);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// Mastering display luminance in cd/m2 (nits). <br/>
		/// </summary>
		public static uint GetMDCVFixed(PngStruct* pngPtr, PngInfo* infoPtr, ref int intWhiteX, int* intWhiteY, ref int intRedX, ref int intRedY, int* intGreenX, ref int intGreenY, int* intBlueX, ref int intBlueY, uint* masteringDisplayMaximumLuminanceScaledBy10000, uint* masteringDisplayMinimumLuminanceScaledBy10000)
		{
			fixed (int* pintWhiteX = &intWhiteX)
			{
				fixed (int* pintRedX = &intRedX)
				{
					fixed (int* pintRedY = &intRedY)
					{
						fixed (int* pintGreenY = &intGreenY)
						{
							fixed (int* pintBlueY = &intBlueY)
							{
								uint ret = GetMDCVFixedNative(pngPtr, infoPtr, (int*)pintWhiteX, intWhiteY, (int*)pintRedX, (int*)pintRedY, intGreenX, (int*)pintGreenY, intBlueX, (int*)pintBlueY, masteringDisplayMaximumLuminanceScaledBy10000, masteringDisplayMinimumLuminanceScaledBy10000);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// Mastering display luminance in cd/m2 (nits). <br/>
		/// </summary>
		public static uint GetMDCVFixed(PngStruct* pngPtr, PngInfo* infoPtr, int* intWhiteX, ref int intWhiteY, ref int intRedX, ref int intRedY, int* intGreenX, ref int intGreenY, int* intBlueX, ref int intBlueY, uint* masteringDisplayMaximumLuminanceScaledBy10000, uint* masteringDisplayMinimumLuminanceScaledBy10000)
		{
			fixed (int* pintWhiteY = &intWhiteY)
			{
				fixed (int* pintRedX = &intRedX)
				{
					fixed (int* pintRedY = &intRedY)
					{
						fixed (int* pintGreenY = &intGreenY)
						{
							fixed (int* pintBlueY = &intBlueY)
							{
								uint ret = GetMDCVFixedNative(pngPtr, infoPtr, intWhiteX, (int*)pintWhiteY, (int*)pintRedX, (int*)pintRedY, intGreenX, (int*)pintGreenY, intBlueX, (int*)pintBlueY, masteringDisplayMaximumLuminanceScaledBy10000, masteringDisplayMinimumLuminanceScaledBy10000);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// Mastering display luminance in cd/m2 (nits). <br/>
		/// </summary>
		public static uint GetMDCVFixed(PngStruct* pngPtr, PngInfo* infoPtr, ref int intWhiteX, ref int intWhiteY, ref int intRedX, ref int intRedY, int* intGreenX, ref int intGreenY, int* intBlueX, ref int intBlueY, uint* masteringDisplayMaximumLuminanceScaledBy10000, uint* masteringDisplayMinimumLuminanceScaledBy10000)
		{
			fixed (int* pintWhiteX = &intWhiteX)
			{
				fixed (int* pintWhiteY = &intWhiteY)
				{
					fixed (int* pintRedX = &intRedX)
					{
						fixed (int* pintRedY = &intRedY)
						{
							fixed (int* pintGreenY = &intGreenY)
							{
								fixed (int* pintBlueY = &intBlueY)
								{
									uint ret = GetMDCVFixedNative(pngPtr, infoPtr, (int*)pintWhiteX, (int*)pintWhiteY, (int*)pintRedX, (int*)pintRedY, intGreenX, (int*)pintGreenY, intBlueX, (int*)pintBlueY, masteringDisplayMaximumLuminanceScaledBy10000, masteringDisplayMinimumLuminanceScaledBy10000);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// Mastering display luminance in cd/m2 (nits). <br/>
		/// </summary>
		public static uint GetMDCVFixed(PngStruct* pngPtr, PngInfo* infoPtr, int* intWhiteX, int* intWhiteY, int* intRedX, int* intRedY, ref int intGreenX, ref int intGreenY, int* intBlueX, ref int intBlueY, uint* masteringDisplayMaximumLuminanceScaledBy10000, uint* masteringDisplayMinimumLuminanceScaledBy10000)
		{
			fixed (int* pintGreenX = &intGreenX)
			{
				fixed (int* pintGreenY = &intGreenY)
				{
					fixed (int* pintBlueY = &intBlueY)
					{
						uint ret = GetMDCVFixedNative(pngPtr, infoPtr, intWhiteX, intWhiteY, intRedX, intRedY, (int*)pintGreenX, (int*)pintGreenY, intBlueX, (int*)pintBlueY, masteringDisplayMaximumLuminanceScaledBy10000, masteringDisplayMinimumLuminanceScaledBy10000);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Mastering display luminance in cd/m2 (nits). <br/>
		/// </summary>
		public static uint GetMDCVFixed(PngStruct* pngPtr, PngInfo* infoPtr, ref int intWhiteX, int* intWhiteY, int* intRedX, int* intRedY, ref int intGreenX, ref int intGreenY, int* intBlueX, ref int intBlueY, uint* masteringDisplayMaximumLuminanceScaledBy10000, uint* masteringDisplayMinimumLuminanceScaledBy10000)
		{
			fixed (int* pintWhiteX = &intWhiteX)
			{
				fixed (int* pintGreenX = &intGreenX)
				{
					fixed (int* pintGreenY = &intGreenY)
					{
						fixed (int* pintBlueY = &intBlueY)
						{
							uint ret = GetMDCVFixedNative(pngPtr, infoPtr, (int*)pintWhiteX, intWhiteY, intRedX, intRedY, (int*)pintGreenX, (int*)pintGreenY, intBlueX, (int*)pintBlueY, masteringDisplayMaximumLuminanceScaledBy10000, masteringDisplayMinimumLuminanceScaledBy10000);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// Mastering display luminance in cd/m2 (nits). <br/>
		/// </summary>
		public static uint GetMDCVFixed(PngStruct* pngPtr, PngInfo* infoPtr, int* intWhiteX, ref int intWhiteY, int* intRedX, int* intRedY, ref int intGreenX, ref int intGreenY, int* intBlueX, ref int intBlueY, uint* masteringDisplayMaximumLuminanceScaledBy10000, uint* masteringDisplayMinimumLuminanceScaledBy10000)
		{
			fixed (int* pintWhiteY = &intWhiteY)
			{
				fixed (int* pintGreenX = &intGreenX)
				{
					fixed (int* pintGreenY = &intGreenY)
					{
						fixed (int* pintBlueY = &intBlueY)
						{
							uint ret = GetMDCVFixedNative(pngPtr, infoPtr, intWhiteX, (int*)pintWhiteY, intRedX, intRedY, (int*)pintGreenX, (int*)pintGreenY, intBlueX, (int*)pintBlueY, masteringDisplayMaximumLuminanceScaledBy10000, masteringDisplayMinimumLuminanceScaledBy10000);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// Mastering display luminance in cd/m2 (nits). <br/>
		/// </summary>
		public static uint GetMDCVFixed(PngStruct* pngPtr, PngInfo* infoPtr, ref int intWhiteX, ref int intWhiteY, int* intRedX, int* intRedY, ref int intGreenX, ref int intGreenY, int* intBlueX, ref int intBlueY, uint* masteringDisplayMaximumLuminanceScaledBy10000, uint* masteringDisplayMinimumLuminanceScaledBy10000)
		{
			fixed (int* pintWhiteX = &intWhiteX)
			{
				fixed (int* pintWhiteY = &intWhiteY)
				{
					fixed (int* pintGreenX = &intGreenX)
					{
						fixed (int* pintGreenY = &intGreenY)
						{
							fixed (int* pintBlueY = &intBlueY)
							{
								uint ret = GetMDCVFixedNative(pngPtr, infoPtr, (int*)pintWhiteX, (int*)pintWhiteY, intRedX, intRedY, (int*)pintGreenX, (int*)pintGreenY, intBlueX, (int*)pintBlueY, masteringDisplayMaximumLuminanceScaledBy10000, masteringDisplayMinimumLuminanceScaledBy10000);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// Mastering display luminance in cd/m2 (nits). <br/>
		/// </summary>
		public static uint GetMDCVFixed(PngStruct* pngPtr, PngInfo* infoPtr, int* intWhiteX, int* intWhiteY, ref int intRedX, int* intRedY, ref int intGreenX, ref int intGreenY, int* intBlueX, ref int intBlueY, uint* masteringDisplayMaximumLuminanceScaledBy10000, uint* masteringDisplayMinimumLuminanceScaledBy10000)
		{
			fixed (int* pintRedX = &intRedX)
			{
				fixed (int* pintGreenX = &intGreenX)
				{
					fixed (int* pintGreenY = &intGreenY)
					{
						fixed (int* pintBlueY = &intBlueY)
						{
							uint ret = GetMDCVFixedNative(pngPtr, infoPtr, intWhiteX, intWhiteY, (int*)pintRedX, intRedY, (int*)pintGreenX, (int*)pintGreenY, intBlueX, (int*)pintBlueY, masteringDisplayMaximumLuminanceScaledBy10000, masteringDisplayMinimumLuminanceScaledBy10000);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// Mastering display luminance in cd/m2 (nits). <br/>
		/// </summary>
		public static uint GetMDCVFixed(PngStruct* pngPtr, PngInfo* infoPtr, ref int intWhiteX, int* intWhiteY, ref int intRedX, int* intRedY, ref int intGreenX, ref int intGreenY, int* intBlueX, ref int intBlueY, uint* masteringDisplayMaximumLuminanceScaledBy10000, uint* masteringDisplayMinimumLuminanceScaledBy10000)
		{
			fixed (int* pintWhiteX = &intWhiteX)
			{
				fixed (int* pintRedX = &intRedX)
				{
					fixed (int* pintGreenX = &intGreenX)
					{
						fixed (int* pintGreenY = &intGreenY)
						{
							fixed (int* pintBlueY = &intBlueY)
							{
								uint ret = GetMDCVFixedNative(pngPtr, infoPtr, (int*)pintWhiteX, intWhiteY, (int*)pintRedX, intRedY, (int*)pintGreenX, (int*)pintGreenY, intBlueX, (int*)pintBlueY, masteringDisplayMaximumLuminanceScaledBy10000, masteringDisplayMinimumLuminanceScaledBy10000);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// Mastering display luminance in cd/m2 (nits). <br/>
		/// </summary>
		public static uint GetMDCVFixed(PngStruct* pngPtr, PngInfo* infoPtr, int* intWhiteX, ref int intWhiteY, ref int intRedX, int* intRedY, ref int intGreenX, ref int intGreenY, int* intBlueX, ref int intBlueY, uint* masteringDisplayMaximumLuminanceScaledBy10000, uint* masteringDisplayMinimumLuminanceScaledBy10000)
		{
			fixed (int* pintWhiteY = &intWhiteY)
			{
				fixed (int* pintRedX = &intRedX)
				{
					fixed (int* pintGreenX = &intGreenX)
					{
						fixed (int* pintGreenY = &intGreenY)
						{
							fixed (int* pintBlueY = &intBlueY)
							{
								uint ret = GetMDCVFixedNative(pngPtr, infoPtr, intWhiteX, (int*)pintWhiteY, (int*)pintRedX, intRedY, (int*)pintGreenX, (int*)pintGreenY, intBlueX, (int*)pintBlueY, masteringDisplayMaximumLuminanceScaledBy10000, masteringDisplayMinimumLuminanceScaledBy10000);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// Mastering display luminance in cd/m2 (nits). <br/>
		/// </summary>
		public static uint GetMDCVFixed(PngStruct* pngPtr, PngInfo* infoPtr, ref int intWhiteX, ref int intWhiteY, ref int intRedX, int* intRedY, ref int intGreenX, ref int intGreenY, int* intBlueX, ref int intBlueY, uint* masteringDisplayMaximumLuminanceScaledBy10000, uint* masteringDisplayMinimumLuminanceScaledBy10000)
		{
			fixed (int* pintWhiteX = &intWhiteX)
			{
				fixed (int* pintWhiteY = &intWhiteY)
				{
					fixed (int* pintRedX = &intRedX)
					{
						fixed (int* pintGreenX = &intGreenX)
						{
							fixed (int* pintGreenY = &intGreenY)
							{
								fixed (int* pintBlueY = &intBlueY)
								{
									uint ret = GetMDCVFixedNative(pngPtr, infoPtr, (int*)pintWhiteX, (int*)pintWhiteY, (int*)pintRedX, intRedY, (int*)pintGreenX, (int*)pintGreenY, intBlueX, (int*)pintBlueY, masteringDisplayMaximumLuminanceScaledBy10000, masteringDisplayMinimumLuminanceScaledBy10000);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// Mastering display luminance in cd/m2 (nits). <br/>
		/// </summary>
		public static uint GetMDCVFixed(PngStruct* pngPtr, PngInfo* infoPtr, int* intWhiteX, int* intWhiteY, int* intRedX, ref int intRedY, ref int intGreenX, ref int intGreenY, int* intBlueX, ref int intBlueY, uint* masteringDisplayMaximumLuminanceScaledBy10000, uint* masteringDisplayMinimumLuminanceScaledBy10000)
		{
			fixed (int* pintRedY = &intRedY)
			{
				fixed (int* pintGreenX = &intGreenX)
				{
					fixed (int* pintGreenY = &intGreenY)
					{
						fixed (int* pintBlueY = &intBlueY)
						{
							uint ret = GetMDCVFixedNative(pngPtr, infoPtr, intWhiteX, intWhiteY, intRedX, (int*)pintRedY, (int*)pintGreenX, (int*)pintGreenY, intBlueX, (int*)pintBlueY, masteringDisplayMaximumLuminanceScaledBy10000, masteringDisplayMinimumLuminanceScaledBy10000);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// Mastering display luminance in cd/m2 (nits). <br/>
		/// </summary>
		public static uint GetMDCVFixed(PngStruct* pngPtr, PngInfo* infoPtr, ref int intWhiteX, int* intWhiteY, int* intRedX, ref int intRedY, ref int intGreenX, ref int intGreenY, int* intBlueX, ref int intBlueY, uint* masteringDisplayMaximumLuminanceScaledBy10000, uint* masteringDisplayMinimumLuminanceScaledBy10000)
		{
			fixed (int* pintWhiteX = &intWhiteX)
			{
				fixed (int* pintRedY = &intRedY)
				{
					fixed (int* pintGreenX = &intGreenX)
					{
						fixed (int* pintGreenY = &intGreenY)
						{
							fixed (int* pintBlueY = &intBlueY)
							{
								uint ret = GetMDCVFixedNative(pngPtr, infoPtr, (int*)pintWhiteX, intWhiteY, intRedX, (int*)pintRedY, (int*)pintGreenX, (int*)pintGreenY, intBlueX, (int*)pintBlueY, masteringDisplayMaximumLuminanceScaledBy10000, masteringDisplayMinimumLuminanceScaledBy10000);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// Mastering display luminance in cd/m2 (nits). <br/>
		/// </summary>
		public static uint GetMDCVFixed(PngStruct* pngPtr, PngInfo* infoPtr, int* intWhiteX, ref int intWhiteY, int* intRedX, ref int intRedY, ref int intGreenX, ref int intGreenY, int* intBlueX, ref int intBlueY, uint* masteringDisplayMaximumLuminanceScaledBy10000, uint* masteringDisplayMinimumLuminanceScaledBy10000)
		{
			fixed (int* pintWhiteY = &intWhiteY)
			{
				fixed (int* pintRedY = &intRedY)
				{
					fixed (int* pintGreenX = &intGreenX)
					{
						fixed (int* pintGreenY = &intGreenY)
						{
							fixed (int* pintBlueY = &intBlueY)
							{
								uint ret = GetMDCVFixedNative(pngPtr, infoPtr, intWhiteX, (int*)pintWhiteY, intRedX, (int*)pintRedY, (int*)pintGreenX, (int*)pintGreenY, intBlueX, (int*)pintBlueY, masteringDisplayMaximumLuminanceScaledBy10000, masteringDisplayMinimumLuminanceScaledBy10000);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// Mastering display luminance in cd/m2 (nits). <br/>
		/// </summary>
		public static uint GetMDCVFixed(PngStruct* pngPtr, PngInfo* infoPtr, ref int intWhiteX, ref int intWhiteY, int* intRedX, ref int intRedY, ref int intGreenX, ref int intGreenY, int* intBlueX, ref int intBlueY, uint* masteringDisplayMaximumLuminanceScaledBy10000, uint* masteringDisplayMinimumLuminanceScaledBy10000)
		{
			fixed (int* pintWhiteX = &intWhiteX)
			{
				fixed (int* pintWhiteY = &intWhiteY)
				{
					fixed (int* pintRedY = &intRedY)
					{
						fixed (int* pintGreenX = &intGreenX)
						{
							fixed (int* pintGreenY = &intGreenY)
							{
								fixed (int* pintBlueY = &intBlueY)
								{
									uint ret = GetMDCVFixedNative(pngPtr, infoPtr, (int*)pintWhiteX, (int*)pintWhiteY, intRedX, (int*)pintRedY, (int*)pintGreenX, (int*)pintGreenY, intBlueX, (int*)pintBlueY, masteringDisplayMaximumLuminanceScaledBy10000, masteringDisplayMinimumLuminanceScaledBy10000);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// Mastering display luminance in cd/m2 (nits). <br/>
		/// </summary>
		public static uint GetMDCVFixed(PngStruct* pngPtr, PngInfo* infoPtr, int* intWhiteX, int* intWhiteY, ref int intRedX, ref int intRedY, ref int intGreenX, ref int intGreenY, int* intBlueX, ref int intBlueY, uint* masteringDisplayMaximumLuminanceScaledBy10000, uint* masteringDisplayMinimumLuminanceScaledBy10000)
		{
			fixed (int* pintRedX = &intRedX)
			{
				fixed (int* pintRedY = &intRedY)
				{
					fixed (int* pintGreenX = &intGreenX)
					{
						fixed (int* pintGreenY = &intGreenY)
						{
							fixed (int* pintBlueY = &intBlueY)
							{
								uint ret = GetMDCVFixedNative(pngPtr, infoPtr, intWhiteX, intWhiteY, (int*)pintRedX, (int*)pintRedY, (int*)pintGreenX, (int*)pintGreenY, intBlueX, (int*)pintBlueY, masteringDisplayMaximumLuminanceScaledBy10000, masteringDisplayMinimumLuminanceScaledBy10000);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// Mastering display luminance in cd/m2 (nits). <br/>
		/// </summary>
		public static uint GetMDCVFixed(PngStruct* pngPtr, PngInfo* infoPtr, ref int intWhiteX, int* intWhiteY, ref int intRedX, ref int intRedY, ref int intGreenX, ref int intGreenY, int* intBlueX, ref int intBlueY, uint* masteringDisplayMaximumLuminanceScaledBy10000, uint* masteringDisplayMinimumLuminanceScaledBy10000)
		{
			fixed (int* pintWhiteX = &intWhiteX)
			{
				fixed (int* pintRedX = &intRedX)
				{
					fixed (int* pintRedY = &intRedY)
					{
						fixed (int* pintGreenX = &intGreenX)
						{
							fixed (int* pintGreenY = &intGreenY)
							{
								fixed (int* pintBlueY = &intBlueY)
								{
									uint ret = GetMDCVFixedNative(pngPtr, infoPtr, (int*)pintWhiteX, intWhiteY, (int*)pintRedX, (int*)pintRedY, (int*)pintGreenX, (int*)pintGreenY, intBlueX, (int*)pintBlueY, masteringDisplayMaximumLuminanceScaledBy10000, masteringDisplayMinimumLuminanceScaledBy10000);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// Mastering display luminance in cd/m2 (nits). <br/>
		/// </summary>
		public static uint GetMDCVFixed(PngStruct* pngPtr, PngInfo* infoPtr, int* intWhiteX, ref int intWhiteY, ref int intRedX, ref int intRedY, ref int intGreenX, ref int intGreenY, int* intBlueX, ref int intBlueY, uint* masteringDisplayMaximumLuminanceScaledBy10000, uint* masteringDisplayMinimumLuminanceScaledBy10000)
		{
			fixed (int* pintWhiteY = &intWhiteY)
			{
				fixed (int* pintRedX = &intRedX)
				{
					fixed (int* pintRedY = &intRedY)
					{
						fixed (int* pintGreenX = &intGreenX)
						{
							fixed (int* pintGreenY = &intGreenY)
							{
								fixed (int* pintBlueY = &intBlueY)
								{
									uint ret = GetMDCVFixedNative(pngPtr, infoPtr, intWhiteX, (int*)pintWhiteY, (int*)pintRedX, (int*)pintRedY, (int*)pintGreenX, (int*)pintGreenY, intBlueX, (int*)pintBlueY, masteringDisplayMaximumLuminanceScaledBy10000, masteringDisplayMinimumLuminanceScaledBy10000);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// Mastering display luminance in cd/m2 (nits). <br/>
		/// </summary>
		public static uint GetMDCVFixed(PngStruct* pngPtr, PngInfo* infoPtr, ref int intWhiteX, ref int intWhiteY, ref int intRedX, ref int intRedY, ref int intGreenX, ref int intGreenY, int* intBlueX, ref int intBlueY, uint* masteringDisplayMaximumLuminanceScaledBy10000, uint* masteringDisplayMinimumLuminanceScaledBy10000)
		{
			fixed (int* pintWhiteX = &intWhiteX)
			{
				fixed (int* pintWhiteY = &intWhiteY)
				{
					fixed (int* pintRedX = &intRedX)
					{
						fixed (int* pintRedY = &intRedY)
						{
							fixed (int* pintGreenX = &intGreenX)
							{
								fixed (int* pintGreenY = &intGreenY)
								{
									fixed (int* pintBlueY = &intBlueY)
									{
										uint ret = GetMDCVFixedNative(pngPtr, infoPtr, (int*)pintWhiteX, (int*)pintWhiteY, (int*)pintRedX, (int*)pintRedY, (int*)pintGreenX, (int*)pintGreenY, intBlueX, (int*)pintBlueY, masteringDisplayMaximumLuminanceScaledBy10000, masteringDisplayMinimumLuminanceScaledBy10000);
										return ret;
									}
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// Mastering display luminance in cd/m2 (nits). <br/>
		/// </summary>
		public static uint GetMDCVFixed(PngStruct* pngPtr, PngInfo* infoPtr, int* intWhiteX, int* intWhiteY, int* intRedX, int* intRedY, int* intGreenX, int* intGreenY, ref int intBlueX, ref int intBlueY, uint* masteringDisplayMaximumLuminanceScaledBy10000, uint* masteringDisplayMinimumLuminanceScaledBy10000)
		{
			fixed (int* pintBlueX = &intBlueX)
			{
				fixed (int* pintBlueY = &intBlueY)
				{
					uint ret = GetMDCVFixedNative(pngPtr, infoPtr, intWhiteX, intWhiteY, intRedX, intRedY, intGreenX, intGreenY, (int*)pintBlueX, (int*)pintBlueY, masteringDisplayMaximumLuminanceScaledBy10000, masteringDisplayMinimumLuminanceScaledBy10000);
					return ret;
				}
			}
		}

		/// <summary>
		/// Mastering display luminance in cd/m2 (nits). <br/>
		/// </summary>
		public static uint GetMDCVFixed(PngStruct* pngPtr, PngInfo* infoPtr, ref int intWhiteX, int* intWhiteY, int* intRedX, int* intRedY, int* intGreenX, int* intGreenY, ref int intBlueX, ref int intBlueY, uint* masteringDisplayMaximumLuminanceScaledBy10000, uint* masteringDisplayMinimumLuminanceScaledBy10000)
		{
			fixed (int* pintWhiteX = &intWhiteX)
			{
				fixed (int* pintBlueX = &intBlueX)
				{
					fixed (int* pintBlueY = &intBlueY)
					{
						uint ret = GetMDCVFixedNative(pngPtr, infoPtr, (int*)pintWhiteX, intWhiteY, intRedX, intRedY, intGreenX, intGreenY, (int*)pintBlueX, (int*)pintBlueY, masteringDisplayMaximumLuminanceScaledBy10000, masteringDisplayMinimumLuminanceScaledBy10000);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Mastering display luminance in cd/m2 (nits). <br/>
		/// </summary>
		public static uint GetMDCVFixed(PngStruct* pngPtr, PngInfo* infoPtr, int* intWhiteX, ref int intWhiteY, int* intRedX, int* intRedY, int* intGreenX, int* intGreenY, ref int intBlueX, ref int intBlueY, uint* masteringDisplayMaximumLuminanceScaledBy10000, uint* masteringDisplayMinimumLuminanceScaledBy10000)
		{
			fixed (int* pintWhiteY = &intWhiteY)
			{
				fixed (int* pintBlueX = &intBlueX)
				{
					fixed (int* pintBlueY = &intBlueY)
					{
						uint ret = GetMDCVFixedNative(pngPtr, infoPtr, intWhiteX, (int*)pintWhiteY, intRedX, intRedY, intGreenX, intGreenY, (int*)pintBlueX, (int*)pintBlueY, masteringDisplayMaximumLuminanceScaledBy10000, masteringDisplayMinimumLuminanceScaledBy10000);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Mastering display luminance in cd/m2 (nits). <br/>
		/// </summary>
		public static uint GetMDCVFixed(PngStruct* pngPtr, PngInfo* infoPtr, ref int intWhiteX, ref int intWhiteY, int* intRedX, int* intRedY, int* intGreenX, int* intGreenY, ref int intBlueX, ref int intBlueY, uint* masteringDisplayMaximumLuminanceScaledBy10000, uint* masteringDisplayMinimumLuminanceScaledBy10000)
		{
			fixed (int* pintWhiteX = &intWhiteX)
			{
				fixed (int* pintWhiteY = &intWhiteY)
				{
					fixed (int* pintBlueX = &intBlueX)
					{
						fixed (int* pintBlueY = &intBlueY)
						{
							uint ret = GetMDCVFixedNative(pngPtr, infoPtr, (int*)pintWhiteX, (int*)pintWhiteY, intRedX, intRedY, intGreenX, intGreenY, (int*)pintBlueX, (int*)pintBlueY, masteringDisplayMaximumLuminanceScaledBy10000, masteringDisplayMinimumLuminanceScaledBy10000);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// Mastering display luminance in cd/m2 (nits). <br/>
		/// </summary>
		public static uint GetMDCVFixed(PngStruct* pngPtr, PngInfo* infoPtr, int* intWhiteX, int* intWhiteY, ref int intRedX, int* intRedY, int* intGreenX, int* intGreenY, ref int intBlueX, ref int intBlueY, uint* masteringDisplayMaximumLuminanceScaledBy10000, uint* masteringDisplayMinimumLuminanceScaledBy10000)
		{
			fixed (int* pintRedX = &intRedX)
			{
				fixed (int* pintBlueX = &intBlueX)
				{
					fixed (int* pintBlueY = &intBlueY)
					{
						uint ret = GetMDCVFixedNative(pngPtr, infoPtr, intWhiteX, intWhiteY, (int*)pintRedX, intRedY, intGreenX, intGreenY, (int*)pintBlueX, (int*)pintBlueY, masteringDisplayMaximumLuminanceScaledBy10000, masteringDisplayMinimumLuminanceScaledBy10000);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Mastering display luminance in cd/m2 (nits). <br/>
		/// </summary>
		public static uint GetMDCVFixed(PngStruct* pngPtr, PngInfo* infoPtr, ref int intWhiteX, int* intWhiteY, ref int intRedX, int* intRedY, int* intGreenX, int* intGreenY, ref int intBlueX, ref int intBlueY, uint* masteringDisplayMaximumLuminanceScaledBy10000, uint* masteringDisplayMinimumLuminanceScaledBy10000)
		{
			fixed (int* pintWhiteX = &intWhiteX)
			{
				fixed (int* pintRedX = &intRedX)
				{
					fixed (int* pintBlueX = &intBlueX)
					{
						fixed (int* pintBlueY = &intBlueY)
						{
							uint ret = GetMDCVFixedNative(pngPtr, infoPtr, (int*)pintWhiteX, intWhiteY, (int*)pintRedX, intRedY, intGreenX, intGreenY, (int*)pintBlueX, (int*)pintBlueY, masteringDisplayMaximumLuminanceScaledBy10000, masteringDisplayMinimumLuminanceScaledBy10000);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// Mastering display luminance in cd/m2 (nits). <br/>
		/// </summary>
		public static uint GetMDCVFixed(PngStruct* pngPtr, PngInfo* infoPtr, int* intWhiteX, ref int intWhiteY, ref int intRedX, int* intRedY, int* intGreenX, int* intGreenY, ref int intBlueX, ref int intBlueY, uint* masteringDisplayMaximumLuminanceScaledBy10000, uint* masteringDisplayMinimumLuminanceScaledBy10000)
		{
			fixed (int* pintWhiteY = &intWhiteY)
			{
				fixed (int* pintRedX = &intRedX)
				{
					fixed (int* pintBlueX = &intBlueX)
					{
						fixed (int* pintBlueY = &intBlueY)
						{
							uint ret = GetMDCVFixedNative(pngPtr, infoPtr, intWhiteX, (int*)pintWhiteY, (int*)pintRedX, intRedY, intGreenX, intGreenY, (int*)pintBlueX, (int*)pintBlueY, masteringDisplayMaximumLuminanceScaledBy10000, masteringDisplayMinimumLuminanceScaledBy10000);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// Mastering display luminance in cd/m2 (nits). <br/>
		/// </summary>
		public static uint GetMDCVFixed(PngStruct* pngPtr, PngInfo* infoPtr, ref int intWhiteX, ref int intWhiteY, ref int intRedX, int* intRedY, int* intGreenX, int* intGreenY, ref int intBlueX, ref int intBlueY, uint* masteringDisplayMaximumLuminanceScaledBy10000, uint* masteringDisplayMinimumLuminanceScaledBy10000)
		{
			fixed (int* pintWhiteX = &intWhiteX)
			{
				fixed (int* pintWhiteY = &intWhiteY)
				{
					fixed (int* pintRedX = &intRedX)
					{
						fixed (int* pintBlueX = &intBlueX)
						{
							fixed (int* pintBlueY = &intBlueY)
							{
								uint ret = GetMDCVFixedNative(pngPtr, infoPtr, (int*)pintWhiteX, (int*)pintWhiteY, (int*)pintRedX, intRedY, intGreenX, intGreenY, (int*)pintBlueX, (int*)pintBlueY, masteringDisplayMaximumLuminanceScaledBy10000, masteringDisplayMinimumLuminanceScaledBy10000);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// Mastering display luminance in cd/m2 (nits). <br/>
		/// </summary>
		public static uint GetMDCVFixed(PngStruct* pngPtr, PngInfo* infoPtr, int* intWhiteX, int* intWhiteY, int* intRedX, ref int intRedY, int* intGreenX, int* intGreenY, ref int intBlueX, ref int intBlueY, uint* masteringDisplayMaximumLuminanceScaledBy10000, uint* masteringDisplayMinimumLuminanceScaledBy10000)
		{
			fixed (int* pintRedY = &intRedY)
			{
				fixed (int* pintBlueX = &intBlueX)
				{
					fixed (int* pintBlueY = &intBlueY)
					{
						uint ret = GetMDCVFixedNative(pngPtr, infoPtr, intWhiteX, intWhiteY, intRedX, (int*)pintRedY, intGreenX, intGreenY, (int*)pintBlueX, (int*)pintBlueY, masteringDisplayMaximumLuminanceScaledBy10000, masteringDisplayMinimumLuminanceScaledBy10000);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Mastering display luminance in cd/m2 (nits). <br/>
		/// </summary>
		public static uint GetMDCVFixed(PngStruct* pngPtr, PngInfo* infoPtr, ref int intWhiteX, int* intWhiteY, int* intRedX, ref int intRedY, int* intGreenX, int* intGreenY, ref int intBlueX, ref int intBlueY, uint* masteringDisplayMaximumLuminanceScaledBy10000, uint* masteringDisplayMinimumLuminanceScaledBy10000)
		{
			fixed (int* pintWhiteX = &intWhiteX)
			{
				fixed (int* pintRedY = &intRedY)
				{
					fixed (int* pintBlueX = &intBlueX)
					{
						fixed (int* pintBlueY = &intBlueY)
						{
							uint ret = GetMDCVFixedNative(pngPtr, infoPtr, (int*)pintWhiteX, intWhiteY, intRedX, (int*)pintRedY, intGreenX, intGreenY, (int*)pintBlueX, (int*)pintBlueY, masteringDisplayMaximumLuminanceScaledBy10000, masteringDisplayMinimumLuminanceScaledBy10000);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// Mastering display luminance in cd/m2 (nits). <br/>
		/// </summary>
		public static uint GetMDCVFixed(PngStruct* pngPtr, PngInfo* infoPtr, int* intWhiteX, ref int intWhiteY, int* intRedX, ref int intRedY, int* intGreenX, int* intGreenY, ref int intBlueX, ref int intBlueY, uint* masteringDisplayMaximumLuminanceScaledBy10000, uint* masteringDisplayMinimumLuminanceScaledBy10000)
		{
			fixed (int* pintWhiteY = &intWhiteY)
			{
				fixed (int* pintRedY = &intRedY)
				{
					fixed (int* pintBlueX = &intBlueX)
					{
						fixed (int* pintBlueY = &intBlueY)
						{
							uint ret = GetMDCVFixedNative(pngPtr, infoPtr, intWhiteX, (int*)pintWhiteY, intRedX, (int*)pintRedY, intGreenX, intGreenY, (int*)pintBlueX, (int*)pintBlueY, masteringDisplayMaximumLuminanceScaledBy10000, masteringDisplayMinimumLuminanceScaledBy10000);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// Mastering display luminance in cd/m2 (nits). <br/>
		/// </summary>
		public static uint GetMDCVFixed(PngStruct* pngPtr, PngInfo* infoPtr, ref int intWhiteX, ref int intWhiteY, int* intRedX, ref int intRedY, int* intGreenX, int* intGreenY, ref int intBlueX, ref int intBlueY, uint* masteringDisplayMaximumLuminanceScaledBy10000, uint* masteringDisplayMinimumLuminanceScaledBy10000)
		{
			fixed (int* pintWhiteX = &intWhiteX)
			{
				fixed (int* pintWhiteY = &intWhiteY)
				{
					fixed (int* pintRedY = &intRedY)
					{
						fixed (int* pintBlueX = &intBlueX)
						{
							fixed (int* pintBlueY = &intBlueY)
							{
								uint ret = GetMDCVFixedNative(pngPtr, infoPtr, (int*)pintWhiteX, (int*)pintWhiteY, intRedX, (int*)pintRedY, intGreenX, intGreenY, (int*)pintBlueX, (int*)pintBlueY, masteringDisplayMaximumLuminanceScaledBy10000, masteringDisplayMinimumLuminanceScaledBy10000);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// Mastering display luminance in cd/m2 (nits). <br/>
		/// </summary>
		public static uint GetMDCVFixed(PngStruct* pngPtr, PngInfo* infoPtr, int* intWhiteX, int* intWhiteY, ref int intRedX, ref int intRedY, int* intGreenX, int* intGreenY, ref int intBlueX, ref int intBlueY, uint* masteringDisplayMaximumLuminanceScaledBy10000, uint* masteringDisplayMinimumLuminanceScaledBy10000)
		{
			fixed (int* pintRedX = &intRedX)
			{
				fixed (int* pintRedY = &intRedY)
				{
					fixed (int* pintBlueX = &intBlueX)
					{
						fixed (int* pintBlueY = &intBlueY)
						{
							uint ret = GetMDCVFixedNative(pngPtr, infoPtr, intWhiteX, intWhiteY, (int*)pintRedX, (int*)pintRedY, intGreenX, intGreenY, (int*)pintBlueX, (int*)pintBlueY, masteringDisplayMaximumLuminanceScaledBy10000, masteringDisplayMinimumLuminanceScaledBy10000);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// Mastering display luminance in cd/m2 (nits). <br/>
		/// </summary>
		public static uint GetMDCVFixed(PngStruct* pngPtr, PngInfo* infoPtr, ref int intWhiteX, int* intWhiteY, ref int intRedX, ref int intRedY, int* intGreenX, int* intGreenY, ref int intBlueX, ref int intBlueY, uint* masteringDisplayMaximumLuminanceScaledBy10000, uint* masteringDisplayMinimumLuminanceScaledBy10000)
		{
			fixed (int* pintWhiteX = &intWhiteX)
			{
				fixed (int* pintRedX = &intRedX)
				{
					fixed (int* pintRedY = &intRedY)
					{
						fixed (int* pintBlueX = &intBlueX)
						{
							fixed (int* pintBlueY = &intBlueY)
							{
								uint ret = GetMDCVFixedNative(pngPtr, infoPtr, (int*)pintWhiteX, intWhiteY, (int*)pintRedX, (int*)pintRedY, intGreenX, intGreenY, (int*)pintBlueX, (int*)pintBlueY, masteringDisplayMaximumLuminanceScaledBy10000, masteringDisplayMinimumLuminanceScaledBy10000);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// Mastering display luminance in cd/m2 (nits). <br/>
		/// </summary>
		public static uint GetMDCVFixed(PngStruct* pngPtr, PngInfo* infoPtr, int* intWhiteX, ref int intWhiteY, ref int intRedX, ref int intRedY, int* intGreenX, int* intGreenY, ref int intBlueX, ref int intBlueY, uint* masteringDisplayMaximumLuminanceScaledBy10000, uint* masteringDisplayMinimumLuminanceScaledBy10000)
		{
			fixed (int* pintWhiteY = &intWhiteY)
			{
				fixed (int* pintRedX = &intRedX)
				{
					fixed (int* pintRedY = &intRedY)
					{
						fixed (int* pintBlueX = &intBlueX)
						{
							fixed (int* pintBlueY = &intBlueY)
							{
								uint ret = GetMDCVFixedNative(pngPtr, infoPtr, intWhiteX, (int*)pintWhiteY, (int*)pintRedX, (int*)pintRedY, intGreenX, intGreenY, (int*)pintBlueX, (int*)pintBlueY, masteringDisplayMaximumLuminanceScaledBy10000, masteringDisplayMinimumLuminanceScaledBy10000);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// Mastering display luminance in cd/m2 (nits). <br/>
		/// </summary>
		public static uint GetMDCVFixed(PngStruct* pngPtr, PngInfo* infoPtr, ref int intWhiteX, ref int intWhiteY, ref int intRedX, ref int intRedY, int* intGreenX, int* intGreenY, ref int intBlueX, ref int intBlueY, uint* masteringDisplayMaximumLuminanceScaledBy10000, uint* masteringDisplayMinimumLuminanceScaledBy10000)
		{
			fixed (int* pintWhiteX = &intWhiteX)
			{
				fixed (int* pintWhiteY = &intWhiteY)
				{
					fixed (int* pintRedX = &intRedX)
					{
						fixed (int* pintRedY = &intRedY)
						{
							fixed (int* pintBlueX = &intBlueX)
							{
								fixed (int* pintBlueY = &intBlueY)
								{
									uint ret = GetMDCVFixedNative(pngPtr, infoPtr, (int*)pintWhiteX, (int*)pintWhiteY, (int*)pintRedX, (int*)pintRedY, intGreenX, intGreenY, (int*)pintBlueX, (int*)pintBlueY, masteringDisplayMaximumLuminanceScaledBy10000, masteringDisplayMinimumLuminanceScaledBy10000);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// Mastering display luminance in cd/m2 (nits). <br/>
		/// </summary>
		public static uint GetMDCVFixed(PngStruct* pngPtr, PngInfo* infoPtr, int* intWhiteX, int* intWhiteY, int* intRedX, int* intRedY, ref int intGreenX, int* intGreenY, ref int intBlueX, ref int intBlueY, uint* masteringDisplayMaximumLuminanceScaledBy10000, uint* masteringDisplayMinimumLuminanceScaledBy10000)
		{
			fixed (int* pintGreenX = &intGreenX)
			{
				fixed (int* pintBlueX = &intBlueX)
				{
					fixed (int* pintBlueY = &intBlueY)
					{
						uint ret = GetMDCVFixedNative(pngPtr, infoPtr, intWhiteX, intWhiteY, intRedX, intRedY, (int*)pintGreenX, intGreenY, (int*)pintBlueX, (int*)pintBlueY, masteringDisplayMaximumLuminanceScaledBy10000, masteringDisplayMinimumLuminanceScaledBy10000);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Mastering display luminance in cd/m2 (nits). <br/>
		/// </summary>
		public static uint GetMDCVFixed(PngStruct* pngPtr, PngInfo* infoPtr, ref int intWhiteX, int* intWhiteY, int* intRedX, int* intRedY, ref int intGreenX, int* intGreenY, ref int intBlueX, ref int intBlueY, uint* masteringDisplayMaximumLuminanceScaledBy10000, uint* masteringDisplayMinimumLuminanceScaledBy10000)
		{
			fixed (int* pintWhiteX = &intWhiteX)
			{
				fixed (int* pintGreenX = &intGreenX)
				{
					fixed (int* pintBlueX = &intBlueX)
					{
						fixed (int* pintBlueY = &intBlueY)
						{
							uint ret = GetMDCVFixedNative(pngPtr, infoPtr, (int*)pintWhiteX, intWhiteY, intRedX, intRedY, (int*)pintGreenX, intGreenY, (int*)pintBlueX, (int*)pintBlueY, masteringDisplayMaximumLuminanceScaledBy10000, masteringDisplayMinimumLuminanceScaledBy10000);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// Mastering display luminance in cd/m2 (nits). <br/>
		/// </summary>
		public static uint GetMDCVFixed(PngStruct* pngPtr, PngInfo* infoPtr, int* intWhiteX, ref int intWhiteY, int* intRedX, int* intRedY, ref int intGreenX, int* intGreenY, ref int intBlueX, ref int intBlueY, uint* masteringDisplayMaximumLuminanceScaledBy10000, uint* masteringDisplayMinimumLuminanceScaledBy10000)
		{
			fixed (int* pintWhiteY = &intWhiteY)
			{
				fixed (int* pintGreenX = &intGreenX)
				{
					fixed (int* pintBlueX = &intBlueX)
					{
						fixed (int* pintBlueY = &intBlueY)
						{
							uint ret = GetMDCVFixedNative(pngPtr, infoPtr, intWhiteX, (int*)pintWhiteY, intRedX, intRedY, (int*)pintGreenX, intGreenY, (int*)pintBlueX, (int*)pintBlueY, masteringDisplayMaximumLuminanceScaledBy10000, masteringDisplayMinimumLuminanceScaledBy10000);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// Mastering display luminance in cd/m2 (nits). <br/>
		/// </summary>
		public static uint GetMDCVFixed(PngStruct* pngPtr, PngInfo* infoPtr, ref int intWhiteX, ref int intWhiteY, int* intRedX, int* intRedY, ref int intGreenX, int* intGreenY, ref int intBlueX, ref int intBlueY, uint* masteringDisplayMaximumLuminanceScaledBy10000, uint* masteringDisplayMinimumLuminanceScaledBy10000)
		{
			fixed (int* pintWhiteX = &intWhiteX)
			{
				fixed (int* pintWhiteY = &intWhiteY)
				{
					fixed (int* pintGreenX = &intGreenX)
					{
						fixed (int* pintBlueX = &intBlueX)
						{
							fixed (int* pintBlueY = &intBlueY)
							{
								uint ret = GetMDCVFixedNative(pngPtr, infoPtr, (int*)pintWhiteX, (int*)pintWhiteY, intRedX, intRedY, (int*)pintGreenX, intGreenY, (int*)pintBlueX, (int*)pintBlueY, masteringDisplayMaximumLuminanceScaledBy10000, masteringDisplayMinimumLuminanceScaledBy10000);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// Mastering display luminance in cd/m2 (nits). <br/>
		/// </summary>
		public static uint GetMDCVFixed(PngStruct* pngPtr, PngInfo* infoPtr, int* intWhiteX, int* intWhiteY, ref int intRedX, int* intRedY, ref int intGreenX, int* intGreenY, ref int intBlueX, ref int intBlueY, uint* masteringDisplayMaximumLuminanceScaledBy10000, uint* masteringDisplayMinimumLuminanceScaledBy10000)
		{
			fixed (int* pintRedX = &intRedX)
			{
				fixed (int* pintGreenX = &intGreenX)
				{
					fixed (int* pintBlueX = &intBlueX)
					{
						fixed (int* pintBlueY = &intBlueY)
						{
							uint ret = GetMDCVFixedNative(pngPtr, infoPtr, intWhiteX, intWhiteY, (int*)pintRedX, intRedY, (int*)pintGreenX, intGreenY, (int*)pintBlueX, (int*)pintBlueY, masteringDisplayMaximumLuminanceScaledBy10000, masteringDisplayMinimumLuminanceScaledBy10000);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// Mastering display luminance in cd/m2 (nits). <br/>
		/// </summary>
		public static uint GetMDCVFixed(PngStruct* pngPtr, PngInfo* infoPtr, ref int intWhiteX, int* intWhiteY, ref int intRedX, int* intRedY, ref int intGreenX, int* intGreenY, ref int intBlueX, ref int intBlueY, uint* masteringDisplayMaximumLuminanceScaledBy10000, uint* masteringDisplayMinimumLuminanceScaledBy10000)
		{
			fixed (int* pintWhiteX = &intWhiteX)
			{
				fixed (int* pintRedX = &intRedX)
				{
					fixed (int* pintGreenX = &intGreenX)
					{
						fixed (int* pintBlueX = &intBlueX)
						{
							fixed (int* pintBlueY = &intBlueY)
							{
								uint ret = GetMDCVFixedNative(pngPtr, infoPtr, (int*)pintWhiteX, intWhiteY, (int*)pintRedX, intRedY, (int*)pintGreenX, intGreenY, (int*)pintBlueX, (int*)pintBlueY, masteringDisplayMaximumLuminanceScaledBy10000, masteringDisplayMinimumLuminanceScaledBy10000);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// Mastering display luminance in cd/m2 (nits). <br/>
		/// </summary>
		public static uint GetMDCVFixed(PngStruct* pngPtr, PngInfo* infoPtr, int* intWhiteX, ref int intWhiteY, ref int intRedX, int* intRedY, ref int intGreenX, int* intGreenY, ref int intBlueX, ref int intBlueY, uint* masteringDisplayMaximumLuminanceScaledBy10000, uint* masteringDisplayMinimumLuminanceScaledBy10000)
		{
			fixed (int* pintWhiteY = &intWhiteY)
			{
				fixed (int* pintRedX = &intRedX)
				{
					fixed (int* pintGreenX = &intGreenX)
					{
						fixed (int* pintBlueX = &intBlueX)
						{
							fixed (int* pintBlueY = &intBlueY)
							{
								uint ret = GetMDCVFixedNative(pngPtr, infoPtr, intWhiteX, (int*)pintWhiteY, (int*)pintRedX, intRedY, (int*)pintGreenX, intGreenY, (int*)pintBlueX, (int*)pintBlueY, masteringDisplayMaximumLuminanceScaledBy10000, masteringDisplayMinimumLuminanceScaledBy10000);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// Mastering display luminance in cd/m2 (nits). <br/>
		/// </summary>
		public static uint GetMDCVFixed(PngStruct* pngPtr, PngInfo* infoPtr, ref int intWhiteX, ref int intWhiteY, ref int intRedX, int* intRedY, ref int intGreenX, int* intGreenY, ref int intBlueX, ref int intBlueY, uint* masteringDisplayMaximumLuminanceScaledBy10000, uint* masteringDisplayMinimumLuminanceScaledBy10000)
		{
			fixed (int* pintWhiteX = &intWhiteX)
			{
				fixed (int* pintWhiteY = &intWhiteY)
				{
					fixed (int* pintRedX = &intRedX)
					{
						fixed (int* pintGreenX = &intGreenX)
						{
							fixed (int* pintBlueX = &intBlueX)
							{
								fixed (int* pintBlueY = &intBlueY)
								{
									uint ret = GetMDCVFixedNative(pngPtr, infoPtr, (int*)pintWhiteX, (int*)pintWhiteY, (int*)pintRedX, intRedY, (int*)pintGreenX, intGreenY, (int*)pintBlueX, (int*)pintBlueY, masteringDisplayMaximumLuminanceScaledBy10000, masteringDisplayMinimumLuminanceScaledBy10000);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// Mastering display luminance in cd/m2 (nits). <br/>
		/// </summary>
		public static uint GetMDCVFixed(PngStruct* pngPtr, PngInfo* infoPtr, int* intWhiteX, int* intWhiteY, int* intRedX, ref int intRedY, ref int intGreenX, int* intGreenY, ref int intBlueX, ref int intBlueY, uint* masteringDisplayMaximumLuminanceScaledBy10000, uint* masteringDisplayMinimumLuminanceScaledBy10000)
		{
			fixed (int* pintRedY = &intRedY)
			{
				fixed (int* pintGreenX = &intGreenX)
				{
					fixed (int* pintBlueX = &intBlueX)
					{
						fixed (int* pintBlueY = &intBlueY)
						{
							uint ret = GetMDCVFixedNative(pngPtr, infoPtr, intWhiteX, intWhiteY, intRedX, (int*)pintRedY, (int*)pintGreenX, intGreenY, (int*)pintBlueX, (int*)pintBlueY, masteringDisplayMaximumLuminanceScaledBy10000, masteringDisplayMinimumLuminanceScaledBy10000);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// Mastering display luminance in cd/m2 (nits). <br/>
		/// </summary>
		public static uint GetMDCVFixed(PngStruct* pngPtr, PngInfo* infoPtr, ref int intWhiteX, int* intWhiteY, int* intRedX, ref int intRedY, ref int intGreenX, int* intGreenY, ref int intBlueX, ref int intBlueY, uint* masteringDisplayMaximumLuminanceScaledBy10000, uint* masteringDisplayMinimumLuminanceScaledBy10000)
		{
			fixed (int* pintWhiteX = &intWhiteX)
			{
				fixed (int* pintRedY = &intRedY)
				{
					fixed (int* pintGreenX = &intGreenX)
					{
						fixed (int* pintBlueX = &intBlueX)
						{
							fixed (int* pintBlueY = &intBlueY)
							{
								uint ret = GetMDCVFixedNative(pngPtr, infoPtr, (int*)pintWhiteX, intWhiteY, intRedX, (int*)pintRedY, (int*)pintGreenX, intGreenY, (int*)pintBlueX, (int*)pintBlueY, masteringDisplayMaximumLuminanceScaledBy10000, masteringDisplayMinimumLuminanceScaledBy10000);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// Mastering display luminance in cd/m2 (nits). <br/>
		/// </summary>
		public static uint GetMDCVFixed(PngStruct* pngPtr, PngInfo* infoPtr, int* intWhiteX, ref int intWhiteY, int* intRedX, ref int intRedY, ref int intGreenX, int* intGreenY, ref int intBlueX, ref int intBlueY, uint* masteringDisplayMaximumLuminanceScaledBy10000, uint* masteringDisplayMinimumLuminanceScaledBy10000)
		{
			fixed (int* pintWhiteY = &intWhiteY)
			{
				fixed (int* pintRedY = &intRedY)
				{
					fixed (int* pintGreenX = &intGreenX)
					{
						fixed (int* pintBlueX = &intBlueX)
						{
							fixed (int* pintBlueY = &intBlueY)
							{
								uint ret = GetMDCVFixedNative(pngPtr, infoPtr, intWhiteX, (int*)pintWhiteY, intRedX, (int*)pintRedY, (int*)pintGreenX, intGreenY, (int*)pintBlueX, (int*)pintBlueY, masteringDisplayMaximumLuminanceScaledBy10000, masteringDisplayMinimumLuminanceScaledBy10000);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// Mastering display luminance in cd/m2 (nits). <br/>
		/// </summary>
		public static uint GetMDCVFixed(PngStruct* pngPtr, PngInfo* infoPtr, ref int intWhiteX, ref int intWhiteY, int* intRedX, ref int intRedY, ref int intGreenX, int* intGreenY, ref int intBlueX, ref int intBlueY, uint* masteringDisplayMaximumLuminanceScaledBy10000, uint* masteringDisplayMinimumLuminanceScaledBy10000)
		{
			fixed (int* pintWhiteX = &intWhiteX)
			{
				fixed (int* pintWhiteY = &intWhiteY)
				{
					fixed (int* pintRedY = &intRedY)
					{
						fixed (int* pintGreenX = &intGreenX)
						{
							fixed (int* pintBlueX = &intBlueX)
							{
								fixed (int* pintBlueY = &intBlueY)
								{
									uint ret = GetMDCVFixedNative(pngPtr, infoPtr, (int*)pintWhiteX, (int*)pintWhiteY, intRedX, (int*)pintRedY, (int*)pintGreenX, intGreenY, (int*)pintBlueX, (int*)pintBlueY, masteringDisplayMaximumLuminanceScaledBy10000, masteringDisplayMinimumLuminanceScaledBy10000);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// Mastering display luminance in cd/m2 (nits). <br/>
		/// </summary>
		public static uint GetMDCVFixed(PngStruct* pngPtr, PngInfo* infoPtr, int* intWhiteX, int* intWhiteY, ref int intRedX, ref int intRedY, ref int intGreenX, int* intGreenY, ref int intBlueX, ref int intBlueY, uint* masteringDisplayMaximumLuminanceScaledBy10000, uint* masteringDisplayMinimumLuminanceScaledBy10000)
		{
			fixed (int* pintRedX = &intRedX)
			{
				fixed (int* pintRedY = &intRedY)
				{
					fixed (int* pintGreenX = &intGreenX)
					{
						fixed (int* pintBlueX = &intBlueX)
						{
							fixed (int* pintBlueY = &intBlueY)
							{
								uint ret = GetMDCVFixedNative(pngPtr, infoPtr, intWhiteX, intWhiteY, (int*)pintRedX, (int*)pintRedY, (int*)pintGreenX, intGreenY, (int*)pintBlueX, (int*)pintBlueY, masteringDisplayMaximumLuminanceScaledBy10000, masteringDisplayMinimumLuminanceScaledBy10000);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// Mastering display luminance in cd/m2 (nits). <br/>
		/// </summary>
		public static uint GetMDCVFixed(PngStruct* pngPtr, PngInfo* infoPtr, ref int intWhiteX, int* intWhiteY, ref int intRedX, ref int intRedY, ref int intGreenX, int* intGreenY, ref int intBlueX, ref int intBlueY, uint* masteringDisplayMaximumLuminanceScaledBy10000, uint* masteringDisplayMinimumLuminanceScaledBy10000)
		{
			fixed (int* pintWhiteX = &intWhiteX)
			{
				fixed (int* pintRedX = &intRedX)
				{
					fixed (int* pintRedY = &intRedY)
					{
						fixed (int* pintGreenX = &intGreenX)
						{
							fixed (int* pintBlueX = &intBlueX)
							{
								fixed (int* pintBlueY = &intBlueY)
								{
									uint ret = GetMDCVFixedNative(pngPtr, infoPtr, (int*)pintWhiteX, intWhiteY, (int*)pintRedX, (int*)pintRedY, (int*)pintGreenX, intGreenY, (int*)pintBlueX, (int*)pintBlueY, masteringDisplayMaximumLuminanceScaledBy10000, masteringDisplayMinimumLuminanceScaledBy10000);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// Mastering display luminance in cd/m2 (nits). <br/>
		/// </summary>
		public static uint GetMDCVFixed(PngStruct* pngPtr, PngInfo* infoPtr, int* intWhiteX, ref int intWhiteY, ref int intRedX, ref int intRedY, ref int intGreenX, int* intGreenY, ref int intBlueX, ref int intBlueY, uint* masteringDisplayMaximumLuminanceScaledBy10000, uint* masteringDisplayMinimumLuminanceScaledBy10000)
		{
			fixed (int* pintWhiteY = &intWhiteY)
			{
				fixed (int* pintRedX = &intRedX)
				{
					fixed (int* pintRedY = &intRedY)
					{
						fixed (int* pintGreenX = &intGreenX)
						{
							fixed (int* pintBlueX = &intBlueX)
							{
								fixed (int* pintBlueY = &intBlueY)
								{
									uint ret = GetMDCVFixedNative(pngPtr, infoPtr, intWhiteX, (int*)pintWhiteY, (int*)pintRedX, (int*)pintRedY, (int*)pintGreenX, intGreenY, (int*)pintBlueX, (int*)pintBlueY, masteringDisplayMaximumLuminanceScaledBy10000, masteringDisplayMinimumLuminanceScaledBy10000);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// Mastering display luminance in cd/m2 (nits). <br/>
		/// </summary>
		public static uint GetMDCVFixed(PngStruct* pngPtr, PngInfo* infoPtr, ref int intWhiteX, ref int intWhiteY, ref int intRedX, ref int intRedY, ref int intGreenX, int* intGreenY, ref int intBlueX, ref int intBlueY, uint* masteringDisplayMaximumLuminanceScaledBy10000, uint* masteringDisplayMinimumLuminanceScaledBy10000)
		{
			fixed (int* pintWhiteX = &intWhiteX)
			{
				fixed (int* pintWhiteY = &intWhiteY)
				{
					fixed (int* pintRedX = &intRedX)
					{
						fixed (int* pintRedY = &intRedY)
						{
							fixed (int* pintGreenX = &intGreenX)
							{
								fixed (int* pintBlueX = &intBlueX)
								{
									fixed (int* pintBlueY = &intBlueY)
									{
										uint ret = GetMDCVFixedNative(pngPtr, infoPtr, (int*)pintWhiteX, (int*)pintWhiteY, (int*)pintRedX, (int*)pintRedY, (int*)pintGreenX, intGreenY, (int*)pintBlueX, (int*)pintBlueY, masteringDisplayMaximumLuminanceScaledBy10000, masteringDisplayMinimumLuminanceScaledBy10000);
										return ret;
									}
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// Mastering display luminance in cd/m2 (nits). <br/>
		/// </summary>
		public static uint GetMDCVFixed(PngStruct* pngPtr, PngInfo* infoPtr, int* intWhiteX, int* intWhiteY, int* intRedX, int* intRedY, int* intGreenX, ref int intGreenY, ref int intBlueX, ref int intBlueY, uint* masteringDisplayMaximumLuminanceScaledBy10000, uint* masteringDisplayMinimumLuminanceScaledBy10000)
		{
			fixed (int* pintGreenY = &intGreenY)
			{
				fixed (int* pintBlueX = &intBlueX)
				{
					fixed (int* pintBlueY = &intBlueY)
					{
						uint ret = GetMDCVFixedNative(pngPtr, infoPtr, intWhiteX, intWhiteY, intRedX, intRedY, intGreenX, (int*)pintGreenY, (int*)pintBlueX, (int*)pintBlueY, masteringDisplayMaximumLuminanceScaledBy10000, masteringDisplayMinimumLuminanceScaledBy10000);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Mastering display luminance in cd/m2 (nits). <br/>
		/// </summary>
		public static uint GetMDCVFixed(PngStruct* pngPtr, PngInfo* infoPtr, ref int intWhiteX, int* intWhiteY, int* intRedX, int* intRedY, int* intGreenX, ref int intGreenY, ref int intBlueX, ref int intBlueY, uint* masteringDisplayMaximumLuminanceScaledBy10000, uint* masteringDisplayMinimumLuminanceScaledBy10000)
		{
			fixed (int* pintWhiteX = &intWhiteX)
			{
				fixed (int* pintGreenY = &intGreenY)
				{
					fixed (int* pintBlueX = &intBlueX)
					{
						fixed (int* pintBlueY = &intBlueY)
						{
							uint ret = GetMDCVFixedNative(pngPtr, infoPtr, (int*)pintWhiteX, intWhiteY, intRedX, intRedY, intGreenX, (int*)pintGreenY, (int*)pintBlueX, (int*)pintBlueY, masteringDisplayMaximumLuminanceScaledBy10000, masteringDisplayMinimumLuminanceScaledBy10000);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// Mastering display luminance in cd/m2 (nits). <br/>
		/// </summary>
		public static uint GetMDCVFixed(PngStruct* pngPtr, PngInfo* infoPtr, int* intWhiteX, ref int intWhiteY, int* intRedX, int* intRedY, int* intGreenX, ref int intGreenY, ref int intBlueX, ref int intBlueY, uint* masteringDisplayMaximumLuminanceScaledBy10000, uint* masteringDisplayMinimumLuminanceScaledBy10000)
		{
			fixed (int* pintWhiteY = &intWhiteY)
			{
				fixed (int* pintGreenY = &intGreenY)
				{
					fixed (int* pintBlueX = &intBlueX)
					{
						fixed (int* pintBlueY = &intBlueY)
						{
							uint ret = GetMDCVFixedNative(pngPtr, infoPtr, intWhiteX, (int*)pintWhiteY, intRedX, intRedY, intGreenX, (int*)pintGreenY, (int*)pintBlueX, (int*)pintBlueY, masteringDisplayMaximumLuminanceScaledBy10000, masteringDisplayMinimumLuminanceScaledBy10000);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// Mastering display luminance in cd/m2 (nits). <br/>
		/// </summary>
		public static uint GetMDCVFixed(PngStruct* pngPtr, PngInfo* infoPtr, ref int intWhiteX, ref int intWhiteY, int* intRedX, int* intRedY, int* intGreenX, ref int intGreenY, ref int intBlueX, ref int intBlueY, uint* masteringDisplayMaximumLuminanceScaledBy10000, uint* masteringDisplayMinimumLuminanceScaledBy10000)
		{
			fixed (int* pintWhiteX = &intWhiteX)
			{
				fixed (int* pintWhiteY = &intWhiteY)
				{
					fixed (int* pintGreenY = &intGreenY)
					{
						fixed (int* pintBlueX = &intBlueX)
						{
							fixed (int* pintBlueY = &intBlueY)
							{
								uint ret = GetMDCVFixedNative(pngPtr, infoPtr, (int*)pintWhiteX, (int*)pintWhiteY, intRedX, intRedY, intGreenX, (int*)pintGreenY, (int*)pintBlueX, (int*)pintBlueY, masteringDisplayMaximumLuminanceScaledBy10000, masteringDisplayMinimumLuminanceScaledBy10000);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// Mastering display luminance in cd/m2 (nits). <br/>
		/// </summary>
		public static uint GetMDCVFixed(PngStruct* pngPtr, PngInfo* infoPtr, int* intWhiteX, int* intWhiteY, ref int intRedX, int* intRedY, int* intGreenX, ref int intGreenY, ref int intBlueX, ref int intBlueY, uint* masteringDisplayMaximumLuminanceScaledBy10000, uint* masteringDisplayMinimumLuminanceScaledBy10000)
		{
			fixed (int* pintRedX = &intRedX)
			{
				fixed (int* pintGreenY = &intGreenY)
				{
					fixed (int* pintBlueX = &intBlueX)
					{
						fixed (int* pintBlueY = &intBlueY)
						{
							uint ret = GetMDCVFixedNative(pngPtr, infoPtr, intWhiteX, intWhiteY, (int*)pintRedX, intRedY, intGreenX, (int*)pintGreenY, (int*)pintBlueX, (int*)pintBlueY, masteringDisplayMaximumLuminanceScaledBy10000, masteringDisplayMinimumLuminanceScaledBy10000);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// Mastering display luminance in cd/m2 (nits). <br/>
		/// </summary>
		public static uint GetMDCVFixed(PngStruct* pngPtr, PngInfo* infoPtr, ref int intWhiteX, int* intWhiteY, ref int intRedX, int* intRedY, int* intGreenX, ref int intGreenY, ref int intBlueX, ref int intBlueY, uint* masteringDisplayMaximumLuminanceScaledBy10000, uint* masteringDisplayMinimumLuminanceScaledBy10000)
		{
			fixed (int* pintWhiteX = &intWhiteX)
			{
				fixed (int* pintRedX = &intRedX)
				{
					fixed (int* pintGreenY = &intGreenY)
					{
						fixed (int* pintBlueX = &intBlueX)
						{
							fixed (int* pintBlueY = &intBlueY)
							{
								uint ret = GetMDCVFixedNative(pngPtr, infoPtr, (int*)pintWhiteX, intWhiteY, (int*)pintRedX, intRedY, intGreenX, (int*)pintGreenY, (int*)pintBlueX, (int*)pintBlueY, masteringDisplayMaximumLuminanceScaledBy10000, masteringDisplayMinimumLuminanceScaledBy10000);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// Mastering display luminance in cd/m2 (nits). <br/>
		/// </summary>
		public static uint GetMDCVFixed(PngStruct* pngPtr, PngInfo* infoPtr, int* intWhiteX, ref int intWhiteY, ref int intRedX, int* intRedY, int* intGreenX, ref int intGreenY, ref int intBlueX, ref int intBlueY, uint* masteringDisplayMaximumLuminanceScaledBy10000, uint* masteringDisplayMinimumLuminanceScaledBy10000)
		{
			fixed (int* pintWhiteY = &intWhiteY)
			{
				fixed (int* pintRedX = &intRedX)
				{
					fixed (int* pintGreenY = &intGreenY)
					{
						fixed (int* pintBlueX = &intBlueX)
						{
							fixed (int* pintBlueY = &intBlueY)
							{
								uint ret = GetMDCVFixedNative(pngPtr, infoPtr, intWhiteX, (int*)pintWhiteY, (int*)pintRedX, intRedY, intGreenX, (int*)pintGreenY, (int*)pintBlueX, (int*)pintBlueY, masteringDisplayMaximumLuminanceScaledBy10000, masteringDisplayMinimumLuminanceScaledBy10000);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// Mastering display luminance in cd/m2 (nits). <br/>
		/// </summary>
		public static uint GetMDCVFixed(PngStruct* pngPtr, PngInfo* infoPtr, ref int intWhiteX, ref int intWhiteY, ref int intRedX, int* intRedY, int* intGreenX, ref int intGreenY, ref int intBlueX, ref int intBlueY, uint* masteringDisplayMaximumLuminanceScaledBy10000, uint* masteringDisplayMinimumLuminanceScaledBy10000)
		{
			fixed (int* pintWhiteX = &intWhiteX)
			{
				fixed (int* pintWhiteY = &intWhiteY)
				{
					fixed (int* pintRedX = &intRedX)
					{
						fixed (int* pintGreenY = &intGreenY)
						{
							fixed (int* pintBlueX = &intBlueX)
							{
								fixed (int* pintBlueY = &intBlueY)
								{
									uint ret = GetMDCVFixedNative(pngPtr, infoPtr, (int*)pintWhiteX, (int*)pintWhiteY, (int*)pintRedX, intRedY, intGreenX, (int*)pintGreenY, (int*)pintBlueX, (int*)pintBlueY, masteringDisplayMaximumLuminanceScaledBy10000, masteringDisplayMinimumLuminanceScaledBy10000);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// Mastering display luminance in cd/m2 (nits). <br/>
		/// </summary>
		public static uint GetMDCVFixed(PngStruct* pngPtr, PngInfo* infoPtr, int* intWhiteX, int* intWhiteY, int* intRedX, ref int intRedY, int* intGreenX, ref int intGreenY, ref int intBlueX, ref int intBlueY, uint* masteringDisplayMaximumLuminanceScaledBy10000, uint* masteringDisplayMinimumLuminanceScaledBy10000)
		{
			fixed (int* pintRedY = &intRedY)
			{
				fixed (int* pintGreenY = &intGreenY)
				{
					fixed (int* pintBlueX = &intBlueX)
					{
						fixed (int* pintBlueY = &intBlueY)
						{
							uint ret = GetMDCVFixedNative(pngPtr, infoPtr, intWhiteX, intWhiteY, intRedX, (int*)pintRedY, intGreenX, (int*)pintGreenY, (int*)pintBlueX, (int*)pintBlueY, masteringDisplayMaximumLuminanceScaledBy10000, masteringDisplayMinimumLuminanceScaledBy10000);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// Mastering display luminance in cd/m2 (nits). <br/>
		/// </summary>
		public static uint GetMDCVFixed(PngStruct* pngPtr, PngInfo* infoPtr, ref int intWhiteX, int* intWhiteY, int* intRedX, ref int intRedY, int* intGreenX, ref int intGreenY, ref int intBlueX, ref int intBlueY, uint* masteringDisplayMaximumLuminanceScaledBy10000, uint* masteringDisplayMinimumLuminanceScaledBy10000)
		{
			fixed (int* pintWhiteX = &intWhiteX)
			{
				fixed (int* pintRedY = &intRedY)
				{
					fixed (int* pintGreenY = &intGreenY)
					{
						fixed (int* pintBlueX = &intBlueX)
						{
							fixed (int* pintBlueY = &intBlueY)
							{
								uint ret = GetMDCVFixedNative(pngPtr, infoPtr, (int*)pintWhiteX, intWhiteY, intRedX, (int*)pintRedY, intGreenX, (int*)pintGreenY, (int*)pintBlueX, (int*)pintBlueY, masteringDisplayMaximumLuminanceScaledBy10000, masteringDisplayMinimumLuminanceScaledBy10000);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// Mastering display luminance in cd/m2 (nits). <br/>
		/// </summary>
		public static uint GetMDCVFixed(PngStruct* pngPtr, PngInfo* infoPtr, int* intWhiteX, ref int intWhiteY, int* intRedX, ref int intRedY, int* intGreenX, ref int intGreenY, ref int intBlueX, ref int intBlueY, uint* masteringDisplayMaximumLuminanceScaledBy10000, uint* masteringDisplayMinimumLuminanceScaledBy10000)
		{
			fixed (int* pintWhiteY = &intWhiteY)
			{
				fixed (int* pintRedY = &intRedY)
				{
					fixed (int* pintGreenY = &intGreenY)
					{
						fixed (int* pintBlueX = &intBlueX)
						{
							fixed (int* pintBlueY = &intBlueY)
							{
								uint ret = GetMDCVFixedNative(pngPtr, infoPtr, intWhiteX, (int*)pintWhiteY, intRedX, (int*)pintRedY, intGreenX, (int*)pintGreenY, (int*)pintBlueX, (int*)pintBlueY, masteringDisplayMaximumLuminanceScaledBy10000, masteringDisplayMinimumLuminanceScaledBy10000);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// Mastering display luminance in cd/m2 (nits). <br/>
		/// </summary>
		public static uint GetMDCVFixed(PngStruct* pngPtr, PngInfo* infoPtr, ref int intWhiteX, ref int intWhiteY, int* intRedX, ref int intRedY, int* intGreenX, ref int intGreenY, ref int intBlueX, ref int intBlueY, uint* masteringDisplayMaximumLuminanceScaledBy10000, uint* masteringDisplayMinimumLuminanceScaledBy10000)
		{
			fixed (int* pintWhiteX = &intWhiteX)
			{
				fixed (int* pintWhiteY = &intWhiteY)
				{
					fixed (int* pintRedY = &intRedY)
					{
						fixed (int* pintGreenY = &intGreenY)
						{
							fixed (int* pintBlueX = &intBlueX)
							{
								fixed (int* pintBlueY = &intBlueY)
								{
									uint ret = GetMDCVFixedNative(pngPtr, infoPtr, (int*)pintWhiteX, (int*)pintWhiteY, intRedX, (int*)pintRedY, intGreenX, (int*)pintGreenY, (int*)pintBlueX, (int*)pintBlueY, masteringDisplayMaximumLuminanceScaledBy10000, masteringDisplayMinimumLuminanceScaledBy10000);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// Mastering display luminance in cd/m2 (nits). <br/>
		/// </summary>
		public static uint GetMDCVFixed(PngStruct* pngPtr, PngInfo* infoPtr, int* intWhiteX, int* intWhiteY, ref int intRedX, ref int intRedY, int* intGreenX, ref int intGreenY, ref int intBlueX, ref int intBlueY, uint* masteringDisplayMaximumLuminanceScaledBy10000, uint* masteringDisplayMinimumLuminanceScaledBy10000)
		{
			fixed (int* pintRedX = &intRedX)
			{
				fixed (int* pintRedY = &intRedY)
				{
					fixed (int* pintGreenY = &intGreenY)
					{
						fixed (int* pintBlueX = &intBlueX)
						{
							fixed (int* pintBlueY = &intBlueY)
							{
								uint ret = GetMDCVFixedNative(pngPtr, infoPtr, intWhiteX, intWhiteY, (int*)pintRedX, (int*)pintRedY, intGreenX, (int*)pintGreenY, (int*)pintBlueX, (int*)pintBlueY, masteringDisplayMaximumLuminanceScaledBy10000, masteringDisplayMinimumLuminanceScaledBy10000);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// Mastering display luminance in cd/m2 (nits). <br/>
		/// </summary>
		public static uint GetMDCVFixed(PngStruct* pngPtr, PngInfo* infoPtr, ref int intWhiteX, int* intWhiteY, ref int intRedX, ref int intRedY, int* intGreenX, ref int intGreenY, ref int intBlueX, ref int intBlueY, uint* masteringDisplayMaximumLuminanceScaledBy10000, uint* masteringDisplayMinimumLuminanceScaledBy10000)
		{
			fixed (int* pintWhiteX = &intWhiteX)
			{
				fixed (int* pintRedX = &intRedX)
				{
					fixed (int* pintRedY = &intRedY)
					{
						fixed (int* pintGreenY = &intGreenY)
						{
							fixed (int* pintBlueX = &intBlueX)
							{
								fixed (int* pintBlueY = &intBlueY)
								{
									uint ret = GetMDCVFixedNative(pngPtr, infoPtr, (int*)pintWhiteX, intWhiteY, (int*)pintRedX, (int*)pintRedY, intGreenX, (int*)pintGreenY, (int*)pintBlueX, (int*)pintBlueY, masteringDisplayMaximumLuminanceScaledBy10000, masteringDisplayMinimumLuminanceScaledBy10000);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// Mastering display luminance in cd/m2 (nits). <br/>
		/// </summary>
		public static uint GetMDCVFixed(PngStruct* pngPtr, PngInfo* infoPtr, int* intWhiteX, ref int intWhiteY, ref int intRedX, ref int intRedY, int* intGreenX, ref int intGreenY, ref int intBlueX, ref int intBlueY, uint* masteringDisplayMaximumLuminanceScaledBy10000, uint* masteringDisplayMinimumLuminanceScaledBy10000)
		{
			fixed (int* pintWhiteY = &intWhiteY)
			{
				fixed (int* pintRedX = &intRedX)
				{
					fixed (int* pintRedY = &intRedY)
					{
						fixed (int* pintGreenY = &intGreenY)
						{
							fixed (int* pintBlueX = &intBlueX)
							{
								fixed (int* pintBlueY = &intBlueY)
								{
									uint ret = GetMDCVFixedNative(pngPtr, infoPtr, intWhiteX, (int*)pintWhiteY, (int*)pintRedX, (int*)pintRedY, intGreenX, (int*)pintGreenY, (int*)pintBlueX, (int*)pintBlueY, masteringDisplayMaximumLuminanceScaledBy10000, masteringDisplayMinimumLuminanceScaledBy10000);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// Mastering display luminance in cd/m2 (nits). <br/>
		/// </summary>
		public static uint GetMDCVFixed(PngStruct* pngPtr, PngInfo* infoPtr, ref int intWhiteX, ref int intWhiteY, ref int intRedX, ref int intRedY, int* intGreenX, ref int intGreenY, ref int intBlueX, ref int intBlueY, uint* masteringDisplayMaximumLuminanceScaledBy10000, uint* masteringDisplayMinimumLuminanceScaledBy10000)
		{
			fixed (int* pintWhiteX = &intWhiteX)
			{
				fixed (int* pintWhiteY = &intWhiteY)
				{
					fixed (int* pintRedX = &intRedX)
					{
						fixed (int* pintRedY = &intRedY)
						{
							fixed (int* pintGreenY = &intGreenY)
							{
								fixed (int* pintBlueX = &intBlueX)
								{
									fixed (int* pintBlueY = &intBlueY)
									{
										uint ret = GetMDCVFixedNative(pngPtr, infoPtr, (int*)pintWhiteX, (int*)pintWhiteY, (int*)pintRedX, (int*)pintRedY, intGreenX, (int*)pintGreenY, (int*)pintBlueX, (int*)pintBlueY, masteringDisplayMaximumLuminanceScaledBy10000, masteringDisplayMinimumLuminanceScaledBy10000);
										return ret;
									}
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// Mastering display luminance in cd/m2 (nits). <br/>
		/// </summary>
		public static uint GetMDCVFixed(PngStruct* pngPtr, PngInfo* infoPtr, int* intWhiteX, int* intWhiteY, int* intRedX, int* intRedY, ref int intGreenX, ref int intGreenY, ref int intBlueX, ref int intBlueY, uint* masteringDisplayMaximumLuminanceScaledBy10000, uint* masteringDisplayMinimumLuminanceScaledBy10000)
		{
			fixed (int* pintGreenX = &intGreenX)
			{
				fixed (int* pintGreenY = &intGreenY)
				{
					fixed (int* pintBlueX = &intBlueX)
					{
						fixed (int* pintBlueY = &intBlueY)
						{
							uint ret = GetMDCVFixedNative(pngPtr, infoPtr, intWhiteX, intWhiteY, intRedX, intRedY, (int*)pintGreenX, (int*)pintGreenY, (int*)pintBlueX, (int*)pintBlueY, masteringDisplayMaximumLuminanceScaledBy10000, masteringDisplayMinimumLuminanceScaledBy10000);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// Mastering display luminance in cd/m2 (nits). <br/>
		/// </summary>
		public static uint GetMDCVFixed(PngStruct* pngPtr, PngInfo* infoPtr, ref int intWhiteX, int* intWhiteY, int* intRedX, int* intRedY, ref int intGreenX, ref int intGreenY, ref int intBlueX, ref int intBlueY, uint* masteringDisplayMaximumLuminanceScaledBy10000, uint* masteringDisplayMinimumLuminanceScaledBy10000)
		{
			fixed (int* pintWhiteX = &intWhiteX)
			{
				fixed (int* pintGreenX = &intGreenX)
				{
					fixed (int* pintGreenY = &intGreenY)
					{
						fixed (int* pintBlueX = &intBlueX)
						{
							fixed (int* pintBlueY = &intBlueY)
							{
								uint ret = GetMDCVFixedNative(pngPtr, infoPtr, (int*)pintWhiteX, intWhiteY, intRedX, intRedY, (int*)pintGreenX, (int*)pintGreenY, (int*)pintBlueX, (int*)pintBlueY, masteringDisplayMaximumLuminanceScaledBy10000, masteringDisplayMinimumLuminanceScaledBy10000);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// Mastering display luminance in cd/m2 (nits). <br/>
		/// </summary>
		public static uint GetMDCVFixed(PngStruct* pngPtr, PngInfo* infoPtr, int* intWhiteX, ref int intWhiteY, int* intRedX, int* intRedY, ref int intGreenX, ref int intGreenY, ref int intBlueX, ref int intBlueY, uint* masteringDisplayMaximumLuminanceScaledBy10000, uint* masteringDisplayMinimumLuminanceScaledBy10000)
		{
			fixed (int* pintWhiteY = &intWhiteY)
			{
				fixed (int* pintGreenX = &intGreenX)
				{
					fixed (int* pintGreenY = &intGreenY)
					{
						fixed (int* pintBlueX = &intBlueX)
						{
							fixed (int* pintBlueY = &intBlueY)
							{
								uint ret = GetMDCVFixedNative(pngPtr, infoPtr, intWhiteX, (int*)pintWhiteY, intRedX, intRedY, (int*)pintGreenX, (int*)pintGreenY, (int*)pintBlueX, (int*)pintBlueY, masteringDisplayMaximumLuminanceScaledBy10000, masteringDisplayMinimumLuminanceScaledBy10000);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// Mastering display luminance in cd/m2 (nits). <br/>
		/// </summary>
		public static uint GetMDCVFixed(PngStruct* pngPtr, PngInfo* infoPtr, ref int intWhiteX, ref int intWhiteY, int* intRedX, int* intRedY, ref int intGreenX, ref int intGreenY, ref int intBlueX, ref int intBlueY, uint* masteringDisplayMaximumLuminanceScaledBy10000, uint* masteringDisplayMinimumLuminanceScaledBy10000)
		{
			fixed (int* pintWhiteX = &intWhiteX)
			{
				fixed (int* pintWhiteY = &intWhiteY)
				{
					fixed (int* pintGreenX = &intGreenX)
					{
						fixed (int* pintGreenY = &intGreenY)
						{
							fixed (int* pintBlueX = &intBlueX)
							{
								fixed (int* pintBlueY = &intBlueY)
								{
									uint ret = GetMDCVFixedNative(pngPtr, infoPtr, (int*)pintWhiteX, (int*)pintWhiteY, intRedX, intRedY, (int*)pintGreenX, (int*)pintGreenY, (int*)pintBlueX, (int*)pintBlueY, masteringDisplayMaximumLuminanceScaledBy10000, masteringDisplayMinimumLuminanceScaledBy10000);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// Mastering display luminance in cd/m2 (nits). <br/>
		/// </summary>
		public static uint GetMDCVFixed(PngStruct* pngPtr, PngInfo* infoPtr, int* intWhiteX, int* intWhiteY, ref int intRedX, int* intRedY, ref int intGreenX, ref int intGreenY, ref int intBlueX, ref int intBlueY, uint* masteringDisplayMaximumLuminanceScaledBy10000, uint* masteringDisplayMinimumLuminanceScaledBy10000)
		{
			fixed (int* pintRedX = &intRedX)
			{
				fixed (int* pintGreenX = &intGreenX)
				{
					fixed (int* pintGreenY = &intGreenY)
					{
						fixed (int* pintBlueX = &intBlueX)
						{
							fixed (int* pintBlueY = &intBlueY)
							{
								uint ret = GetMDCVFixedNative(pngPtr, infoPtr, intWhiteX, intWhiteY, (int*)pintRedX, intRedY, (int*)pintGreenX, (int*)pintGreenY, (int*)pintBlueX, (int*)pintBlueY, masteringDisplayMaximumLuminanceScaledBy10000, masteringDisplayMinimumLuminanceScaledBy10000);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// Mastering display luminance in cd/m2 (nits). <br/>
		/// </summary>
		public static uint GetMDCVFixed(PngStruct* pngPtr, PngInfo* infoPtr, ref int intWhiteX, int* intWhiteY, ref int intRedX, int* intRedY, ref int intGreenX, ref int intGreenY, ref int intBlueX, ref int intBlueY, uint* masteringDisplayMaximumLuminanceScaledBy10000, uint* masteringDisplayMinimumLuminanceScaledBy10000)
		{
			fixed (int* pintWhiteX = &intWhiteX)
			{
				fixed (int* pintRedX = &intRedX)
				{
					fixed (int* pintGreenX = &intGreenX)
					{
						fixed (int* pintGreenY = &intGreenY)
						{
							fixed (int* pintBlueX = &intBlueX)
							{
								fixed (int* pintBlueY = &intBlueY)
								{
									uint ret = GetMDCVFixedNative(pngPtr, infoPtr, (int*)pintWhiteX, intWhiteY, (int*)pintRedX, intRedY, (int*)pintGreenX, (int*)pintGreenY, (int*)pintBlueX, (int*)pintBlueY, masteringDisplayMaximumLuminanceScaledBy10000, masteringDisplayMinimumLuminanceScaledBy10000);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// Mastering display luminance in cd/m2 (nits). <br/>
		/// </summary>
		public static uint GetMDCVFixed(PngStruct* pngPtr, PngInfo* infoPtr, int* intWhiteX, ref int intWhiteY, ref int intRedX, int* intRedY, ref int intGreenX, ref int intGreenY, ref int intBlueX, ref int intBlueY, uint* masteringDisplayMaximumLuminanceScaledBy10000, uint* masteringDisplayMinimumLuminanceScaledBy10000)
		{
			fixed (int* pintWhiteY = &intWhiteY)
			{
				fixed (int* pintRedX = &intRedX)
				{
					fixed (int* pintGreenX = &intGreenX)
					{
						fixed (int* pintGreenY = &intGreenY)
						{
							fixed (int* pintBlueX = &intBlueX)
							{
								fixed (int* pintBlueY = &intBlueY)
								{
									uint ret = GetMDCVFixedNative(pngPtr, infoPtr, intWhiteX, (int*)pintWhiteY, (int*)pintRedX, intRedY, (int*)pintGreenX, (int*)pintGreenY, (int*)pintBlueX, (int*)pintBlueY, masteringDisplayMaximumLuminanceScaledBy10000, masteringDisplayMinimumLuminanceScaledBy10000);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// Mastering display luminance in cd/m2 (nits). <br/>
		/// </summary>
		public static uint GetMDCVFixed(PngStruct* pngPtr, PngInfo* infoPtr, ref int intWhiteX, ref int intWhiteY, ref int intRedX, int* intRedY, ref int intGreenX, ref int intGreenY, ref int intBlueX, ref int intBlueY, uint* masteringDisplayMaximumLuminanceScaledBy10000, uint* masteringDisplayMinimumLuminanceScaledBy10000)
		{
			fixed (int* pintWhiteX = &intWhiteX)
			{
				fixed (int* pintWhiteY = &intWhiteY)
				{
					fixed (int* pintRedX = &intRedX)
					{
						fixed (int* pintGreenX = &intGreenX)
						{
							fixed (int* pintGreenY = &intGreenY)
							{
								fixed (int* pintBlueX = &intBlueX)
								{
									fixed (int* pintBlueY = &intBlueY)
									{
										uint ret = GetMDCVFixedNative(pngPtr, infoPtr, (int*)pintWhiteX, (int*)pintWhiteY, (int*)pintRedX, intRedY, (int*)pintGreenX, (int*)pintGreenY, (int*)pintBlueX, (int*)pintBlueY, masteringDisplayMaximumLuminanceScaledBy10000, masteringDisplayMinimumLuminanceScaledBy10000);
										return ret;
									}
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// Mastering display luminance in cd/m2 (nits). <br/>
		/// </summary>
		public static uint GetMDCVFixed(PngStruct* pngPtr, PngInfo* infoPtr, int* intWhiteX, int* intWhiteY, int* intRedX, ref int intRedY, ref int intGreenX, ref int intGreenY, ref int intBlueX, ref int intBlueY, uint* masteringDisplayMaximumLuminanceScaledBy10000, uint* masteringDisplayMinimumLuminanceScaledBy10000)
		{
			fixed (int* pintRedY = &intRedY)
			{
				fixed (int* pintGreenX = &intGreenX)
				{
					fixed (int* pintGreenY = &intGreenY)
					{
						fixed (int* pintBlueX = &intBlueX)
						{
							fixed (int* pintBlueY = &intBlueY)
							{
								uint ret = GetMDCVFixedNative(pngPtr, infoPtr, intWhiteX, intWhiteY, intRedX, (int*)pintRedY, (int*)pintGreenX, (int*)pintGreenY, (int*)pintBlueX, (int*)pintBlueY, masteringDisplayMaximumLuminanceScaledBy10000, masteringDisplayMinimumLuminanceScaledBy10000);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// Mastering display luminance in cd/m2 (nits). <br/>
		/// </summary>
		public static uint GetMDCVFixed(PngStruct* pngPtr, PngInfo* infoPtr, ref int intWhiteX, int* intWhiteY, int* intRedX, ref int intRedY, ref int intGreenX, ref int intGreenY, ref int intBlueX, ref int intBlueY, uint* masteringDisplayMaximumLuminanceScaledBy10000, uint* masteringDisplayMinimumLuminanceScaledBy10000)
		{
			fixed (int* pintWhiteX = &intWhiteX)
			{
				fixed (int* pintRedY = &intRedY)
				{
					fixed (int* pintGreenX = &intGreenX)
					{
						fixed (int* pintGreenY = &intGreenY)
						{
							fixed (int* pintBlueX = &intBlueX)
							{
								fixed (int* pintBlueY = &intBlueY)
								{
									uint ret = GetMDCVFixedNative(pngPtr, infoPtr, (int*)pintWhiteX, intWhiteY, intRedX, (int*)pintRedY, (int*)pintGreenX, (int*)pintGreenY, (int*)pintBlueX, (int*)pintBlueY, masteringDisplayMaximumLuminanceScaledBy10000, masteringDisplayMinimumLuminanceScaledBy10000);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// Mastering display luminance in cd/m2 (nits). <br/>
		/// </summary>
		public static uint GetMDCVFixed(PngStruct* pngPtr, PngInfo* infoPtr, int* intWhiteX, ref int intWhiteY, int* intRedX, ref int intRedY, ref int intGreenX, ref int intGreenY, ref int intBlueX, ref int intBlueY, uint* masteringDisplayMaximumLuminanceScaledBy10000, uint* masteringDisplayMinimumLuminanceScaledBy10000)
		{
			fixed (int* pintWhiteY = &intWhiteY)
			{
				fixed (int* pintRedY = &intRedY)
				{
					fixed (int* pintGreenX = &intGreenX)
					{
						fixed (int* pintGreenY = &intGreenY)
						{
							fixed (int* pintBlueX = &intBlueX)
							{
								fixed (int* pintBlueY = &intBlueY)
								{
									uint ret = GetMDCVFixedNative(pngPtr, infoPtr, intWhiteX, (int*)pintWhiteY, intRedX, (int*)pintRedY, (int*)pintGreenX, (int*)pintGreenY, (int*)pintBlueX, (int*)pintBlueY, masteringDisplayMaximumLuminanceScaledBy10000, masteringDisplayMinimumLuminanceScaledBy10000);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// Mastering display luminance in cd/m2 (nits). <br/>
		/// </summary>
		public static uint GetMDCVFixed(PngStruct* pngPtr, PngInfo* infoPtr, ref int intWhiteX, ref int intWhiteY, int* intRedX, ref int intRedY, ref int intGreenX, ref int intGreenY, ref int intBlueX, ref int intBlueY, uint* masteringDisplayMaximumLuminanceScaledBy10000, uint* masteringDisplayMinimumLuminanceScaledBy10000)
		{
			fixed (int* pintWhiteX = &intWhiteX)
			{
				fixed (int* pintWhiteY = &intWhiteY)
				{
					fixed (int* pintRedY = &intRedY)
					{
						fixed (int* pintGreenX = &intGreenX)
						{
							fixed (int* pintGreenY = &intGreenY)
							{
								fixed (int* pintBlueX = &intBlueX)
								{
									fixed (int* pintBlueY = &intBlueY)
									{
										uint ret = GetMDCVFixedNative(pngPtr, infoPtr, (int*)pintWhiteX, (int*)pintWhiteY, intRedX, (int*)pintRedY, (int*)pintGreenX, (int*)pintGreenY, (int*)pintBlueX, (int*)pintBlueY, masteringDisplayMaximumLuminanceScaledBy10000, masteringDisplayMinimumLuminanceScaledBy10000);
										return ret;
									}
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// Mastering display luminance in cd/m2 (nits). <br/>
		/// </summary>
		public static uint GetMDCVFixed(PngStruct* pngPtr, PngInfo* infoPtr, int* intWhiteX, int* intWhiteY, ref int intRedX, ref int intRedY, ref int intGreenX, ref int intGreenY, ref int intBlueX, ref int intBlueY, uint* masteringDisplayMaximumLuminanceScaledBy10000, uint* masteringDisplayMinimumLuminanceScaledBy10000)
		{
			fixed (int* pintRedX = &intRedX)
			{
				fixed (int* pintRedY = &intRedY)
				{
					fixed (int* pintGreenX = &intGreenX)
					{
						fixed (int* pintGreenY = &intGreenY)
						{
							fixed (int* pintBlueX = &intBlueX)
							{
								fixed (int* pintBlueY = &intBlueY)
								{
									uint ret = GetMDCVFixedNative(pngPtr, infoPtr, intWhiteX, intWhiteY, (int*)pintRedX, (int*)pintRedY, (int*)pintGreenX, (int*)pintGreenY, (int*)pintBlueX, (int*)pintBlueY, masteringDisplayMaximumLuminanceScaledBy10000, masteringDisplayMinimumLuminanceScaledBy10000);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// Mastering display luminance in cd/m2 (nits). <br/>
		/// </summary>
		public static uint GetMDCVFixed(PngStruct* pngPtr, PngInfo* infoPtr, ref int intWhiteX, int* intWhiteY, ref int intRedX, ref int intRedY, ref int intGreenX, ref int intGreenY, ref int intBlueX, ref int intBlueY, uint* masteringDisplayMaximumLuminanceScaledBy10000, uint* masteringDisplayMinimumLuminanceScaledBy10000)
		{
			fixed (int* pintWhiteX = &intWhiteX)
			{
				fixed (int* pintRedX = &intRedX)
				{
					fixed (int* pintRedY = &intRedY)
					{
						fixed (int* pintGreenX = &intGreenX)
						{
							fixed (int* pintGreenY = &intGreenY)
							{
								fixed (int* pintBlueX = &intBlueX)
								{
									fixed (int* pintBlueY = &intBlueY)
									{
										uint ret = GetMDCVFixedNative(pngPtr, infoPtr, (int*)pintWhiteX, intWhiteY, (int*)pintRedX, (int*)pintRedY, (int*)pintGreenX, (int*)pintGreenY, (int*)pintBlueX, (int*)pintBlueY, masteringDisplayMaximumLuminanceScaledBy10000, masteringDisplayMinimumLuminanceScaledBy10000);
										return ret;
									}
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// Mastering display luminance in cd/m2 (nits). <br/>
		/// </summary>
		public static uint GetMDCVFixed(PngStruct* pngPtr, PngInfo* infoPtr, int* intWhiteX, ref int intWhiteY, ref int intRedX, ref int intRedY, ref int intGreenX, ref int intGreenY, ref int intBlueX, ref int intBlueY, uint* masteringDisplayMaximumLuminanceScaledBy10000, uint* masteringDisplayMinimumLuminanceScaledBy10000)
		{
			fixed (int* pintWhiteY = &intWhiteY)
			{
				fixed (int* pintRedX = &intRedX)
				{
					fixed (int* pintRedY = &intRedY)
					{
						fixed (int* pintGreenX = &intGreenX)
						{
							fixed (int* pintGreenY = &intGreenY)
							{
								fixed (int* pintBlueX = &intBlueX)
								{
									fixed (int* pintBlueY = &intBlueY)
									{
										uint ret = GetMDCVFixedNative(pngPtr, infoPtr, intWhiteX, (int*)pintWhiteY, (int*)pintRedX, (int*)pintRedY, (int*)pintGreenX, (int*)pintGreenY, (int*)pintBlueX, (int*)pintBlueY, masteringDisplayMaximumLuminanceScaledBy10000, masteringDisplayMinimumLuminanceScaledBy10000);
										return ret;
									}
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// Mastering display luminance in cd/m2 (nits). <br/>
		/// </summary>
		public static uint GetMDCVFixed(PngStruct* pngPtr, PngInfo* infoPtr, ref int intWhiteX, ref int intWhiteY, ref int intRedX, ref int intRedY, ref int intGreenX, ref int intGreenY, ref int intBlueX, ref int intBlueY, uint* masteringDisplayMaximumLuminanceScaledBy10000, uint* masteringDisplayMinimumLuminanceScaledBy10000)
		{
			fixed (int* pintWhiteX = &intWhiteX)
			{
				fixed (int* pintWhiteY = &intWhiteY)
				{
					fixed (int* pintRedX = &intRedX)
					{
						fixed (int* pintRedY = &intRedY)
						{
							fixed (int* pintGreenX = &intGreenX)
							{
								fixed (int* pintGreenY = &intGreenY)
								{
									fixed (int* pintBlueX = &intBlueX)
									{
										fixed (int* pintBlueY = &intBlueY)
										{
											uint ret = GetMDCVFixedNative(pngPtr, infoPtr, (int*)pintWhiteX, (int*)pintWhiteY, (int*)pintRedX, (int*)pintRedY, (int*)pintGreenX, (int*)pintGreenY, (int*)pintBlueX, (int*)pintBlueY, masteringDisplayMaximumLuminanceScaledBy10000, masteringDisplayMinimumLuminanceScaledBy10000);
											return ret;
										}
									}
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void SetMDCVNative(PngStruct* pngPtr, PngInfo* infoPtr, double whiteX, double whiteY, double redX, double redY, double greenX, double greenY, double blueX, double blueY, double masteringDisplayMaximumLuminance, double masteringDisplayMinimumLuminance)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<PngStruct*, PngInfo*, double, double, double, double, double, double, double, double, double, double, void>)funcTable[177])(pngPtr, infoPtr, whiteX, whiteY, redX, redY, greenX, greenY, blueX, blueY, masteringDisplayMaximumLuminance, masteringDisplayMinimumLuminance);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, double, double, double, double, double, double, double, double, double, double, void>)funcTable[177])((nint)pngPtr, (nint)infoPtr, whiteX, whiteY, redX, redY, greenX, greenY, blueX, blueY, masteringDisplayMaximumLuminance, masteringDisplayMinimumLuminance);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void SetMDCV(PngStruct* pngPtr, PngInfo* infoPtr, double whiteX, double whiteY, double redX, double redY, double greenX, double greenY, double blueX, double blueY, double masteringDisplayMaximumLuminance, double masteringDisplayMinimumLuminance)
		{
			SetMDCVNative(pngPtr, infoPtr, whiteX, whiteY, redX, redY, greenX, greenY, blueX, blueY, masteringDisplayMaximumLuminance, masteringDisplayMinimumLuminance);
		}

		/// <summary>
		/// Mastering display luminance in cd/m2 (nits). <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void SetMDCVFixedNative(PngStruct* pngPtr, PngInfo* infoPtr, int intWhiteX, int intWhiteY, int intRedX, int intRedY, int intGreenX, int intGreenY, int intBlueX, int intBlueY, uint masteringDisplayMaximumLuminanceScaledBy10000, uint masteringDisplayMinimumLuminanceScaledBy10000)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<PngStruct*, PngInfo*, int, int, int, int, int, int, int, int, uint, uint, void>)funcTable[178])(pngPtr, infoPtr, intWhiteX, intWhiteY, intRedX, intRedY, intGreenX, intGreenY, intBlueX, intBlueY, masteringDisplayMaximumLuminanceScaledBy10000, masteringDisplayMinimumLuminanceScaledBy10000);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, int, int, int, int, int, int, int, int, uint, uint, void>)funcTable[178])((nint)pngPtr, (nint)infoPtr, intWhiteX, intWhiteY, intRedX, intRedY, intGreenX, intGreenY, intBlueX, intBlueY, masteringDisplayMaximumLuminanceScaledBy10000, masteringDisplayMinimumLuminanceScaledBy10000);
			#endif
		}

		/// <summary>
		/// Mastering display luminance in cd/m2 (nits). <br/>
		/// </summary>
		public static void SetMDCVFixed(PngStruct* pngPtr, PngInfo* infoPtr, int intWhiteX, int intWhiteY, int intRedX, int intRedY, int intGreenX, int intGreenY, int intBlueX, int intBlueY, uint masteringDisplayMaximumLuminanceScaledBy10000, uint masteringDisplayMinimumLuminanceScaledBy10000)
		{
			SetMDCVFixedNative(pngPtr, infoPtr, intWhiteX, intWhiteY, intRedX, intRedY, intGreenX, intGreenY, intBlueX, intBlueY, masteringDisplayMaximumLuminanceScaledBy10000, masteringDisplayMinimumLuminanceScaledBy10000);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static uint GetOFFsNative(PngStruct* pngPtr, PngInfo* infoPtr, int* offsetX, int* offsetY, int* unitType)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<PngStruct*, PngInfo*, int*, int*, int*, uint>)funcTable[179])(pngPtr, infoPtr, offsetX, offsetY, unitType);
			#else
			return (uint)((delegate* unmanaged[Cdecl]<nint, nint, nint, nint, nint, uint>)funcTable[179])((nint)pngPtr, (nint)infoPtr, (nint)offsetX, (nint)offsetY, (nint)unitType);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetOFFs(PngStruct* pngPtr, PngInfo* infoPtr, int* offsetX, int* offsetY, int* unitType)
		{
			uint ret = GetOFFsNative(pngPtr, infoPtr, offsetX, offsetY, unitType);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetOFFs(PngStruct* pngPtr, PngInfo* infoPtr, ref int offsetX, int* offsetY, int* unitType)
		{
			fixed (int* poffsetX = &offsetX)
			{
				uint ret = GetOFFsNative(pngPtr, infoPtr, (int*)poffsetX, offsetY, unitType);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetOFFs(PngStruct* pngPtr, PngInfo* infoPtr, int* offsetX, ref int offsetY, int* unitType)
		{
			fixed (int* poffsetY = &offsetY)
			{
				uint ret = GetOFFsNative(pngPtr, infoPtr, offsetX, (int*)poffsetY, unitType);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetOFFs(PngStruct* pngPtr, PngInfo* infoPtr, ref int offsetX, ref int offsetY, int* unitType)
		{
			fixed (int* poffsetX = &offsetX)
			{
				fixed (int* poffsetY = &offsetY)
				{
					uint ret = GetOFFsNative(pngPtr, infoPtr, (int*)poffsetX, (int*)poffsetY, unitType);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetOFFs(PngStruct* pngPtr, PngInfo* infoPtr, int* offsetX, int* offsetY, ref int unitType)
		{
			fixed (int* punitType = &unitType)
			{
				uint ret = GetOFFsNative(pngPtr, infoPtr, offsetX, offsetY, (int*)punitType);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetOFFs(PngStruct* pngPtr, PngInfo* infoPtr, ref int offsetX, int* offsetY, ref int unitType)
		{
			fixed (int* poffsetX = &offsetX)
			{
				fixed (int* punitType = &unitType)
				{
					uint ret = GetOFFsNative(pngPtr, infoPtr, (int*)poffsetX, offsetY, (int*)punitType);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetOFFs(PngStruct* pngPtr, PngInfo* infoPtr, int* offsetX, ref int offsetY, ref int unitType)
		{
			fixed (int* poffsetY = &offsetY)
			{
				fixed (int* punitType = &unitType)
				{
					uint ret = GetOFFsNative(pngPtr, infoPtr, offsetX, (int*)poffsetY, (int*)punitType);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetOFFs(PngStruct* pngPtr, PngInfo* infoPtr, ref int offsetX, ref int offsetY, ref int unitType)
		{
			fixed (int* poffsetX = &offsetX)
			{
				fixed (int* poffsetY = &offsetY)
				{
					fixed (int* punitType = &unitType)
					{
						uint ret = GetOFFsNative(pngPtr, infoPtr, (int*)poffsetX, (int*)poffsetY, (int*)punitType);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void SetOFFsNative(PngStruct* pngPtr, PngInfo* infoPtr, int offsetX, int offsetY, int unitType)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<PngStruct*, PngInfo*, int, int, int, void>)funcTable[180])(pngPtr, infoPtr, offsetX, offsetY, unitType);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, int, int, int, void>)funcTable[180])((nint)pngPtr, (nint)infoPtr, offsetX, offsetY, unitType);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void SetOFFs(PngStruct* pngPtr, PngInfo* infoPtr, int offsetX, int offsetY, int unitType)
		{
			SetOFFsNative(pngPtr, infoPtr, offsetX, offsetY, unitType);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static uint GetPCALNative(PngStruct* pngPtr, PngInfo* infoPtr, byte** purpose, int* x0, int* x1, int* type, int* nparams, byte** units, byte*** @params)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<PngStruct*, PngInfo*, byte**, int*, int*, int*, int*, byte**, byte***, uint>)funcTable[181])(pngPtr, infoPtr, purpose, x0, x1, type, nparams, units, @params);
			#else
			return (uint)((delegate* unmanaged[Cdecl]<nint, nint, nint, nint, nint, nint, nint, nint, nint, uint>)funcTable[181])((nint)pngPtr, (nint)infoPtr, (nint)purpose, (nint)x0, (nint)x1, (nint)type, (nint)nparams, (nint)units, (nint)@params);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetPCAL(PngStruct* pngPtr, PngInfo* infoPtr, byte** purpose, int* x0, int* x1, int* type, int* nparams, byte** units, byte*** @params)
		{
			uint ret = GetPCALNative(pngPtr, infoPtr, purpose, x0, x1, type, nparams, units, @params);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetPCAL(PngStruct* pngPtr, PngInfo* infoPtr, ref byte* purpose, int* x0, int* x1, int* type, int* nparams, byte** units, byte*** @params)
		{
			fixed (byte** ppurpose = &purpose)
			{
				uint ret = GetPCALNative(pngPtr, infoPtr, (byte**)ppurpose, x0, x1, type, nparams, units, @params);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetPCAL(PngStruct* pngPtr, PngInfo* infoPtr, byte** purpose, ref int x0, int* x1, int* type, int* nparams, byte** units, byte*** @params)
		{
			fixed (int* px0 = &x0)
			{
				uint ret = GetPCALNative(pngPtr, infoPtr, purpose, (int*)px0, x1, type, nparams, units, @params);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetPCAL(PngStruct* pngPtr, PngInfo* infoPtr, ref byte* purpose, ref int x0, int* x1, int* type, int* nparams, byte** units, byte*** @params)
		{
			fixed (byte** ppurpose = &purpose)
			{
				fixed (int* px0 = &x0)
				{
					uint ret = GetPCALNative(pngPtr, infoPtr, (byte**)ppurpose, (int*)px0, x1, type, nparams, units, @params);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetPCAL(PngStruct* pngPtr, PngInfo* infoPtr, byte** purpose, int* x0, ref int x1, int* type, int* nparams, byte** units, byte*** @params)
		{
			fixed (int* px1 = &x1)
			{
				uint ret = GetPCALNative(pngPtr, infoPtr, purpose, x0, (int*)px1, type, nparams, units, @params);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetPCAL(PngStruct* pngPtr, PngInfo* infoPtr, ref byte* purpose, int* x0, ref int x1, int* type, int* nparams, byte** units, byte*** @params)
		{
			fixed (byte** ppurpose = &purpose)
			{
				fixed (int* px1 = &x1)
				{
					uint ret = GetPCALNative(pngPtr, infoPtr, (byte**)ppurpose, x0, (int*)px1, type, nparams, units, @params);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetPCAL(PngStruct* pngPtr, PngInfo* infoPtr, byte** purpose, ref int x0, ref int x1, int* type, int* nparams, byte** units, byte*** @params)
		{
			fixed (int* px0 = &x0)
			{
				fixed (int* px1 = &x1)
				{
					uint ret = GetPCALNative(pngPtr, infoPtr, purpose, (int*)px0, (int*)px1, type, nparams, units, @params);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetPCAL(PngStruct* pngPtr, PngInfo* infoPtr, ref byte* purpose, ref int x0, ref int x1, int* type, int* nparams, byte** units, byte*** @params)
		{
			fixed (byte** ppurpose = &purpose)
			{
				fixed (int* px0 = &x0)
				{
					fixed (int* px1 = &x1)
					{
						uint ret = GetPCALNative(pngPtr, infoPtr, (byte**)ppurpose, (int*)px0, (int*)px1, type, nparams, units, @params);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetPCAL(PngStruct* pngPtr, PngInfo* infoPtr, byte** purpose, int* x0, int* x1, ref int type, int* nparams, byte** units, byte*** @params)
		{
			fixed (int* ptype = &type)
			{
				uint ret = GetPCALNative(pngPtr, infoPtr, purpose, x0, x1, (int*)ptype, nparams, units, @params);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetPCAL(PngStruct* pngPtr, PngInfo* infoPtr, ref byte* purpose, int* x0, int* x1, ref int type, int* nparams, byte** units, byte*** @params)
		{
			fixed (byte** ppurpose = &purpose)
			{
				fixed (int* ptype = &type)
				{
					uint ret = GetPCALNative(pngPtr, infoPtr, (byte**)ppurpose, x0, x1, (int*)ptype, nparams, units, @params);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetPCAL(PngStruct* pngPtr, PngInfo* infoPtr, byte** purpose, ref int x0, int* x1, ref int type, int* nparams, byte** units, byte*** @params)
		{
			fixed (int* px0 = &x0)
			{
				fixed (int* ptype = &type)
				{
					uint ret = GetPCALNative(pngPtr, infoPtr, purpose, (int*)px0, x1, (int*)ptype, nparams, units, @params);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetPCAL(PngStruct* pngPtr, PngInfo* infoPtr, ref byte* purpose, ref int x0, int* x1, ref int type, int* nparams, byte** units, byte*** @params)
		{
			fixed (byte** ppurpose = &purpose)
			{
				fixed (int* px0 = &x0)
				{
					fixed (int* ptype = &type)
					{
						uint ret = GetPCALNative(pngPtr, infoPtr, (byte**)ppurpose, (int*)px0, x1, (int*)ptype, nparams, units, @params);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetPCAL(PngStruct* pngPtr, PngInfo* infoPtr, byte** purpose, int* x0, ref int x1, ref int type, int* nparams, byte** units, byte*** @params)
		{
			fixed (int* px1 = &x1)
			{
				fixed (int* ptype = &type)
				{
					uint ret = GetPCALNative(pngPtr, infoPtr, purpose, x0, (int*)px1, (int*)ptype, nparams, units, @params);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetPCAL(PngStruct* pngPtr, PngInfo* infoPtr, ref byte* purpose, int* x0, ref int x1, ref int type, int* nparams, byte** units, byte*** @params)
		{
			fixed (byte** ppurpose = &purpose)
			{
				fixed (int* px1 = &x1)
				{
					fixed (int* ptype = &type)
					{
						uint ret = GetPCALNative(pngPtr, infoPtr, (byte**)ppurpose, x0, (int*)px1, (int*)ptype, nparams, units, @params);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetPCAL(PngStruct* pngPtr, PngInfo* infoPtr, byte** purpose, ref int x0, ref int x1, ref int type, int* nparams, byte** units, byte*** @params)
		{
			fixed (int* px0 = &x0)
			{
				fixed (int* px1 = &x1)
				{
					fixed (int* ptype = &type)
					{
						uint ret = GetPCALNative(pngPtr, infoPtr, purpose, (int*)px0, (int*)px1, (int*)ptype, nparams, units, @params);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetPCAL(PngStruct* pngPtr, PngInfo* infoPtr, ref byte* purpose, ref int x0, ref int x1, ref int type, int* nparams, byte** units, byte*** @params)
		{
			fixed (byte** ppurpose = &purpose)
			{
				fixed (int* px0 = &x0)
				{
					fixed (int* px1 = &x1)
					{
						fixed (int* ptype = &type)
						{
							uint ret = GetPCALNative(pngPtr, infoPtr, (byte**)ppurpose, (int*)px0, (int*)px1, (int*)ptype, nparams, units, @params);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetPCAL(PngStruct* pngPtr, PngInfo* infoPtr, byte** purpose, int* x0, int* x1, int* type, ref int nparams, byte** units, byte*** @params)
		{
			fixed (int* pnparams = &nparams)
			{
				uint ret = GetPCALNative(pngPtr, infoPtr, purpose, x0, x1, type, (int*)pnparams, units, @params);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetPCAL(PngStruct* pngPtr, PngInfo* infoPtr, ref byte* purpose, int* x0, int* x1, int* type, ref int nparams, byte** units, byte*** @params)
		{
			fixed (byte** ppurpose = &purpose)
			{
				fixed (int* pnparams = &nparams)
				{
					uint ret = GetPCALNative(pngPtr, infoPtr, (byte**)ppurpose, x0, x1, type, (int*)pnparams, units, @params);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetPCAL(PngStruct* pngPtr, PngInfo* infoPtr, byte** purpose, ref int x0, int* x1, int* type, ref int nparams, byte** units, byte*** @params)
		{
			fixed (int* px0 = &x0)
			{
				fixed (int* pnparams = &nparams)
				{
					uint ret = GetPCALNative(pngPtr, infoPtr, purpose, (int*)px0, x1, type, (int*)pnparams, units, @params);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetPCAL(PngStruct* pngPtr, PngInfo* infoPtr, ref byte* purpose, ref int x0, int* x1, int* type, ref int nparams, byte** units, byte*** @params)
		{
			fixed (byte** ppurpose = &purpose)
			{
				fixed (int* px0 = &x0)
				{
					fixed (int* pnparams = &nparams)
					{
						uint ret = GetPCALNative(pngPtr, infoPtr, (byte**)ppurpose, (int*)px0, x1, type, (int*)pnparams, units, @params);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetPCAL(PngStruct* pngPtr, PngInfo* infoPtr, byte** purpose, int* x0, ref int x1, int* type, ref int nparams, byte** units, byte*** @params)
		{
			fixed (int* px1 = &x1)
			{
				fixed (int* pnparams = &nparams)
				{
					uint ret = GetPCALNative(pngPtr, infoPtr, purpose, x0, (int*)px1, type, (int*)pnparams, units, @params);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetPCAL(PngStruct* pngPtr, PngInfo* infoPtr, ref byte* purpose, int* x0, ref int x1, int* type, ref int nparams, byte** units, byte*** @params)
		{
			fixed (byte** ppurpose = &purpose)
			{
				fixed (int* px1 = &x1)
				{
					fixed (int* pnparams = &nparams)
					{
						uint ret = GetPCALNative(pngPtr, infoPtr, (byte**)ppurpose, x0, (int*)px1, type, (int*)pnparams, units, @params);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetPCAL(PngStruct* pngPtr, PngInfo* infoPtr, byte** purpose, ref int x0, ref int x1, int* type, ref int nparams, byte** units, byte*** @params)
		{
			fixed (int* px0 = &x0)
			{
				fixed (int* px1 = &x1)
				{
					fixed (int* pnparams = &nparams)
					{
						uint ret = GetPCALNative(pngPtr, infoPtr, purpose, (int*)px0, (int*)px1, type, (int*)pnparams, units, @params);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetPCAL(PngStruct* pngPtr, PngInfo* infoPtr, ref byte* purpose, ref int x0, ref int x1, int* type, ref int nparams, byte** units, byte*** @params)
		{
			fixed (byte** ppurpose = &purpose)
			{
				fixed (int* px0 = &x0)
				{
					fixed (int* px1 = &x1)
					{
						fixed (int* pnparams = &nparams)
						{
							uint ret = GetPCALNative(pngPtr, infoPtr, (byte**)ppurpose, (int*)px0, (int*)px1, type, (int*)pnparams, units, @params);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetPCAL(PngStruct* pngPtr, PngInfo* infoPtr, byte** purpose, int* x0, int* x1, ref int type, ref int nparams, byte** units, byte*** @params)
		{
			fixed (int* ptype = &type)
			{
				fixed (int* pnparams = &nparams)
				{
					uint ret = GetPCALNative(pngPtr, infoPtr, purpose, x0, x1, (int*)ptype, (int*)pnparams, units, @params);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetPCAL(PngStruct* pngPtr, PngInfo* infoPtr, ref byte* purpose, int* x0, int* x1, ref int type, ref int nparams, byte** units, byte*** @params)
		{
			fixed (byte** ppurpose = &purpose)
			{
				fixed (int* ptype = &type)
				{
					fixed (int* pnparams = &nparams)
					{
						uint ret = GetPCALNative(pngPtr, infoPtr, (byte**)ppurpose, x0, x1, (int*)ptype, (int*)pnparams, units, @params);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetPCAL(PngStruct* pngPtr, PngInfo* infoPtr, byte** purpose, ref int x0, int* x1, ref int type, ref int nparams, byte** units, byte*** @params)
		{
			fixed (int* px0 = &x0)
			{
				fixed (int* ptype = &type)
				{
					fixed (int* pnparams = &nparams)
					{
						uint ret = GetPCALNative(pngPtr, infoPtr, purpose, (int*)px0, x1, (int*)ptype, (int*)pnparams, units, @params);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetPCAL(PngStruct* pngPtr, PngInfo* infoPtr, ref byte* purpose, ref int x0, int* x1, ref int type, ref int nparams, byte** units, byte*** @params)
		{
			fixed (byte** ppurpose = &purpose)
			{
				fixed (int* px0 = &x0)
				{
					fixed (int* ptype = &type)
					{
						fixed (int* pnparams = &nparams)
						{
							uint ret = GetPCALNative(pngPtr, infoPtr, (byte**)ppurpose, (int*)px0, x1, (int*)ptype, (int*)pnparams, units, @params);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetPCAL(PngStruct* pngPtr, PngInfo* infoPtr, byte** purpose, int* x0, ref int x1, ref int type, ref int nparams, byte** units, byte*** @params)
		{
			fixed (int* px1 = &x1)
			{
				fixed (int* ptype = &type)
				{
					fixed (int* pnparams = &nparams)
					{
						uint ret = GetPCALNative(pngPtr, infoPtr, purpose, x0, (int*)px1, (int*)ptype, (int*)pnparams, units, @params);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetPCAL(PngStruct* pngPtr, PngInfo* infoPtr, ref byte* purpose, int* x0, ref int x1, ref int type, ref int nparams, byte** units, byte*** @params)
		{
			fixed (byte** ppurpose = &purpose)
			{
				fixed (int* px1 = &x1)
				{
					fixed (int* ptype = &type)
					{
						fixed (int* pnparams = &nparams)
						{
							uint ret = GetPCALNative(pngPtr, infoPtr, (byte**)ppurpose, x0, (int*)px1, (int*)ptype, (int*)pnparams, units, @params);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetPCAL(PngStruct* pngPtr, PngInfo* infoPtr, byte** purpose, ref int x0, ref int x1, ref int type, ref int nparams, byte** units, byte*** @params)
		{
			fixed (int* px0 = &x0)
			{
				fixed (int* px1 = &x1)
				{
					fixed (int* ptype = &type)
					{
						fixed (int* pnparams = &nparams)
						{
							uint ret = GetPCALNative(pngPtr, infoPtr, purpose, (int*)px0, (int*)px1, (int*)ptype, (int*)pnparams, units, @params);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetPCAL(PngStruct* pngPtr, PngInfo* infoPtr, ref byte* purpose, ref int x0, ref int x1, ref int type, ref int nparams, byte** units, byte*** @params)
		{
			fixed (byte** ppurpose = &purpose)
			{
				fixed (int* px0 = &x0)
				{
					fixed (int* px1 = &x1)
					{
						fixed (int* ptype = &type)
						{
							fixed (int* pnparams = &nparams)
							{
								uint ret = GetPCALNative(pngPtr, infoPtr, (byte**)ppurpose, (int*)px0, (int*)px1, (int*)ptype, (int*)pnparams, units, @params);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetPCAL(PngStruct* pngPtr, PngInfo* infoPtr, byte** purpose, int* x0, int* x1, int* type, int* nparams, ref byte* units, byte*** @params)
		{
			fixed (byte** punits = &units)
			{
				uint ret = GetPCALNative(pngPtr, infoPtr, purpose, x0, x1, type, nparams, (byte**)punits, @params);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetPCAL(PngStruct* pngPtr, PngInfo* infoPtr, ref byte* purpose, int* x0, int* x1, int* type, int* nparams, ref byte* units, byte*** @params)
		{
			fixed (byte** ppurpose = &purpose)
			{
				fixed (byte** punits = &units)
				{
					uint ret = GetPCALNative(pngPtr, infoPtr, (byte**)ppurpose, x0, x1, type, nparams, (byte**)punits, @params);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetPCAL(PngStruct* pngPtr, PngInfo* infoPtr, byte** purpose, ref int x0, int* x1, int* type, int* nparams, ref byte* units, byte*** @params)
		{
			fixed (int* px0 = &x0)
			{
				fixed (byte** punits = &units)
				{
					uint ret = GetPCALNative(pngPtr, infoPtr, purpose, (int*)px0, x1, type, nparams, (byte**)punits, @params);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetPCAL(PngStruct* pngPtr, PngInfo* infoPtr, ref byte* purpose, ref int x0, int* x1, int* type, int* nparams, ref byte* units, byte*** @params)
		{
			fixed (byte** ppurpose = &purpose)
			{
				fixed (int* px0 = &x0)
				{
					fixed (byte** punits = &units)
					{
						uint ret = GetPCALNative(pngPtr, infoPtr, (byte**)ppurpose, (int*)px0, x1, type, nparams, (byte**)punits, @params);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetPCAL(PngStruct* pngPtr, PngInfo* infoPtr, byte** purpose, int* x0, ref int x1, int* type, int* nparams, ref byte* units, byte*** @params)
		{
			fixed (int* px1 = &x1)
			{
				fixed (byte** punits = &units)
				{
					uint ret = GetPCALNative(pngPtr, infoPtr, purpose, x0, (int*)px1, type, nparams, (byte**)punits, @params);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetPCAL(PngStruct* pngPtr, PngInfo* infoPtr, ref byte* purpose, int* x0, ref int x1, int* type, int* nparams, ref byte* units, byte*** @params)
		{
			fixed (byte** ppurpose = &purpose)
			{
				fixed (int* px1 = &x1)
				{
					fixed (byte** punits = &units)
					{
						uint ret = GetPCALNative(pngPtr, infoPtr, (byte**)ppurpose, x0, (int*)px1, type, nparams, (byte**)punits, @params);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetPCAL(PngStruct* pngPtr, PngInfo* infoPtr, byte** purpose, ref int x0, ref int x1, int* type, int* nparams, ref byte* units, byte*** @params)
		{
			fixed (int* px0 = &x0)
			{
				fixed (int* px1 = &x1)
				{
					fixed (byte** punits = &units)
					{
						uint ret = GetPCALNative(pngPtr, infoPtr, purpose, (int*)px0, (int*)px1, type, nparams, (byte**)punits, @params);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetPCAL(PngStruct* pngPtr, PngInfo* infoPtr, ref byte* purpose, ref int x0, ref int x1, int* type, int* nparams, ref byte* units, byte*** @params)
		{
			fixed (byte** ppurpose = &purpose)
			{
				fixed (int* px0 = &x0)
				{
					fixed (int* px1 = &x1)
					{
						fixed (byte** punits = &units)
						{
							uint ret = GetPCALNative(pngPtr, infoPtr, (byte**)ppurpose, (int*)px0, (int*)px1, type, nparams, (byte**)punits, @params);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetPCAL(PngStruct* pngPtr, PngInfo* infoPtr, byte** purpose, int* x0, int* x1, ref int type, int* nparams, ref byte* units, byte*** @params)
		{
			fixed (int* ptype = &type)
			{
				fixed (byte** punits = &units)
				{
					uint ret = GetPCALNative(pngPtr, infoPtr, purpose, x0, x1, (int*)ptype, nparams, (byte**)punits, @params);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetPCAL(PngStruct* pngPtr, PngInfo* infoPtr, ref byte* purpose, int* x0, int* x1, ref int type, int* nparams, ref byte* units, byte*** @params)
		{
			fixed (byte** ppurpose = &purpose)
			{
				fixed (int* ptype = &type)
				{
					fixed (byte** punits = &units)
					{
						uint ret = GetPCALNative(pngPtr, infoPtr, (byte**)ppurpose, x0, x1, (int*)ptype, nparams, (byte**)punits, @params);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetPCAL(PngStruct* pngPtr, PngInfo* infoPtr, byte** purpose, ref int x0, int* x1, ref int type, int* nparams, ref byte* units, byte*** @params)
		{
			fixed (int* px0 = &x0)
			{
				fixed (int* ptype = &type)
				{
					fixed (byte** punits = &units)
					{
						uint ret = GetPCALNative(pngPtr, infoPtr, purpose, (int*)px0, x1, (int*)ptype, nparams, (byte**)punits, @params);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetPCAL(PngStruct* pngPtr, PngInfo* infoPtr, ref byte* purpose, ref int x0, int* x1, ref int type, int* nparams, ref byte* units, byte*** @params)
		{
			fixed (byte** ppurpose = &purpose)
			{
				fixed (int* px0 = &x0)
				{
					fixed (int* ptype = &type)
					{
						fixed (byte** punits = &units)
						{
							uint ret = GetPCALNative(pngPtr, infoPtr, (byte**)ppurpose, (int*)px0, x1, (int*)ptype, nparams, (byte**)punits, @params);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetPCAL(PngStruct* pngPtr, PngInfo* infoPtr, byte** purpose, int* x0, ref int x1, ref int type, int* nparams, ref byte* units, byte*** @params)
		{
			fixed (int* px1 = &x1)
			{
				fixed (int* ptype = &type)
				{
					fixed (byte** punits = &units)
					{
						uint ret = GetPCALNative(pngPtr, infoPtr, purpose, x0, (int*)px1, (int*)ptype, nparams, (byte**)punits, @params);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetPCAL(PngStruct* pngPtr, PngInfo* infoPtr, ref byte* purpose, int* x0, ref int x1, ref int type, int* nparams, ref byte* units, byte*** @params)
		{
			fixed (byte** ppurpose = &purpose)
			{
				fixed (int* px1 = &x1)
				{
					fixed (int* ptype = &type)
					{
						fixed (byte** punits = &units)
						{
							uint ret = GetPCALNative(pngPtr, infoPtr, (byte**)ppurpose, x0, (int*)px1, (int*)ptype, nparams, (byte**)punits, @params);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetPCAL(PngStruct* pngPtr, PngInfo* infoPtr, byte** purpose, ref int x0, ref int x1, ref int type, int* nparams, ref byte* units, byte*** @params)
		{
			fixed (int* px0 = &x0)
			{
				fixed (int* px1 = &x1)
				{
					fixed (int* ptype = &type)
					{
						fixed (byte** punits = &units)
						{
							uint ret = GetPCALNative(pngPtr, infoPtr, purpose, (int*)px0, (int*)px1, (int*)ptype, nparams, (byte**)punits, @params);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetPCAL(PngStruct* pngPtr, PngInfo* infoPtr, ref byte* purpose, ref int x0, ref int x1, ref int type, int* nparams, ref byte* units, byte*** @params)
		{
			fixed (byte** ppurpose = &purpose)
			{
				fixed (int* px0 = &x0)
				{
					fixed (int* px1 = &x1)
					{
						fixed (int* ptype = &type)
						{
							fixed (byte** punits = &units)
							{
								uint ret = GetPCALNative(pngPtr, infoPtr, (byte**)ppurpose, (int*)px0, (int*)px1, (int*)ptype, nparams, (byte**)punits, @params);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetPCAL(PngStruct* pngPtr, PngInfo* infoPtr, byte** purpose, int* x0, int* x1, int* type, ref int nparams, ref byte* units, byte*** @params)
		{
			fixed (int* pnparams = &nparams)
			{
				fixed (byte** punits = &units)
				{
					uint ret = GetPCALNative(pngPtr, infoPtr, purpose, x0, x1, type, (int*)pnparams, (byte**)punits, @params);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetPCAL(PngStruct* pngPtr, PngInfo* infoPtr, ref byte* purpose, int* x0, int* x1, int* type, ref int nparams, ref byte* units, byte*** @params)
		{
			fixed (byte** ppurpose = &purpose)
			{
				fixed (int* pnparams = &nparams)
				{
					fixed (byte** punits = &units)
					{
						uint ret = GetPCALNative(pngPtr, infoPtr, (byte**)ppurpose, x0, x1, type, (int*)pnparams, (byte**)punits, @params);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetPCAL(PngStruct* pngPtr, PngInfo* infoPtr, byte** purpose, ref int x0, int* x1, int* type, ref int nparams, ref byte* units, byte*** @params)
		{
			fixed (int* px0 = &x0)
			{
				fixed (int* pnparams = &nparams)
				{
					fixed (byte** punits = &units)
					{
						uint ret = GetPCALNative(pngPtr, infoPtr, purpose, (int*)px0, x1, type, (int*)pnparams, (byte**)punits, @params);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetPCAL(PngStruct* pngPtr, PngInfo* infoPtr, ref byte* purpose, ref int x0, int* x1, int* type, ref int nparams, ref byte* units, byte*** @params)
		{
			fixed (byte** ppurpose = &purpose)
			{
				fixed (int* px0 = &x0)
				{
					fixed (int* pnparams = &nparams)
					{
						fixed (byte** punits = &units)
						{
							uint ret = GetPCALNative(pngPtr, infoPtr, (byte**)ppurpose, (int*)px0, x1, type, (int*)pnparams, (byte**)punits, @params);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetPCAL(PngStruct* pngPtr, PngInfo* infoPtr, byte** purpose, int* x0, ref int x1, int* type, ref int nparams, ref byte* units, byte*** @params)
		{
			fixed (int* px1 = &x1)
			{
				fixed (int* pnparams = &nparams)
				{
					fixed (byte** punits = &units)
					{
						uint ret = GetPCALNative(pngPtr, infoPtr, purpose, x0, (int*)px1, type, (int*)pnparams, (byte**)punits, @params);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetPCAL(PngStruct* pngPtr, PngInfo* infoPtr, ref byte* purpose, int* x0, ref int x1, int* type, ref int nparams, ref byte* units, byte*** @params)
		{
			fixed (byte** ppurpose = &purpose)
			{
				fixed (int* px1 = &x1)
				{
					fixed (int* pnparams = &nparams)
					{
						fixed (byte** punits = &units)
						{
							uint ret = GetPCALNative(pngPtr, infoPtr, (byte**)ppurpose, x0, (int*)px1, type, (int*)pnparams, (byte**)punits, @params);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetPCAL(PngStruct* pngPtr, PngInfo* infoPtr, byte** purpose, ref int x0, ref int x1, int* type, ref int nparams, ref byte* units, byte*** @params)
		{
			fixed (int* px0 = &x0)
			{
				fixed (int* px1 = &x1)
				{
					fixed (int* pnparams = &nparams)
					{
						fixed (byte** punits = &units)
						{
							uint ret = GetPCALNative(pngPtr, infoPtr, purpose, (int*)px0, (int*)px1, type, (int*)pnparams, (byte**)punits, @params);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetPCAL(PngStruct* pngPtr, PngInfo* infoPtr, ref byte* purpose, ref int x0, ref int x1, int* type, ref int nparams, ref byte* units, byte*** @params)
		{
			fixed (byte** ppurpose = &purpose)
			{
				fixed (int* px0 = &x0)
				{
					fixed (int* px1 = &x1)
					{
						fixed (int* pnparams = &nparams)
						{
							fixed (byte** punits = &units)
							{
								uint ret = GetPCALNative(pngPtr, infoPtr, (byte**)ppurpose, (int*)px0, (int*)px1, type, (int*)pnparams, (byte**)punits, @params);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetPCAL(PngStruct* pngPtr, PngInfo* infoPtr, byte** purpose, int* x0, int* x1, ref int type, ref int nparams, ref byte* units, byte*** @params)
		{
			fixed (int* ptype = &type)
			{
				fixed (int* pnparams = &nparams)
				{
					fixed (byte** punits = &units)
					{
						uint ret = GetPCALNative(pngPtr, infoPtr, purpose, x0, x1, (int*)ptype, (int*)pnparams, (byte**)punits, @params);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetPCAL(PngStruct* pngPtr, PngInfo* infoPtr, ref byte* purpose, int* x0, int* x1, ref int type, ref int nparams, ref byte* units, byte*** @params)
		{
			fixed (byte** ppurpose = &purpose)
			{
				fixed (int* ptype = &type)
				{
					fixed (int* pnparams = &nparams)
					{
						fixed (byte** punits = &units)
						{
							uint ret = GetPCALNative(pngPtr, infoPtr, (byte**)ppurpose, x0, x1, (int*)ptype, (int*)pnparams, (byte**)punits, @params);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetPCAL(PngStruct* pngPtr, PngInfo* infoPtr, byte** purpose, ref int x0, int* x1, ref int type, ref int nparams, ref byte* units, byte*** @params)
		{
			fixed (int* px0 = &x0)
			{
				fixed (int* ptype = &type)
				{
					fixed (int* pnparams = &nparams)
					{
						fixed (byte** punits = &units)
						{
							uint ret = GetPCALNative(pngPtr, infoPtr, purpose, (int*)px0, x1, (int*)ptype, (int*)pnparams, (byte**)punits, @params);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetPCAL(PngStruct* pngPtr, PngInfo* infoPtr, ref byte* purpose, ref int x0, int* x1, ref int type, ref int nparams, ref byte* units, byte*** @params)
		{
			fixed (byte** ppurpose = &purpose)
			{
				fixed (int* px0 = &x0)
				{
					fixed (int* ptype = &type)
					{
						fixed (int* pnparams = &nparams)
						{
							fixed (byte** punits = &units)
							{
								uint ret = GetPCALNative(pngPtr, infoPtr, (byte**)ppurpose, (int*)px0, x1, (int*)ptype, (int*)pnparams, (byte**)punits, @params);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetPCAL(PngStruct* pngPtr, PngInfo* infoPtr, byte** purpose, int* x0, ref int x1, ref int type, ref int nparams, ref byte* units, byte*** @params)
		{
			fixed (int* px1 = &x1)
			{
				fixed (int* ptype = &type)
				{
					fixed (int* pnparams = &nparams)
					{
						fixed (byte** punits = &units)
						{
							uint ret = GetPCALNative(pngPtr, infoPtr, purpose, x0, (int*)px1, (int*)ptype, (int*)pnparams, (byte**)punits, @params);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetPCAL(PngStruct* pngPtr, PngInfo* infoPtr, ref byte* purpose, int* x0, ref int x1, ref int type, ref int nparams, ref byte* units, byte*** @params)
		{
			fixed (byte** ppurpose = &purpose)
			{
				fixed (int* px1 = &x1)
				{
					fixed (int* ptype = &type)
					{
						fixed (int* pnparams = &nparams)
						{
							fixed (byte** punits = &units)
							{
								uint ret = GetPCALNative(pngPtr, infoPtr, (byte**)ppurpose, x0, (int*)px1, (int*)ptype, (int*)pnparams, (byte**)punits, @params);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetPCAL(PngStruct* pngPtr, PngInfo* infoPtr, byte** purpose, ref int x0, ref int x1, ref int type, ref int nparams, ref byte* units, byte*** @params)
		{
			fixed (int* px0 = &x0)
			{
				fixed (int* px1 = &x1)
				{
					fixed (int* ptype = &type)
					{
						fixed (int* pnparams = &nparams)
						{
							fixed (byte** punits = &units)
							{
								uint ret = GetPCALNative(pngPtr, infoPtr, purpose, (int*)px0, (int*)px1, (int*)ptype, (int*)pnparams, (byte**)punits, @params);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetPCAL(PngStruct* pngPtr, PngInfo* infoPtr, ref byte* purpose, ref int x0, ref int x1, ref int type, ref int nparams, ref byte* units, byte*** @params)
		{
			fixed (byte** ppurpose = &purpose)
			{
				fixed (int* px0 = &x0)
				{
					fixed (int* px1 = &x1)
					{
						fixed (int* ptype = &type)
						{
							fixed (int* pnparams = &nparams)
							{
								fixed (byte** punits = &units)
								{
									uint ret = GetPCALNative(pngPtr, infoPtr, (byte**)ppurpose, (int*)px0, (int*)px1, (int*)ptype, (int*)pnparams, (byte**)punits, @params);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetPCAL(PngStruct* pngPtr, PngInfo* infoPtr, byte** purpose, int* x0, int* x1, int* type, int* nparams, byte** units, ref byte** @params)
		{
			fixed (byte*** pparams = &@params)
			{
				uint ret = GetPCALNative(pngPtr, infoPtr, purpose, x0, x1, type, nparams, units, (byte***)pparams);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetPCAL(PngStruct* pngPtr, PngInfo* infoPtr, ref byte* purpose, int* x0, int* x1, int* type, int* nparams, byte** units, ref byte** @params)
		{
			fixed (byte** ppurpose = &purpose)
			{
				fixed (byte*** pparams = &@params)
				{
					uint ret = GetPCALNative(pngPtr, infoPtr, (byte**)ppurpose, x0, x1, type, nparams, units, (byte***)pparams);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetPCAL(PngStruct* pngPtr, PngInfo* infoPtr, byte** purpose, ref int x0, int* x1, int* type, int* nparams, byte** units, ref byte** @params)
		{
			fixed (int* px0 = &x0)
			{
				fixed (byte*** pparams = &@params)
				{
					uint ret = GetPCALNative(pngPtr, infoPtr, purpose, (int*)px0, x1, type, nparams, units, (byte***)pparams);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetPCAL(PngStruct* pngPtr, PngInfo* infoPtr, ref byte* purpose, ref int x0, int* x1, int* type, int* nparams, byte** units, ref byte** @params)
		{
			fixed (byte** ppurpose = &purpose)
			{
				fixed (int* px0 = &x0)
				{
					fixed (byte*** pparams = &@params)
					{
						uint ret = GetPCALNative(pngPtr, infoPtr, (byte**)ppurpose, (int*)px0, x1, type, nparams, units, (byte***)pparams);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetPCAL(PngStruct* pngPtr, PngInfo* infoPtr, byte** purpose, int* x0, ref int x1, int* type, int* nparams, byte** units, ref byte** @params)
		{
			fixed (int* px1 = &x1)
			{
				fixed (byte*** pparams = &@params)
				{
					uint ret = GetPCALNative(pngPtr, infoPtr, purpose, x0, (int*)px1, type, nparams, units, (byte***)pparams);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetPCAL(PngStruct* pngPtr, PngInfo* infoPtr, ref byte* purpose, int* x0, ref int x1, int* type, int* nparams, byte** units, ref byte** @params)
		{
			fixed (byte** ppurpose = &purpose)
			{
				fixed (int* px1 = &x1)
				{
					fixed (byte*** pparams = &@params)
					{
						uint ret = GetPCALNative(pngPtr, infoPtr, (byte**)ppurpose, x0, (int*)px1, type, nparams, units, (byte***)pparams);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetPCAL(PngStruct* pngPtr, PngInfo* infoPtr, byte** purpose, ref int x0, ref int x1, int* type, int* nparams, byte** units, ref byte** @params)
		{
			fixed (int* px0 = &x0)
			{
				fixed (int* px1 = &x1)
				{
					fixed (byte*** pparams = &@params)
					{
						uint ret = GetPCALNative(pngPtr, infoPtr, purpose, (int*)px0, (int*)px1, type, nparams, units, (byte***)pparams);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetPCAL(PngStruct* pngPtr, PngInfo* infoPtr, ref byte* purpose, ref int x0, ref int x1, int* type, int* nparams, byte** units, ref byte** @params)
		{
			fixed (byte** ppurpose = &purpose)
			{
				fixed (int* px0 = &x0)
				{
					fixed (int* px1 = &x1)
					{
						fixed (byte*** pparams = &@params)
						{
							uint ret = GetPCALNative(pngPtr, infoPtr, (byte**)ppurpose, (int*)px0, (int*)px1, type, nparams, units, (byte***)pparams);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetPCAL(PngStruct* pngPtr, PngInfo* infoPtr, byte** purpose, int* x0, int* x1, ref int type, int* nparams, byte** units, ref byte** @params)
		{
			fixed (int* ptype = &type)
			{
				fixed (byte*** pparams = &@params)
				{
					uint ret = GetPCALNative(pngPtr, infoPtr, purpose, x0, x1, (int*)ptype, nparams, units, (byte***)pparams);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetPCAL(PngStruct* pngPtr, PngInfo* infoPtr, ref byte* purpose, int* x0, int* x1, ref int type, int* nparams, byte** units, ref byte** @params)
		{
			fixed (byte** ppurpose = &purpose)
			{
				fixed (int* ptype = &type)
				{
					fixed (byte*** pparams = &@params)
					{
						uint ret = GetPCALNative(pngPtr, infoPtr, (byte**)ppurpose, x0, x1, (int*)ptype, nparams, units, (byte***)pparams);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetPCAL(PngStruct* pngPtr, PngInfo* infoPtr, byte** purpose, ref int x0, int* x1, ref int type, int* nparams, byte** units, ref byte** @params)
		{
			fixed (int* px0 = &x0)
			{
				fixed (int* ptype = &type)
				{
					fixed (byte*** pparams = &@params)
					{
						uint ret = GetPCALNative(pngPtr, infoPtr, purpose, (int*)px0, x1, (int*)ptype, nparams, units, (byte***)pparams);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetPCAL(PngStruct* pngPtr, PngInfo* infoPtr, ref byte* purpose, ref int x0, int* x1, ref int type, int* nparams, byte** units, ref byte** @params)
		{
			fixed (byte** ppurpose = &purpose)
			{
				fixed (int* px0 = &x0)
				{
					fixed (int* ptype = &type)
					{
						fixed (byte*** pparams = &@params)
						{
							uint ret = GetPCALNative(pngPtr, infoPtr, (byte**)ppurpose, (int*)px0, x1, (int*)ptype, nparams, units, (byte***)pparams);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetPCAL(PngStruct* pngPtr, PngInfo* infoPtr, byte** purpose, int* x0, ref int x1, ref int type, int* nparams, byte** units, ref byte** @params)
		{
			fixed (int* px1 = &x1)
			{
				fixed (int* ptype = &type)
				{
					fixed (byte*** pparams = &@params)
					{
						uint ret = GetPCALNative(pngPtr, infoPtr, purpose, x0, (int*)px1, (int*)ptype, nparams, units, (byte***)pparams);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetPCAL(PngStruct* pngPtr, PngInfo* infoPtr, ref byte* purpose, int* x0, ref int x1, ref int type, int* nparams, byte** units, ref byte** @params)
		{
			fixed (byte** ppurpose = &purpose)
			{
				fixed (int* px1 = &x1)
				{
					fixed (int* ptype = &type)
					{
						fixed (byte*** pparams = &@params)
						{
							uint ret = GetPCALNative(pngPtr, infoPtr, (byte**)ppurpose, x0, (int*)px1, (int*)ptype, nparams, units, (byte***)pparams);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetPCAL(PngStruct* pngPtr, PngInfo* infoPtr, byte** purpose, ref int x0, ref int x1, ref int type, int* nparams, byte** units, ref byte** @params)
		{
			fixed (int* px0 = &x0)
			{
				fixed (int* px1 = &x1)
				{
					fixed (int* ptype = &type)
					{
						fixed (byte*** pparams = &@params)
						{
							uint ret = GetPCALNative(pngPtr, infoPtr, purpose, (int*)px0, (int*)px1, (int*)ptype, nparams, units, (byte***)pparams);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetPCAL(PngStruct* pngPtr, PngInfo* infoPtr, ref byte* purpose, ref int x0, ref int x1, ref int type, int* nparams, byte** units, ref byte** @params)
		{
			fixed (byte** ppurpose = &purpose)
			{
				fixed (int* px0 = &x0)
				{
					fixed (int* px1 = &x1)
					{
						fixed (int* ptype = &type)
						{
							fixed (byte*** pparams = &@params)
							{
								uint ret = GetPCALNative(pngPtr, infoPtr, (byte**)ppurpose, (int*)px0, (int*)px1, (int*)ptype, nparams, units, (byte***)pparams);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetPCAL(PngStruct* pngPtr, PngInfo* infoPtr, byte** purpose, int* x0, int* x1, int* type, ref int nparams, byte** units, ref byte** @params)
		{
			fixed (int* pnparams = &nparams)
			{
				fixed (byte*** pparams = &@params)
				{
					uint ret = GetPCALNative(pngPtr, infoPtr, purpose, x0, x1, type, (int*)pnparams, units, (byte***)pparams);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetPCAL(PngStruct* pngPtr, PngInfo* infoPtr, ref byte* purpose, int* x0, int* x1, int* type, ref int nparams, byte** units, ref byte** @params)
		{
			fixed (byte** ppurpose = &purpose)
			{
				fixed (int* pnparams = &nparams)
				{
					fixed (byte*** pparams = &@params)
					{
						uint ret = GetPCALNative(pngPtr, infoPtr, (byte**)ppurpose, x0, x1, type, (int*)pnparams, units, (byte***)pparams);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetPCAL(PngStruct* pngPtr, PngInfo* infoPtr, byte** purpose, ref int x0, int* x1, int* type, ref int nparams, byte** units, ref byte** @params)
		{
			fixed (int* px0 = &x0)
			{
				fixed (int* pnparams = &nparams)
				{
					fixed (byte*** pparams = &@params)
					{
						uint ret = GetPCALNative(pngPtr, infoPtr, purpose, (int*)px0, x1, type, (int*)pnparams, units, (byte***)pparams);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetPCAL(PngStruct* pngPtr, PngInfo* infoPtr, ref byte* purpose, ref int x0, int* x1, int* type, ref int nparams, byte** units, ref byte** @params)
		{
			fixed (byte** ppurpose = &purpose)
			{
				fixed (int* px0 = &x0)
				{
					fixed (int* pnparams = &nparams)
					{
						fixed (byte*** pparams = &@params)
						{
							uint ret = GetPCALNative(pngPtr, infoPtr, (byte**)ppurpose, (int*)px0, x1, type, (int*)pnparams, units, (byte***)pparams);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetPCAL(PngStruct* pngPtr, PngInfo* infoPtr, byte** purpose, int* x0, ref int x1, int* type, ref int nparams, byte** units, ref byte** @params)
		{
			fixed (int* px1 = &x1)
			{
				fixed (int* pnparams = &nparams)
				{
					fixed (byte*** pparams = &@params)
					{
						uint ret = GetPCALNative(pngPtr, infoPtr, purpose, x0, (int*)px1, type, (int*)pnparams, units, (byte***)pparams);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetPCAL(PngStruct* pngPtr, PngInfo* infoPtr, ref byte* purpose, int* x0, ref int x1, int* type, ref int nparams, byte** units, ref byte** @params)
		{
			fixed (byte** ppurpose = &purpose)
			{
				fixed (int* px1 = &x1)
				{
					fixed (int* pnparams = &nparams)
					{
						fixed (byte*** pparams = &@params)
						{
							uint ret = GetPCALNative(pngPtr, infoPtr, (byte**)ppurpose, x0, (int*)px1, type, (int*)pnparams, units, (byte***)pparams);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetPCAL(PngStruct* pngPtr, PngInfo* infoPtr, byte** purpose, ref int x0, ref int x1, int* type, ref int nparams, byte** units, ref byte** @params)
		{
			fixed (int* px0 = &x0)
			{
				fixed (int* px1 = &x1)
				{
					fixed (int* pnparams = &nparams)
					{
						fixed (byte*** pparams = &@params)
						{
							uint ret = GetPCALNative(pngPtr, infoPtr, purpose, (int*)px0, (int*)px1, type, (int*)pnparams, units, (byte***)pparams);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetPCAL(PngStruct* pngPtr, PngInfo* infoPtr, ref byte* purpose, ref int x0, ref int x1, int* type, ref int nparams, byte** units, ref byte** @params)
		{
			fixed (byte** ppurpose = &purpose)
			{
				fixed (int* px0 = &x0)
				{
					fixed (int* px1 = &x1)
					{
						fixed (int* pnparams = &nparams)
						{
							fixed (byte*** pparams = &@params)
							{
								uint ret = GetPCALNative(pngPtr, infoPtr, (byte**)ppurpose, (int*)px0, (int*)px1, type, (int*)pnparams, units, (byte***)pparams);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetPCAL(PngStruct* pngPtr, PngInfo* infoPtr, byte** purpose, int* x0, int* x1, ref int type, ref int nparams, byte** units, ref byte** @params)
		{
			fixed (int* ptype = &type)
			{
				fixed (int* pnparams = &nparams)
				{
					fixed (byte*** pparams = &@params)
					{
						uint ret = GetPCALNative(pngPtr, infoPtr, purpose, x0, x1, (int*)ptype, (int*)pnparams, units, (byte***)pparams);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetPCAL(PngStruct* pngPtr, PngInfo* infoPtr, ref byte* purpose, int* x0, int* x1, ref int type, ref int nparams, byte** units, ref byte** @params)
		{
			fixed (byte** ppurpose = &purpose)
			{
				fixed (int* ptype = &type)
				{
					fixed (int* pnparams = &nparams)
					{
						fixed (byte*** pparams = &@params)
						{
							uint ret = GetPCALNative(pngPtr, infoPtr, (byte**)ppurpose, x0, x1, (int*)ptype, (int*)pnparams, units, (byte***)pparams);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetPCAL(PngStruct* pngPtr, PngInfo* infoPtr, byte** purpose, ref int x0, int* x1, ref int type, ref int nparams, byte** units, ref byte** @params)
		{
			fixed (int* px0 = &x0)
			{
				fixed (int* ptype = &type)
				{
					fixed (int* pnparams = &nparams)
					{
						fixed (byte*** pparams = &@params)
						{
							uint ret = GetPCALNative(pngPtr, infoPtr, purpose, (int*)px0, x1, (int*)ptype, (int*)pnparams, units, (byte***)pparams);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetPCAL(PngStruct* pngPtr, PngInfo* infoPtr, ref byte* purpose, ref int x0, int* x1, ref int type, ref int nparams, byte** units, ref byte** @params)
		{
			fixed (byte** ppurpose = &purpose)
			{
				fixed (int* px0 = &x0)
				{
					fixed (int* ptype = &type)
					{
						fixed (int* pnparams = &nparams)
						{
							fixed (byte*** pparams = &@params)
							{
								uint ret = GetPCALNative(pngPtr, infoPtr, (byte**)ppurpose, (int*)px0, x1, (int*)ptype, (int*)pnparams, units, (byte***)pparams);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetPCAL(PngStruct* pngPtr, PngInfo* infoPtr, byte** purpose, int* x0, ref int x1, ref int type, ref int nparams, byte** units, ref byte** @params)
		{
			fixed (int* px1 = &x1)
			{
				fixed (int* ptype = &type)
				{
					fixed (int* pnparams = &nparams)
					{
						fixed (byte*** pparams = &@params)
						{
							uint ret = GetPCALNative(pngPtr, infoPtr, purpose, x0, (int*)px1, (int*)ptype, (int*)pnparams, units, (byte***)pparams);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetPCAL(PngStruct* pngPtr, PngInfo* infoPtr, ref byte* purpose, int* x0, ref int x1, ref int type, ref int nparams, byte** units, ref byte** @params)
		{
			fixed (byte** ppurpose = &purpose)
			{
				fixed (int* px1 = &x1)
				{
					fixed (int* ptype = &type)
					{
						fixed (int* pnparams = &nparams)
						{
							fixed (byte*** pparams = &@params)
							{
								uint ret = GetPCALNative(pngPtr, infoPtr, (byte**)ppurpose, x0, (int*)px1, (int*)ptype, (int*)pnparams, units, (byte***)pparams);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetPCAL(PngStruct* pngPtr, PngInfo* infoPtr, byte** purpose, ref int x0, ref int x1, ref int type, ref int nparams, byte** units, ref byte** @params)
		{
			fixed (int* px0 = &x0)
			{
				fixed (int* px1 = &x1)
				{
					fixed (int* ptype = &type)
					{
						fixed (int* pnparams = &nparams)
						{
							fixed (byte*** pparams = &@params)
							{
								uint ret = GetPCALNative(pngPtr, infoPtr, purpose, (int*)px0, (int*)px1, (int*)ptype, (int*)pnparams, units, (byte***)pparams);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetPCAL(PngStruct* pngPtr, PngInfo* infoPtr, ref byte* purpose, ref int x0, ref int x1, ref int type, ref int nparams, byte** units, ref byte** @params)
		{
			fixed (byte** ppurpose = &purpose)
			{
				fixed (int* px0 = &x0)
				{
					fixed (int* px1 = &x1)
					{
						fixed (int* ptype = &type)
						{
							fixed (int* pnparams = &nparams)
							{
								fixed (byte*** pparams = &@params)
								{
									uint ret = GetPCALNative(pngPtr, infoPtr, (byte**)ppurpose, (int*)px0, (int*)px1, (int*)ptype, (int*)pnparams, units, (byte***)pparams);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetPCAL(PngStruct* pngPtr, PngInfo* infoPtr, byte** purpose, int* x0, int* x1, int* type, int* nparams, ref byte* units, ref byte** @params)
		{
			fixed (byte** punits = &units)
			{
				fixed (byte*** pparams = &@params)
				{
					uint ret = GetPCALNative(pngPtr, infoPtr, purpose, x0, x1, type, nparams, (byte**)punits, (byte***)pparams);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetPCAL(PngStruct* pngPtr, PngInfo* infoPtr, ref byte* purpose, int* x0, int* x1, int* type, int* nparams, ref byte* units, ref byte** @params)
		{
			fixed (byte** ppurpose = &purpose)
			{
				fixed (byte** punits = &units)
				{
					fixed (byte*** pparams = &@params)
					{
						uint ret = GetPCALNative(pngPtr, infoPtr, (byte**)ppurpose, x0, x1, type, nparams, (byte**)punits, (byte***)pparams);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetPCAL(PngStruct* pngPtr, PngInfo* infoPtr, byte** purpose, ref int x0, int* x1, int* type, int* nparams, ref byte* units, ref byte** @params)
		{
			fixed (int* px0 = &x0)
			{
				fixed (byte** punits = &units)
				{
					fixed (byte*** pparams = &@params)
					{
						uint ret = GetPCALNative(pngPtr, infoPtr, purpose, (int*)px0, x1, type, nparams, (byte**)punits, (byte***)pparams);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetPCAL(PngStruct* pngPtr, PngInfo* infoPtr, ref byte* purpose, ref int x0, int* x1, int* type, int* nparams, ref byte* units, ref byte** @params)
		{
			fixed (byte** ppurpose = &purpose)
			{
				fixed (int* px0 = &x0)
				{
					fixed (byte** punits = &units)
					{
						fixed (byte*** pparams = &@params)
						{
							uint ret = GetPCALNative(pngPtr, infoPtr, (byte**)ppurpose, (int*)px0, x1, type, nparams, (byte**)punits, (byte***)pparams);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetPCAL(PngStruct* pngPtr, PngInfo* infoPtr, byte** purpose, int* x0, ref int x1, int* type, int* nparams, ref byte* units, ref byte** @params)
		{
			fixed (int* px1 = &x1)
			{
				fixed (byte** punits = &units)
				{
					fixed (byte*** pparams = &@params)
					{
						uint ret = GetPCALNative(pngPtr, infoPtr, purpose, x0, (int*)px1, type, nparams, (byte**)punits, (byte***)pparams);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetPCAL(PngStruct* pngPtr, PngInfo* infoPtr, ref byte* purpose, int* x0, ref int x1, int* type, int* nparams, ref byte* units, ref byte** @params)
		{
			fixed (byte** ppurpose = &purpose)
			{
				fixed (int* px1 = &x1)
				{
					fixed (byte** punits = &units)
					{
						fixed (byte*** pparams = &@params)
						{
							uint ret = GetPCALNative(pngPtr, infoPtr, (byte**)ppurpose, x0, (int*)px1, type, nparams, (byte**)punits, (byte***)pparams);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetPCAL(PngStruct* pngPtr, PngInfo* infoPtr, byte** purpose, ref int x0, ref int x1, int* type, int* nparams, ref byte* units, ref byte** @params)
		{
			fixed (int* px0 = &x0)
			{
				fixed (int* px1 = &x1)
				{
					fixed (byte** punits = &units)
					{
						fixed (byte*** pparams = &@params)
						{
							uint ret = GetPCALNative(pngPtr, infoPtr, purpose, (int*)px0, (int*)px1, type, nparams, (byte**)punits, (byte***)pparams);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetPCAL(PngStruct* pngPtr, PngInfo* infoPtr, ref byte* purpose, ref int x0, ref int x1, int* type, int* nparams, ref byte* units, ref byte** @params)
		{
			fixed (byte** ppurpose = &purpose)
			{
				fixed (int* px0 = &x0)
				{
					fixed (int* px1 = &x1)
					{
						fixed (byte** punits = &units)
						{
							fixed (byte*** pparams = &@params)
							{
								uint ret = GetPCALNative(pngPtr, infoPtr, (byte**)ppurpose, (int*)px0, (int*)px1, type, nparams, (byte**)punits, (byte***)pparams);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetPCAL(PngStruct* pngPtr, PngInfo* infoPtr, byte** purpose, int* x0, int* x1, ref int type, int* nparams, ref byte* units, ref byte** @params)
		{
			fixed (int* ptype = &type)
			{
				fixed (byte** punits = &units)
				{
					fixed (byte*** pparams = &@params)
					{
						uint ret = GetPCALNative(pngPtr, infoPtr, purpose, x0, x1, (int*)ptype, nparams, (byte**)punits, (byte***)pparams);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetPCAL(PngStruct* pngPtr, PngInfo* infoPtr, ref byte* purpose, int* x0, int* x1, ref int type, int* nparams, ref byte* units, ref byte** @params)
		{
			fixed (byte** ppurpose = &purpose)
			{
				fixed (int* ptype = &type)
				{
					fixed (byte** punits = &units)
					{
						fixed (byte*** pparams = &@params)
						{
							uint ret = GetPCALNative(pngPtr, infoPtr, (byte**)ppurpose, x0, x1, (int*)ptype, nparams, (byte**)punits, (byte***)pparams);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetPCAL(PngStruct* pngPtr, PngInfo* infoPtr, byte** purpose, ref int x0, int* x1, ref int type, int* nparams, ref byte* units, ref byte** @params)
		{
			fixed (int* px0 = &x0)
			{
				fixed (int* ptype = &type)
				{
					fixed (byte** punits = &units)
					{
						fixed (byte*** pparams = &@params)
						{
							uint ret = GetPCALNative(pngPtr, infoPtr, purpose, (int*)px0, x1, (int*)ptype, nparams, (byte**)punits, (byte***)pparams);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetPCAL(PngStruct* pngPtr, PngInfo* infoPtr, ref byte* purpose, ref int x0, int* x1, ref int type, int* nparams, ref byte* units, ref byte** @params)
		{
			fixed (byte** ppurpose = &purpose)
			{
				fixed (int* px0 = &x0)
				{
					fixed (int* ptype = &type)
					{
						fixed (byte** punits = &units)
						{
							fixed (byte*** pparams = &@params)
							{
								uint ret = GetPCALNative(pngPtr, infoPtr, (byte**)ppurpose, (int*)px0, x1, (int*)ptype, nparams, (byte**)punits, (byte***)pparams);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetPCAL(PngStruct* pngPtr, PngInfo* infoPtr, byte** purpose, int* x0, ref int x1, ref int type, int* nparams, ref byte* units, ref byte** @params)
		{
			fixed (int* px1 = &x1)
			{
				fixed (int* ptype = &type)
				{
					fixed (byte** punits = &units)
					{
						fixed (byte*** pparams = &@params)
						{
							uint ret = GetPCALNative(pngPtr, infoPtr, purpose, x0, (int*)px1, (int*)ptype, nparams, (byte**)punits, (byte***)pparams);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetPCAL(PngStruct* pngPtr, PngInfo* infoPtr, ref byte* purpose, int* x0, ref int x1, ref int type, int* nparams, ref byte* units, ref byte** @params)
		{
			fixed (byte** ppurpose = &purpose)
			{
				fixed (int* px1 = &x1)
				{
					fixed (int* ptype = &type)
					{
						fixed (byte** punits = &units)
						{
							fixed (byte*** pparams = &@params)
							{
								uint ret = GetPCALNative(pngPtr, infoPtr, (byte**)ppurpose, x0, (int*)px1, (int*)ptype, nparams, (byte**)punits, (byte***)pparams);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetPCAL(PngStruct* pngPtr, PngInfo* infoPtr, byte** purpose, ref int x0, ref int x1, ref int type, int* nparams, ref byte* units, ref byte** @params)
		{
			fixed (int* px0 = &x0)
			{
				fixed (int* px1 = &x1)
				{
					fixed (int* ptype = &type)
					{
						fixed (byte** punits = &units)
						{
							fixed (byte*** pparams = &@params)
							{
								uint ret = GetPCALNative(pngPtr, infoPtr, purpose, (int*)px0, (int*)px1, (int*)ptype, nparams, (byte**)punits, (byte***)pparams);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetPCAL(PngStruct* pngPtr, PngInfo* infoPtr, ref byte* purpose, ref int x0, ref int x1, ref int type, int* nparams, ref byte* units, ref byte** @params)
		{
			fixed (byte** ppurpose = &purpose)
			{
				fixed (int* px0 = &x0)
				{
					fixed (int* px1 = &x1)
					{
						fixed (int* ptype = &type)
						{
							fixed (byte** punits = &units)
							{
								fixed (byte*** pparams = &@params)
								{
									uint ret = GetPCALNative(pngPtr, infoPtr, (byte**)ppurpose, (int*)px0, (int*)px1, (int*)ptype, nparams, (byte**)punits, (byte***)pparams);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetPCAL(PngStruct* pngPtr, PngInfo* infoPtr, byte** purpose, int* x0, int* x1, int* type, ref int nparams, ref byte* units, ref byte** @params)
		{
			fixed (int* pnparams = &nparams)
			{
				fixed (byte** punits = &units)
				{
					fixed (byte*** pparams = &@params)
					{
						uint ret = GetPCALNative(pngPtr, infoPtr, purpose, x0, x1, type, (int*)pnparams, (byte**)punits, (byte***)pparams);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetPCAL(PngStruct* pngPtr, PngInfo* infoPtr, ref byte* purpose, int* x0, int* x1, int* type, ref int nparams, ref byte* units, ref byte** @params)
		{
			fixed (byte** ppurpose = &purpose)
			{
				fixed (int* pnparams = &nparams)
				{
					fixed (byte** punits = &units)
					{
						fixed (byte*** pparams = &@params)
						{
							uint ret = GetPCALNative(pngPtr, infoPtr, (byte**)ppurpose, x0, x1, type, (int*)pnparams, (byte**)punits, (byte***)pparams);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetPCAL(PngStruct* pngPtr, PngInfo* infoPtr, byte** purpose, ref int x0, int* x1, int* type, ref int nparams, ref byte* units, ref byte** @params)
		{
			fixed (int* px0 = &x0)
			{
				fixed (int* pnparams = &nparams)
				{
					fixed (byte** punits = &units)
					{
						fixed (byte*** pparams = &@params)
						{
							uint ret = GetPCALNative(pngPtr, infoPtr, purpose, (int*)px0, x1, type, (int*)pnparams, (byte**)punits, (byte***)pparams);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetPCAL(PngStruct* pngPtr, PngInfo* infoPtr, ref byte* purpose, ref int x0, int* x1, int* type, ref int nparams, ref byte* units, ref byte** @params)
		{
			fixed (byte** ppurpose = &purpose)
			{
				fixed (int* px0 = &x0)
				{
					fixed (int* pnparams = &nparams)
					{
						fixed (byte** punits = &units)
						{
							fixed (byte*** pparams = &@params)
							{
								uint ret = GetPCALNative(pngPtr, infoPtr, (byte**)ppurpose, (int*)px0, x1, type, (int*)pnparams, (byte**)punits, (byte***)pparams);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetPCAL(PngStruct* pngPtr, PngInfo* infoPtr, byte** purpose, int* x0, ref int x1, int* type, ref int nparams, ref byte* units, ref byte** @params)
		{
			fixed (int* px1 = &x1)
			{
				fixed (int* pnparams = &nparams)
				{
					fixed (byte** punits = &units)
					{
						fixed (byte*** pparams = &@params)
						{
							uint ret = GetPCALNative(pngPtr, infoPtr, purpose, x0, (int*)px1, type, (int*)pnparams, (byte**)punits, (byte***)pparams);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetPCAL(PngStruct* pngPtr, PngInfo* infoPtr, ref byte* purpose, int* x0, ref int x1, int* type, ref int nparams, ref byte* units, ref byte** @params)
		{
			fixed (byte** ppurpose = &purpose)
			{
				fixed (int* px1 = &x1)
				{
					fixed (int* pnparams = &nparams)
					{
						fixed (byte** punits = &units)
						{
							fixed (byte*** pparams = &@params)
							{
								uint ret = GetPCALNative(pngPtr, infoPtr, (byte**)ppurpose, x0, (int*)px1, type, (int*)pnparams, (byte**)punits, (byte***)pparams);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetPCAL(PngStruct* pngPtr, PngInfo* infoPtr, byte** purpose, ref int x0, ref int x1, int* type, ref int nparams, ref byte* units, ref byte** @params)
		{
			fixed (int* px0 = &x0)
			{
				fixed (int* px1 = &x1)
				{
					fixed (int* pnparams = &nparams)
					{
						fixed (byte** punits = &units)
						{
							fixed (byte*** pparams = &@params)
							{
								uint ret = GetPCALNative(pngPtr, infoPtr, purpose, (int*)px0, (int*)px1, type, (int*)pnparams, (byte**)punits, (byte***)pparams);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetPCAL(PngStruct* pngPtr, PngInfo* infoPtr, ref byte* purpose, ref int x0, ref int x1, int* type, ref int nparams, ref byte* units, ref byte** @params)
		{
			fixed (byte** ppurpose = &purpose)
			{
				fixed (int* px0 = &x0)
				{
					fixed (int* px1 = &x1)
					{
						fixed (int* pnparams = &nparams)
						{
							fixed (byte** punits = &units)
							{
								fixed (byte*** pparams = &@params)
								{
									uint ret = GetPCALNative(pngPtr, infoPtr, (byte**)ppurpose, (int*)px0, (int*)px1, type, (int*)pnparams, (byte**)punits, (byte***)pparams);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetPCAL(PngStruct* pngPtr, PngInfo* infoPtr, byte** purpose, int* x0, int* x1, ref int type, ref int nparams, ref byte* units, ref byte** @params)
		{
			fixed (int* ptype = &type)
			{
				fixed (int* pnparams = &nparams)
				{
					fixed (byte** punits = &units)
					{
						fixed (byte*** pparams = &@params)
						{
							uint ret = GetPCALNative(pngPtr, infoPtr, purpose, x0, x1, (int*)ptype, (int*)pnparams, (byte**)punits, (byte***)pparams);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetPCAL(PngStruct* pngPtr, PngInfo* infoPtr, ref byte* purpose, int* x0, int* x1, ref int type, ref int nparams, ref byte* units, ref byte** @params)
		{
			fixed (byte** ppurpose = &purpose)
			{
				fixed (int* ptype = &type)
				{
					fixed (int* pnparams = &nparams)
					{
						fixed (byte** punits = &units)
						{
							fixed (byte*** pparams = &@params)
							{
								uint ret = GetPCALNative(pngPtr, infoPtr, (byte**)ppurpose, x0, x1, (int*)ptype, (int*)pnparams, (byte**)punits, (byte***)pparams);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetPCAL(PngStruct* pngPtr, PngInfo* infoPtr, byte** purpose, ref int x0, int* x1, ref int type, ref int nparams, ref byte* units, ref byte** @params)
		{
			fixed (int* px0 = &x0)
			{
				fixed (int* ptype = &type)
				{
					fixed (int* pnparams = &nparams)
					{
						fixed (byte** punits = &units)
						{
							fixed (byte*** pparams = &@params)
							{
								uint ret = GetPCALNative(pngPtr, infoPtr, purpose, (int*)px0, x1, (int*)ptype, (int*)pnparams, (byte**)punits, (byte***)pparams);
								return ret;
							}
						}
					}
				}
			}
		}
	}
}
