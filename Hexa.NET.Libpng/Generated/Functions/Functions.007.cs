// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;
using Hexa.NET.ZLib;

namespace Hexa.NET.Libpng
{
	public unsafe partial class Libpng
	{

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCHRMXYZFixed(PngStruct* pngPtr, PngInfo* infoPtr, ref int intRedX, int* intRedY, ref int intRedZ, ref int intGreenX, ref int intGreenY, ref int intGreenZ, ref int intBlueX, int* intBlueY, ref int intBlueZ)
		{
			fixed (int* pintRedX = &intRedX)
			{
				fixed (int* pintRedZ = &intRedZ)
				{
					fixed (int* pintGreenX = &intGreenX)
					{
						fixed (int* pintGreenY = &intGreenY)
						{
							fixed (int* pintGreenZ = &intGreenZ)
							{
								fixed (int* pintBlueX = &intBlueX)
								{
									fixed (int* pintBlueZ = &intBlueZ)
									{
										uint ret = GetCHRMXYZFixedNative(pngPtr, infoPtr, (int*)pintRedX, intRedY, (int*)pintRedZ, (int*)pintGreenX, (int*)pintGreenY, (int*)pintGreenZ, (int*)pintBlueX, intBlueY, (int*)pintBlueZ);
										return ret;
									}
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCHRMXYZFixed(PngStruct* pngPtr, PngInfo* infoPtr, int* intRedX, ref int intRedY, ref int intRedZ, ref int intGreenX, ref int intGreenY, ref int intGreenZ, ref int intBlueX, int* intBlueY, ref int intBlueZ)
		{
			fixed (int* pintRedY = &intRedY)
			{
				fixed (int* pintRedZ = &intRedZ)
				{
					fixed (int* pintGreenX = &intGreenX)
					{
						fixed (int* pintGreenY = &intGreenY)
						{
							fixed (int* pintGreenZ = &intGreenZ)
							{
								fixed (int* pintBlueX = &intBlueX)
								{
									fixed (int* pintBlueZ = &intBlueZ)
									{
										uint ret = GetCHRMXYZFixedNative(pngPtr, infoPtr, intRedX, (int*)pintRedY, (int*)pintRedZ, (int*)pintGreenX, (int*)pintGreenY, (int*)pintGreenZ, (int*)pintBlueX, intBlueY, (int*)pintBlueZ);
										return ret;
									}
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCHRMXYZFixed(PngStruct* pngPtr, PngInfo* infoPtr, ref int intRedX, ref int intRedY, ref int intRedZ, ref int intGreenX, ref int intGreenY, ref int intGreenZ, ref int intBlueX, int* intBlueY, ref int intBlueZ)
		{
			fixed (int* pintRedX = &intRedX)
			{
				fixed (int* pintRedY = &intRedY)
				{
					fixed (int* pintRedZ = &intRedZ)
					{
						fixed (int* pintGreenX = &intGreenX)
						{
							fixed (int* pintGreenY = &intGreenY)
							{
								fixed (int* pintGreenZ = &intGreenZ)
								{
									fixed (int* pintBlueX = &intBlueX)
									{
										fixed (int* pintBlueZ = &intBlueZ)
										{
											uint ret = GetCHRMXYZFixedNative(pngPtr, infoPtr, (int*)pintRedX, (int*)pintRedY, (int*)pintRedZ, (int*)pintGreenX, (int*)pintGreenY, (int*)pintGreenZ, (int*)pintBlueX, intBlueY, (int*)pintBlueZ);
											return ret;
										}
									}
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCHRMXYZFixed(PngStruct* pngPtr, PngInfo* infoPtr, int* intRedX, int* intRedY, int* intRedZ, int* intGreenX, int* intGreenY, int* intGreenZ, int* intBlueX, ref int intBlueY, ref int intBlueZ)
		{
			fixed (int* pintBlueY = &intBlueY)
			{
				fixed (int* pintBlueZ = &intBlueZ)
				{
					uint ret = GetCHRMXYZFixedNative(pngPtr, infoPtr, intRedX, intRedY, intRedZ, intGreenX, intGreenY, intGreenZ, intBlueX, (int*)pintBlueY, (int*)pintBlueZ);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCHRMXYZFixed(PngStruct* pngPtr, PngInfo* infoPtr, ref int intRedX, int* intRedY, int* intRedZ, int* intGreenX, int* intGreenY, int* intGreenZ, int* intBlueX, ref int intBlueY, ref int intBlueZ)
		{
			fixed (int* pintRedX = &intRedX)
			{
				fixed (int* pintBlueY = &intBlueY)
				{
					fixed (int* pintBlueZ = &intBlueZ)
					{
						uint ret = GetCHRMXYZFixedNative(pngPtr, infoPtr, (int*)pintRedX, intRedY, intRedZ, intGreenX, intGreenY, intGreenZ, intBlueX, (int*)pintBlueY, (int*)pintBlueZ);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCHRMXYZFixed(PngStruct* pngPtr, PngInfo* infoPtr, int* intRedX, ref int intRedY, int* intRedZ, int* intGreenX, int* intGreenY, int* intGreenZ, int* intBlueX, ref int intBlueY, ref int intBlueZ)
		{
			fixed (int* pintRedY = &intRedY)
			{
				fixed (int* pintBlueY = &intBlueY)
				{
					fixed (int* pintBlueZ = &intBlueZ)
					{
						uint ret = GetCHRMXYZFixedNative(pngPtr, infoPtr, intRedX, (int*)pintRedY, intRedZ, intGreenX, intGreenY, intGreenZ, intBlueX, (int*)pintBlueY, (int*)pintBlueZ);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCHRMXYZFixed(PngStruct* pngPtr, PngInfo* infoPtr, ref int intRedX, ref int intRedY, int* intRedZ, int* intGreenX, int* intGreenY, int* intGreenZ, int* intBlueX, ref int intBlueY, ref int intBlueZ)
		{
			fixed (int* pintRedX = &intRedX)
			{
				fixed (int* pintRedY = &intRedY)
				{
					fixed (int* pintBlueY = &intBlueY)
					{
						fixed (int* pintBlueZ = &intBlueZ)
						{
							uint ret = GetCHRMXYZFixedNative(pngPtr, infoPtr, (int*)pintRedX, (int*)pintRedY, intRedZ, intGreenX, intGreenY, intGreenZ, intBlueX, (int*)pintBlueY, (int*)pintBlueZ);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCHRMXYZFixed(PngStruct* pngPtr, PngInfo* infoPtr, int* intRedX, int* intRedY, ref int intRedZ, int* intGreenX, int* intGreenY, int* intGreenZ, int* intBlueX, ref int intBlueY, ref int intBlueZ)
		{
			fixed (int* pintRedZ = &intRedZ)
			{
				fixed (int* pintBlueY = &intBlueY)
				{
					fixed (int* pintBlueZ = &intBlueZ)
					{
						uint ret = GetCHRMXYZFixedNative(pngPtr, infoPtr, intRedX, intRedY, (int*)pintRedZ, intGreenX, intGreenY, intGreenZ, intBlueX, (int*)pintBlueY, (int*)pintBlueZ);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCHRMXYZFixed(PngStruct* pngPtr, PngInfo* infoPtr, ref int intRedX, int* intRedY, ref int intRedZ, int* intGreenX, int* intGreenY, int* intGreenZ, int* intBlueX, ref int intBlueY, ref int intBlueZ)
		{
			fixed (int* pintRedX = &intRedX)
			{
				fixed (int* pintRedZ = &intRedZ)
				{
					fixed (int* pintBlueY = &intBlueY)
					{
						fixed (int* pintBlueZ = &intBlueZ)
						{
							uint ret = GetCHRMXYZFixedNative(pngPtr, infoPtr, (int*)pintRedX, intRedY, (int*)pintRedZ, intGreenX, intGreenY, intGreenZ, intBlueX, (int*)pintBlueY, (int*)pintBlueZ);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCHRMXYZFixed(PngStruct* pngPtr, PngInfo* infoPtr, int* intRedX, ref int intRedY, ref int intRedZ, int* intGreenX, int* intGreenY, int* intGreenZ, int* intBlueX, ref int intBlueY, ref int intBlueZ)
		{
			fixed (int* pintRedY = &intRedY)
			{
				fixed (int* pintRedZ = &intRedZ)
				{
					fixed (int* pintBlueY = &intBlueY)
					{
						fixed (int* pintBlueZ = &intBlueZ)
						{
							uint ret = GetCHRMXYZFixedNative(pngPtr, infoPtr, intRedX, (int*)pintRedY, (int*)pintRedZ, intGreenX, intGreenY, intGreenZ, intBlueX, (int*)pintBlueY, (int*)pintBlueZ);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCHRMXYZFixed(PngStruct* pngPtr, PngInfo* infoPtr, ref int intRedX, ref int intRedY, ref int intRedZ, int* intGreenX, int* intGreenY, int* intGreenZ, int* intBlueX, ref int intBlueY, ref int intBlueZ)
		{
			fixed (int* pintRedX = &intRedX)
			{
				fixed (int* pintRedY = &intRedY)
				{
					fixed (int* pintRedZ = &intRedZ)
					{
						fixed (int* pintBlueY = &intBlueY)
						{
							fixed (int* pintBlueZ = &intBlueZ)
							{
								uint ret = GetCHRMXYZFixedNative(pngPtr, infoPtr, (int*)pintRedX, (int*)pintRedY, (int*)pintRedZ, intGreenX, intGreenY, intGreenZ, intBlueX, (int*)pintBlueY, (int*)pintBlueZ);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCHRMXYZFixed(PngStruct* pngPtr, PngInfo* infoPtr, int* intRedX, int* intRedY, int* intRedZ, ref int intGreenX, int* intGreenY, int* intGreenZ, int* intBlueX, ref int intBlueY, ref int intBlueZ)
		{
			fixed (int* pintGreenX = &intGreenX)
			{
				fixed (int* pintBlueY = &intBlueY)
				{
					fixed (int* pintBlueZ = &intBlueZ)
					{
						uint ret = GetCHRMXYZFixedNative(pngPtr, infoPtr, intRedX, intRedY, intRedZ, (int*)pintGreenX, intGreenY, intGreenZ, intBlueX, (int*)pintBlueY, (int*)pintBlueZ);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCHRMXYZFixed(PngStruct* pngPtr, PngInfo* infoPtr, ref int intRedX, int* intRedY, int* intRedZ, ref int intGreenX, int* intGreenY, int* intGreenZ, int* intBlueX, ref int intBlueY, ref int intBlueZ)
		{
			fixed (int* pintRedX = &intRedX)
			{
				fixed (int* pintGreenX = &intGreenX)
				{
					fixed (int* pintBlueY = &intBlueY)
					{
						fixed (int* pintBlueZ = &intBlueZ)
						{
							uint ret = GetCHRMXYZFixedNative(pngPtr, infoPtr, (int*)pintRedX, intRedY, intRedZ, (int*)pintGreenX, intGreenY, intGreenZ, intBlueX, (int*)pintBlueY, (int*)pintBlueZ);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCHRMXYZFixed(PngStruct* pngPtr, PngInfo* infoPtr, int* intRedX, ref int intRedY, int* intRedZ, ref int intGreenX, int* intGreenY, int* intGreenZ, int* intBlueX, ref int intBlueY, ref int intBlueZ)
		{
			fixed (int* pintRedY = &intRedY)
			{
				fixed (int* pintGreenX = &intGreenX)
				{
					fixed (int* pintBlueY = &intBlueY)
					{
						fixed (int* pintBlueZ = &intBlueZ)
						{
							uint ret = GetCHRMXYZFixedNative(pngPtr, infoPtr, intRedX, (int*)pintRedY, intRedZ, (int*)pintGreenX, intGreenY, intGreenZ, intBlueX, (int*)pintBlueY, (int*)pintBlueZ);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCHRMXYZFixed(PngStruct* pngPtr, PngInfo* infoPtr, ref int intRedX, ref int intRedY, int* intRedZ, ref int intGreenX, int* intGreenY, int* intGreenZ, int* intBlueX, ref int intBlueY, ref int intBlueZ)
		{
			fixed (int* pintRedX = &intRedX)
			{
				fixed (int* pintRedY = &intRedY)
				{
					fixed (int* pintGreenX = &intGreenX)
					{
						fixed (int* pintBlueY = &intBlueY)
						{
							fixed (int* pintBlueZ = &intBlueZ)
							{
								uint ret = GetCHRMXYZFixedNative(pngPtr, infoPtr, (int*)pintRedX, (int*)pintRedY, intRedZ, (int*)pintGreenX, intGreenY, intGreenZ, intBlueX, (int*)pintBlueY, (int*)pintBlueZ);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCHRMXYZFixed(PngStruct* pngPtr, PngInfo* infoPtr, int* intRedX, int* intRedY, ref int intRedZ, ref int intGreenX, int* intGreenY, int* intGreenZ, int* intBlueX, ref int intBlueY, ref int intBlueZ)
		{
			fixed (int* pintRedZ = &intRedZ)
			{
				fixed (int* pintGreenX = &intGreenX)
				{
					fixed (int* pintBlueY = &intBlueY)
					{
						fixed (int* pintBlueZ = &intBlueZ)
						{
							uint ret = GetCHRMXYZFixedNative(pngPtr, infoPtr, intRedX, intRedY, (int*)pintRedZ, (int*)pintGreenX, intGreenY, intGreenZ, intBlueX, (int*)pintBlueY, (int*)pintBlueZ);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCHRMXYZFixed(PngStruct* pngPtr, PngInfo* infoPtr, ref int intRedX, int* intRedY, ref int intRedZ, ref int intGreenX, int* intGreenY, int* intGreenZ, int* intBlueX, ref int intBlueY, ref int intBlueZ)
		{
			fixed (int* pintRedX = &intRedX)
			{
				fixed (int* pintRedZ = &intRedZ)
				{
					fixed (int* pintGreenX = &intGreenX)
					{
						fixed (int* pintBlueY = &intBlueY)
						{
							fixed (int* pintBlueZ = &intBlueZ)
							{
								uint ret = GetCHRMXYZFixedNative(pngPtr, infoPtr, (int*)pintRedX, intRedY, (int*)pintRedZ, (int*)pintGreenX, intGreenY, intGreenZ, intBlueX, (int*)pintBlueY, (int*)pintBlueZ);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCHRMXYZFixed(PngStruct* pngPtr, PngInfo* infoPtr, int* intRedX, ref int intRedY, ref int intRedZ, ref int intGreenX, int* intGreenY, int* intGreenZ, int* intBlueX, ref int intBlueY, ref int intBlueZ)
		{
			fixed (int* pintRedY = &intRedY)
			{
				fixed (int* pintRedZ = &intRedZ)
				{
					fixed (int* pintGreenX = &intGreenX)
					{
						fixed (int* pintBlueY = &intBlueY)
						{
							fixed (int* pintBlueZ = &intBlueZ)
							{
								uint ret = GetCHRMXYZFixedNative(pngPtr, infoPtr, intRedX, (int*)pintRedY, (int*)pintRedZ, (int*)pintGreenX, intGreenY, intGreenZ, intBlueX, (int*)pintBlueY, (int*)pintBlueZ);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCHRMXYZFixed(PngStruct* pngPtr, PngInfo* infoPtr, ref int intRedX, ref int intRedY, ref int intRedZ, ref int intGreenX, int* intGreenY, int* intGreenZ, int* intBlueX, ref int intBlueY, ref int intBlueZ)
		{
			fixed (int* pintRedX = &intRedX)
			{
				fixed (int* pintRedY = &intRedY)
				{
					fixed (int* pintRedZ = &intRedZ)
					{
						fixed (int* pintGreenX = &intGreenX)
						{
							fixed (int* pintBlueY = &intBlueY)
							{
								fixed (int* pintBlueZ = &intBlueZ)
								{
									uint ret = GetCHRMXYZFixedNative(pngPtr, infoPtr, (int*)pintRedX, (int*)pintRedY, (int*)pintRedZ, (int*)pintGreenX, intGreenY, intGreenZ, intBlueX, (int*)pintBlueY, (int*)pintBlueZ);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCHRMXYZFixed(PngStruct* pngPtr, PngInfo* infoPtr, int* intRedX, int* intRedY, int* intRedZ, int* intGreenX, ref int intGreenY, int* intGreenZ, int* intBlueX, ref int intBlueY, ref int intBlueZ)
		{
			fixed (int* pintGreenY = &intGreenY)
			{
				fixed (int* pintBlueY = &intBlueY)
				{
					fixed (int* pintBlueZ = &intBlueZ)
					{
						uint ret = GetCHRMXYZFixedNative(pngPtr, infoPtr, intRedX, intRedY, intRedZ, intGreenX, (int*)pintGreenY, intGreenZ, intBlueX, (int*)pintBlueY, (int*)pintBlueZ);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCHRMXYZFixed(PngStruct* pngPtr, PngInfo* infoPtr, ref int intRedX, int* intRedY, int* intRedZ, int* intGreenX, ref int intGreenY, int* intGreenZ, int* intBlueX, ref int intBlueY, ref int intBlueZ)
		{
			fixed (int* pintRedX = &intRedX)
			{
				fixed (int* pintGreenY = &intGreenY)
				{
					fixed (int* pintBlueY = &intBlueY)
					{
						fixed (int* pintBlueZ = &intBlueZ)
						{
							uint ret = GetCHRMXYZFixedNative(pngPtr, infoPtr, (int*)pintRedX, intRedY, intRedZ, intGreenX, (int*)pintGreenY, intGreenZ, intBlueX, (int*)pintBlueY, (int*)pintBlueZ);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCHRMXYZFixed(PngStruct* pngPtr, PngInfo* infoPtr, int* intRedX, ref int intRedY, int* intRedZ, int* intGreenX, ref int intGreenY, int* intGreenZ, int* intBlueX, ref int intBlueY, ref int intBlueZ)
		{
			fixed (int* pintRedY = &intRedY)
			{
				fixed (int* pintGreenY = &intGreenY)
				{
					fixed (int* pintBlueY = &intBlueY)
					{
						fixed (int* pintBlueZ = &intBlueZ)
						{
							uint ret = GetCHRMXYZFixedNative(pngPtr, infoPtr, intRedX, (int*)pintRedY, intRedZ, intGreenX, (int*)pintGreenY, intGreenZ, intBlueX, (int*)pintBlueY, (int*)pintBlueZ);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCHRMXYZFixed(PngStruct* pngPtr, PngInfo* infoPtr, ref int intRedX, ref int intRedY, int* intRedZ, int* intGreenX, ref int intGreenY, int* intGreenZ, int* intBlueX, ref int intBlueY, ref int intBlueZ)
		{
			fixed (int* pintRedX = &intRedX)
			{
				fixed (int* pintRedY = &intRedY)
				{
					fixed (int* pintGreenY = &intGreenY)
					{
						fixed (int* pintBlueY = &intBlueY)
						{
							fixed (int* pintBlueZ = &intBlueZ)
							{
								uint ret = GetCHRMXYZFixedNative(pngPtr, infoPtr, (int*)pintRedX, (int*)pintRedY, intRedZ, intGreenX, (int*)pintGreenY, intGreenZ, intBlueX, (int*)pintBlueY, (int*)pintBlueZ);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCHRMXYZFixed(PngStruct* pngPtr, PngInfo* infoPtr, int* intRedX, int* intRedY, ref int intRedZ, int* intGreenX, ref int intGreenY, int* intGreenZ, int* intBlueX, ref int intBlueY, ref int intBlueZ)
		{
			fixed (int* pintRedZ = &intRedZ)
			{
				fixed (int* pintGreenY = &intGreenY)
				{
					fixed (int* pintBlueY = &intBlueY)
					{
						fixed (int* pintBlueZ = &intBlueZ)
						{
							uint ret = GetCHRMXYZFixedNative(pngPtr, infoPtr, intRedX, intRedY, (int*)pintRedZ, intGreenX, (int*)pintGreenY, intGreenZ, intBlueX, (int*)pintBlueY, (int*)pintBlueZ);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCHRMXYZFixed(PngStruct* pngPtr, PngInfo* infoPtr, ref int intRedX, int* intRedY, ref int intRedZ, int* intGreenX, ref int intGreenY, int* intGreenZ, int* intBlueX, ref int intBlueY, ref int intBlueZ)
		{
			fixed (int* pintRedX = &intRedX)
			{
				fixed (int* pintRedZ = &intRedZ)
				{
					fixed (int* pintGreenY = &intGreenY)
					{
						fixed (int* pintBlueY = &intBlueY)
						{
							fixed (int* pintBlueZ = &intBlueZ)
							{
								uint ret = GetCHRMXYZFixedNative(pngPtr, infoPtr, (int*)pintRedX, intRedY, (int*)pintRedZ, intGreenX, (int*)pintGreenY, intGreenZ, intBlueX, (int*)pintBlueY, (int*)pintBlueZ);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCHRMXYZFixed(PngStruct* pngPtr, PngInfo* infoPtr, int* intRedX, ref int intRedY, ref int intRedZ, int* intGreenX, ref int intGreenY, int* intGreenZ, int* intBlueX, ref int intBlueY, ref int intBlueZ)
		{
			fixed (int* pintRedY = &intRedY)
			{
				fixed (int* pintRedZ = &intRedZ)
				{
					fixed (int* pintGreenY = &intGreenY)
					{
						fixed (int* pintBlueY = &intBlueY)
						{
							fixed (int* pintBlueZ = &intBlueZ)
							{
								uint ret = GetCHRMXYZFixedNative(pngPtr, infoPtr, intRedX, (int*)pintRedY, (int*)pintRedZ, intGreenX, (int*)pintGreenY, intGreenZ, intBlueX, (int*)pintBlueY, (int*)pintBlueZ);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCHRMXYZFixed(PngStruct* pngPtr, PngInfo* infoPtr, ref int intRedX, ref int intRedY, ref int intRedZ, int* intGreenX, ref int intGreenY, int* intGreenZ, int* intBlueX, ref int intBlueY, ref int intBlueZ)
		{
			fixed (int* pintRedX = &intRedX)
			{
				fixed (int* pintRedY = &intRedY)
				{
					fixed (int* pintRedZ = &intRedZ)
					{
						fixed (int* pintGreenY = &intGreenY)
						{
							fixed (int* pintBlueY = &intBlueY)
							{
								fixed (int* pintBlueZ = &intBlueZ)
								{
									uint ret = GetCHRMXYZFixedNative(pngPtr, infoPtr, (int*)pintRedX, (int*)pintRedY, (int*)pintRedZ, intGreenX, (int*)pintGreenY, intGreenZ, intBlueX, (int*)pintBlueY, (int*)pintBlueZ);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCHRMXYZFixed(PngStruct* pngPtr, PngInfo* infoPtr, int* intRedX, int* intRedY, int* intRedZ, ref int intGreenX, ref int intGreenY, int* intGreenZ, int* intBlueX, ref int intBlueY, ref int intBlueZ)
		{
			fixed (int* pintGreenX = &intGreenX)
			{
				fixed (int* pintGreenY = &intGreenY)
				{
					fixed (int* pintBlueY = &intBlueY)
					{
						fixed (int* pintBlueZ = &intBlueZ)
						{
							uint ret = GetCHRMXYZFixedNative(pngPtr, infoPtr, intRedX, intRedY, intRedZ, (int*)pintGreenX, (int*)pintGreenY, intGreenZ, intBlueX, (int*)pintBlueY, (int*)pintBlueZ);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCHRMXYZFixed(PngStruct* pngPtr, PngInfo* infoPtr, ref int intRedX, int* intRedY, int* intRedZ, ref int intGreenX, ref int intGreenY, int* intGreenZ, int* intBlueX, ref int intBlueY, ref int intBlueZ)
		{
			fixed (int* pintRedX = &intRedX)
			{
				fixed (int* pintGreenX = &intGreenX)
				{
					fixed (int* pintGreenY = &intGreenY)
					{
						fixed (int* pintBlueY = &intBlueY)
						{
							fixed (int* pintBlueZ = &intBlueZ)
							{
								uint ret = GetCHRMXYZFixedNative(pngPtr, infoPtr, (int*)pintRedX, intRedY, intRedZ, (int*)pintGreenX, (int*)pintGreenY, intGreenZ, intBlueX, (int*)pintBlueY, (int*)pintBlueZ);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCHRMXYZFixed(PngStruct* pngPtr, PngInfo* infoPtr, int* intRedX, ref int intRedY, int* intRedZ, ref int intGreenX, ref int intGreenY, int* intGreenZ, int* intBlueX, ref int intBlueY, ref int intBlueZ)
		{
			fixed (int* pintRedY = &intRedY)
			{
				fixed (int* pintGreenX = &intGreenX)
				{
					fixed (int* pintGreenY = &intGreenY)
					{
						fixed (int* pintBlueY = &intBlueY)
						{
							fixed (int* pintBlueZ = &intBlueZ)
							{
								uint ret = GetCHRMXYZFixedNative(pngPtr, infoPtr, intRedX, (int*)pintRedY, intRedZ, (int*)pintGreenX, (int*)pintGreenY, intGreenZ, intBlueX, (int*)pintBlueY, (int*)pintBlueZ);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCHRMXYZFixed(PngStruct* pngPtr, PngInfo* infoPtr, ref int intRedX, ref int intRedY, int* intRedZ, ref int intGreenX, ref int intGreenY, int* intGreenZ, int* intBlueX, ref int intBlueY, ref int intBlueZ)
		{
			fixed (int* pintRedX = &intRedX)
			{
				fixed (int* pintRedY = &intRedY)
				{
					fixed (int* pintGreenX = &intGreenX)
					{
						fixed (int* pintGreenY = &intGreenY)
						{
							fixed (int* pintBlueY = &intBlueY)
							{
								fixed (int* pintBlueZ = &intBlueZ)
								{
									uint ret = GetCHRMXYZFixedNative(pngPtr, infoPtr, (int*)pintRedX, (int*)pintRedY, intRedZ, (int*)pintGreenX, (int*)pintGreenY, intGreenZ, intBlueX, (int*)pintBlueY, (int*)pintBlueZ);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCHRMXYZFixed(PngStruct* pngPtr, PngInfo* infoPtr, int* intRedX, int* intRedY, ref int intRedZ, ref int intGreenX, ref int intGreenY, int* intGreenZ, int* intBlueX, ref int intBlueY, ref int intBlueZ)
		{
			fixed (int* pintRedZ = &intRedZ)
			{
				fixed (int* pintGreenX = &intGreenX)
				{
					fixed (int* pintGreenY = &intGreenY)
					{
						fixed (int* pintBlueY = &intBlueY)
						{
							fixed (int* pintBlueZ = &intBlueZ)
							{
								uint ret = GetCHRMXYZFixedNative(pngPtr, infoPtr, intRedX, intRedY, (int*)pintRedZ, (int*)pintGreenX, (int*)pintGreenY, intGreenZ, intBlueX, (int*)pintBlueY, (int*)pintBlueZ);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCHRMXYZFixed(PngStruct* pngPtr, PngInfo* infoPtr, ref int intRedX, int* intRedY, ref int intRedZ, ref int intGreenX, ref int intGreenY, int* intGreenZ, int* intBlueX, ref int intBlueY, ref int intBlueZ)
		{
			fixed (int* pintRedX = &intRedX)
			{
				fixed (int* pintRedZ = &intRedZ)
				{
					fixed (int* pintGreenX = &intGreenX)
					{
						fixed (int* pintGreenY = &intGreenY)
						{
							fixed (int* pintBlueY = &intBlueY)
							{
								fixed (int* pintBlueZ = &intBlueZ)
								{
									uint ret = GetCHRMXYZFixedNative(pngPtr, infoPtr, (int*)pintRedX, intRedY, (int*)pintRedZ, (int*)pintGreenX, (int*)pintGreenY, intGreenZ, intBlueX, (int*)pintBlueY, (int*)pintBlueZ);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCHRMXYZFixed(PngStruct* pngPtr, PngInfo* infoPtr, int* intRedX, ref int intRedY, ref int intRedZ, ref int intGreenX, ref int intGreenY, int* intGreenZ, int* intBlueX, ref int intBlueY, ref int intBlueZ)
		{
			fixed (int* pintRedY = &intRedY)
			{
				fixed (int* pintRedZ = &intRedZ)
				{
					fixed (int* pintGreenX = &intGreenX)
					{
						fixed (int* pintGreenY = &intGreenY)
						{
							fixed (int* pintBlueY = &intBlueY)
							{
								fixed (int* pintBlueZ = &intBlueZ)
								{
									uint ret = GetCHRMXYZFixedNative(pngPtr, infoPtr, intRedX, (int*)pintRedY, (int*)pintRedZ, (int*)pintGreenX, (int*)pintGreenY, intGreenZ, intBlueX, (int*)pintBlueY, (int*)pintBlueZ);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCHRMXYZFixed(PngStruct* pngPtr, PngInfo* infoPtr, ref int intRedX, ref int intRedY, ref int intRedZ, ref int intGreenX, ref int intGreenY, int* intGreenZ, int* intBlueX, ref int intBlueY, ref int intBlueZ)
		{
			fixed (int* pintRedX = &intRedX)
			{
				fixed (int* pintRedY = &intRedY)
				{
					fixed (int* pintRedZ = &intRedZ)
					{
						fixed (int* pintGreenX = &intGreenX)
						{
							fixed (int* pintGreenY = &intGreenY)
							{
								fixed (int* pintBlueY = &intBlueY)
								{
									fixed (int* pintBlueZ = &intBlueZ)
									{
										uint ret = GetCHRMXYZFixedNative(pngPtr, infoPtr, (int*)pintRedX, (int*)pintRedY, (int*)pintRedZ, (int*)pintGreenX, (int*)pintGreenY, intGreenZ, intBlueX, (int*)pintBlueY, (int*)pintBlueZ);
										return ret;
									}
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCHRMXYZFixed(PngStruct* pngPtr, PngInfo* infoPtr, int* intRedX, int* intRedY, int* intRedZ, int* intGreenX, int* intGreenY, ref int intGreenZ, int* intBlueX, ref int intBlueY, ref int intBlueZ)
		{
			fixed (int* pintGreenZ = &intGreenZ)
			{
				fixed (int* pintBlueY = &intBlueY)
				{
					fixed (int* pintBlueZ = &intBlueZ)
					{
						uint ret = GetCHRMXYZFixedNative(pngPtr, infoPtr, intRedX, intRedY, intRedZ, intGreenX, intGreenY, (int*)pintGreenZ, intBlueX, (int*)pintBlueY, (int*)pintBlueZ);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCHRMXYZFixed(PngStruct* pngPtr, PngInfo* infoPtr, ref int intRedX, int* intRedY, int* intRedZ, int* intGreenX, int* intGreenY, ref int intGreenZ, int* intBlueX, ref int intBlueY, ref int intBlueZ)
		{
			fixed (int* pintRedX = &intRedX)
			{
				fixed (int* pintGreenZ = &intGreenZ)
				{
					fixed (int* pintBlueY = &intBlueY)
					{
						fixed (int* pintBlueZ = &intBlueZ)
						{
							uint ret = GetCHRMXYZFixedNative(pngPtr, infoPtr, (int*)pintRedX, intRedY, intRedZ, intGreenX, intGreenY, (int*)pintGreenZ, intBlueX, (int*)pintBlueY, (int*)pintBlueZ);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCHRMXYZFixed(PngStruct* pngPtr, PngInfo* infoPtr, int* intRedX, ref int intRedY, int* intRedZ, int* intGreenX, int* intGreenY, ref int intGreenZ, int* intBlueX, ref int intBlueY, ref int intBlueZ)
		{
			fixed (int* pintRedY = &intRedY)
			{
				fixed (int* pintGreenZ = &intGreenZ)
				{
					fixed (int* pintBlueY = &intBlueY)
					{
						fixed (int* pintBlueZ = &intBlueZ)
						{
							uint ret = GetCHRMXYZFixedNative(pngPtr, infoPtr, intRedX, (int*)pintRedY, intRedZ, intGreenX, intGreenY, (int*)pintGreenZ, intBlueX, (int*)pintBlueY, (int*)pintBlueZ);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCHRMXYZFixed(PngStruct* pngPtr, PngInfo* infoPtr, ref int intRedX, ref int intRedY, int* intRedZ, int* intGreenX, int* intGreenY, ref int intGreenZ, int* intBlueX, ref int intBlueY, ref int intBlueZ)
		{
			fixed (int* pintRedX = &intRedX)
			{
				fixed (int* pintRedY = &intRedY)
				{
					fixed (int* pintGreenZ = &intGreenZ)
					{
						fixed (int* pintBlueY = &intBlueY)
						{
							fixed (int* pintBlueZ = &intBlueZ)
							{
								uint ret = GetCHRMXYZFixedNative(pngPtr, infoPtr, (int*)pintRedX, (int*)pintRedY, intRedZ, intGreenX, intGreenY, (int*)pintGreenZ, intBlueX, (int*)pintBlueY, (int*)pintBlueZ);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCHRMXYZFixed(PngStruct* pngPtr, PngInfo* infoPtr, int* intRedX, int* intRedY, ref int intRedZ, int* intGreenX, int* intGreenY, ref int intGreenZ, int* intBlueX, ref int intBlueY, ref int intBlueZ)
		{
			fixed (int* pintRedZ = &intRedZ)
			{
				fixed (int* pintGreenZ = &intGreenZ)
				{
					fixed (int* pintBlueY = &intBlueY)
					{
						fixed (int* pintBlueZ = &intBlueZ)
						{
							uint ret = GetCHRMXYZFixedNative(pngPtr, infoPtr, intRedX, intRedY, (int*)pintRedZ, intGreenX, intGreenY, (int*)pintGreenZ, intBlueX, (int*)pintBlueY, (int*)pintBlueZ);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCHRMXYZFixed(PngStruct* pngPtr, PngInfo* infoPtr, ref int intRedX, int* intRedY, ref int intRedZ, int* intGreenX, int* intGreenY, ref int intGreenZ, int* intBlueX, ref int intBlueY, ref int intBlueZ)
		{
			fixed (int* pintRedX = &intRedX)
			{
				fixed (int* pintRedZ = &intRedZ)
				{
					fixed (int* pintGreenZ = &intGreenZ)
					{
						fixed (int* pintBlueY = &intBlueY)
						{
							fixed (int* pintBlueZ = &intBlueZ)
							{
								uint ret = GetCHRMXYZFixedNative(pngPtr, infoPtr, (int*)pintRedX, intRedY, (int*)pintRedZ, intGreenX, intGreenY, (int*)pintGreenZ, intBlueX, (int*)pintBlueY, (int*)pintBlueZ);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCHRMXYZFixed(PngStruct* pngPtr, PngInfo* infoPtr, int* intRedX, ref int intRedY, ref int intRedZ, int* intGreenX, int* intGreenY, ref int intGreenZ, int* intBlueX, ref int intBlueY, ref int intBlueZ)
		{
			fixed (int* pintRedY = &intRedY)
			{
				fixed (int* pintRedZ = &intRedZ)
				{
					fixed (int* pintGreenZ = &intGreenZ)
					{
						fixed (int* pintBlueY = &intBlueY)
						{
							fixed (int* pintBlueZ = &intBlueZ)
							{
								uint ret = GetCHRMXYZFixedNative(pngPtr, infoPtr, intRedX, (int*)pintRedY, (int*)pintRedZ, intGreenX, intGreenY, (int*)pintGreenZ, intBlueX, (int*)pintBlueY, (int*)pintBlueZ);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCHRMXYZFixed(PngStruct* pngPtr, PngInfo* infoPtr, ref int intRedX, ref int intRedY, ref int intRedZ, int* intGreenX, int* intGreenY, ref int intGreenZ, int* intBlueX, ref int intBlueY, ref int intBlueZ)
		{
			fixed (int* pintRedX = &intRedX)
			{
				fixed (int* pintRedY = &intRedY)
				{
					fixed (int* pintRedZ = &intRedZ)
					{
						fixed (int* pintGreenZ = &intGreenZ)
						{
							fixed (int* pintBlueY = &intBlueY)
							{
								fixed (int* pintBlueZ = &intBlueZ)
								{
									uint ret = GetCHRMXYZFixedNative(pngPtr, infoPtr, (int*)pintRedX, (int*)pintRedY, (int*)pintRedZ, intGreenX, intGreenY, (int*)pintGreenZ, intBlueX, (int*)pintBlueY, (int*)pintBlueZ);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCHRMXYZFixed(PngStruct* pngPtr, PngInfo* infoPtr, int* intRedX, int* intRedY, int* intRedZ, ref int intGreenX, int* intGreenY, ref int intGreenZ, int* intBlueX, ref int intBlueY, ref int intBlueZ)
		{
			fixed (int* pintGreenX = &intGreenX)
			{
				fixed (int* pintGreenZ = &intGreenZ)
				{
					fixed (int* pintBlueY = &intBlueY)
					{
						fixed (int* pintBlueZ = &intBlueZ)
						{
							uint ret = GetCHRMXYZFixedNative(pngPtr, infoPtr, intRedX, intRedY, intRedZ, (int*)pintGreenX, intGreenY, (int*)pintGreenZ, intBlueX, (int*)pintBlueY, (int*)pintBlueZ);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCHRMXYZFixed(PngStruct* pngPtr, PngInfo* infoPtr, ref int intRedX, int* intRedY, int* intRedZ, ref int intGreenX, int* intGreenY, ref int intGreenZ, int* intBlueX, ref int intBlueY, ref int intBlueZ)
		{
			fixed (int* pintRedX = &intRedX)
			{
				fixed (int* pintGreenX = &intGreenX)
				{
					fixed (int* pintGreenZ = &intGreenZ)
					{
						fixed (int* pintBlueY = &intBlueY)
						{
							fixed (int* pintBlueZ = &intBlueZ)
							{
								uint ret = GetCHRMXYZFixedNative(pngPtr, infoPtr, (int*)pintRedX, intRedY, intRedZ, (int*)pintGreenX, intGreenY, (int*)pintGreenZ, intBlueX, (int*)pintBlueY, (int*)pintBlueZ);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCHRMXYZFixed(PngStruct* pngPtr, PngInfo* infoPtr, int* intRedX, ref int intRedY, int* intRedZ, ref int intGreenX, int* intGreenY, ref int intGreenZ, int* intBlueX, ref int intBlueY, ref int intBlueZ)
		{
			fixed (int* pintRedY = &intRedY)
			{
				fixed (int* pintGreenX = &intGreenX)
				{
					fixed (int* pintGreenZ = &intGreenZ)
					{
						fixed (int* pintBlueY = &intBlueY)
						{
							fixed (int* pintBlueZ = &intBlueZ)
							{
								uint ret = GetCHRMXYZFixedNative(pngPtr, infoPtr, intRedX, (int*)pintRedY, intRedZ, (int*)pintGreenX, intGreenY, (int*)pintGreenZ, intBlueX, (int*)pintBlueY, (int*)pintBlueZ);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCHRMXYZFixed(PngStruct* pngPtr, PngInfo* infoPtr, ref int intRedX, ref int intRedY, int* intRedZ, ref int intGreenX, int* intGreenY, ref int intGreenZ, int* intBlueX, ref int intBlueY, ref int intBlueZ)
		{
			fixed (int* pintRedX = &intRedX)
			{
				fixed (int* pintRedY = &intRedY)
				{
					fixed (int* pintGreenX = &intGreenX)
					{
						fixed (int* pintGreenZ = &intGreenZ)
						{
							fixed (int* pintBlueY = &intBlueY)
							{
								fixed (int* pintBlueZ = &intBlueZ)
								{
									uint ret = GetCHRMXYZFixedNative(pngPtr, infoPtr, (int*)pintRedX, (int*)pintRedY, intRedZ, (int*)pintGreenX, intGreenY, (int*)pintGreenZ, intBlueX, (int*)pintBlueY, (int*)pintBlueZ);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCHRMXYZFixed(PngStruct* pngPtr, PngInfo* infoPtr, int* intRedX, int* intRedY, ref int intRedZ, ref int intGreenX, int* intGreenY, ref int intGreenZ, int* intBlueX, ref int intBlueY, ref int intBlueZ)
		{
			fixed (int* pintRedZ = &intRedZ)
			{
				fixed (int* pintGreenX = &intGreenX)
				{
					fixed (int* pintGreenZ = &intGreenZ)
					{
						fixed (int* pintBlueY = &intBlueY)
						{
							fixed (int* pintBlueZ = &intBlueZ)
							{
								uint ret = GetCHRMXYZFixedNative(pngPtr, infoPtr, intRedX, intRedY, (int*)pintRedZ, (int*)pintGreenX, intGreenY, (int*)pintGreenZ, intBlueX, (int*)pintBlueY, (int*)pintBlueZ);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCHRMXYZFixed(PngStruct* pngPtr, PngInfo* infoPtr, ref int intRedX, int* intRedY, ref int intRedZ, ref int intGreenX, int* intGreenY, ref int intGreenZ, int* intBlueX, ref int intBlueY, ref int intBlueZ)
		{
			fixed (int* pintRedX = &intRedX)
			{
				fixed (int* pintRedZ = &intRedZ)
				{
					fixed (int* pintGreenX = &intGreenX)
					{
						fixed (int* pintGreenZ = &intGreenZ)
						{
							fixed (int* pintBlueY = &intBlueY)
							{
								fixed (int* pintBlueZ = &intBlueZ)
								{
									uint ret = GetCHRMXYZFixedNative(pngPtr, infoPtr, (int*)pintRedX, intRedY, (int*)pintRedZ, (int*)pintGreenX, intGreenY, (int*)pintGreenZ, intBlueX, (int*)pintBlueY, (int*)pintBlueZ);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCHRMXYZFixed(PngStruct* pngPtr, PngInfo* infoPtr, int* intRedX, ref int intRedY, ref int intRedZ, ref int intGreenX, int* intGreenY, ref int intGreenZ, int* intBlueX, ref int intBlueY, ref int intBlueZ)
		{
			fixed (int* pintRedY = &intRedY)
			{
				fixed (int* pintRedZ = &intRedZ)
				{
					fixed (int* pintGreenX = &intGreenX)
					{
						fixed (int* pintGreenZ = &intGreenZ)
						{
							fixed (int* pintBlueY = &intBlueY)
							{
								fixed (int* pintBlueZ = &intBlueZ)
								{
									uint ret = GetCHRMXYZFixedNative(pngPtr, infoPtr, intRedX, (int*)pintRedY, (int*)pintRedZ, (int*)pintGreenX, intGreenY, (int*)pintGreenZ, intBlueX, (int*)pintBlueY, (int*)pintBlueZ);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCHRMXYZFixed(PngStruct* pngPtr, PngInfo* infoPtr, ref int intRedX, ref int intRedY, ref int intRedZ, ref int intGreenX, int* intGreenY, ref int intGreenZ, int* intBlueX, ref int intBlueY, ref int intBlueZ)
		{
			fixed (int* pintRedX = &intRedX)
			{
				fixed (int* pintRedY = &intRedY)
				{
					fixed (int* pintRedZ = &intRedZ)
					{
						fixed (int* pintGreenX = &intGreenX)
						{
							fixed (int* pintGreenZ = &intGreenZ)
							{
								fixed (int* pintBlueY = &intBlueY)
								{
									fixed (int* pintBlueZ = &intBlueZ)
									{
										uint ret = GetCHRMXYZFixedNative(pngPtr, infoPtr, (int*)pintRedX, (int*)pintRedY, (int*)pintRedZ, (int*)pintGreenX, intGreenY, (int*)pintGreenZ, intBlueX, (int*)pintBlueY, (int*)pintBlueZ);
										return ret;
									}
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCHRMXYZFixed(PngStruct* pngPtr, PngInfo* infoPtr, int* intRedX, int* intRedY, int* intRedZ, int* intGreenX, ref int intGreenY, ref int intGreenZ, int* intBlueX, ref int intBlueY, ref int intBlueZ)
		{
			fixed (int* pintGreenY = &intGreenY)
			{
				fixed (int* pintGreenZ = &intGreenZ)
				{
					fixed (int* pintBlueY = &intBlueY)
					{
						fixed (int* pintBlueZ = &intBlueZ)
						{
							uint ret = GetCHRMXYZFixedNative(pngPtr, infoPtr, intRedX, intRedY, intRedZ, intGreenX, (int*)pintGreenY, (int*)pintGreenZ, intBlueX, (int*)pintBlueY, (int*)pintBlueZ);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCHRMXYZFixed(PngStruct* pngPtr, PngInfo* infoPtr, ref int intRedX, int* intRedY, int* intRedZ, int* intGreenX, ref int intGreenY, ref int intGreenZ, int* intBlueX, ref int intBlueY, ref int intBlueZ)
		{
			fixed (int* pintRedX = &intRedX)
			{
				fixed (int* pintGreenY = &intGreenY)
				{
					fixed (int* pintGreenZ = &intGreenZ)
					{
						fixed (int* pintBlueY = &intBlueY)
						{
							fixed (int* pintBlueZ = &intBlueZ)
							{
								uint ret = GetCHRMXYZFixedNative(pngPtr, infoPtr, (int*)pintRedX, intRedY, intRedZ, intGreenX, (int*)pintGreenY, (int*)pintGreenZ, intBlueX, (int*)pintBlueY, (int*)pintBlueZ);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCHRMXYZFixed(PngStruct* pngPtr, PngInfo* infoPtr, int* intRedX, ref int intRedY, int* intRedZ, int* intGreenX, ref int intGreenY, ref int intGreenZ, int* intBlueX, ref int intBlueY, ref int intBlueZ)
		{
			fixed (int* pintRedY = &intRedY)
			{
				fixed (int* pintGreenY = &intGreenY)
				{
					fixed (int* pintGreenZ = &intGreenZ)
					{
						fixed (int* pintBlueY = &intBlueY)
						{
							fixed (int* pintBlueZ = &intBlueZ)
							{
								uint ret = GetCHRMXYZFixedNative(pngPtr, infoPtr, intRedX, (int*)pintRedY, intRedZ, intGreenX, (int*)pintGreenY, (int*)pintGreenZ, intBlueX, (int*)pintBlueY, (int*)pintBlueZ);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCHRMXYZFixed(PngStruct* pngPtr, PngInfo* infoPtr, ref int intRedX, ref int intRedY, int* intRedZ, int* intGreenX, ref int intGreenY, ref int intGreenZ, int* intBlueX, ref int intBlueY, ref int intBlueZ)
		{
			fixed (int* pintRedX = &intRedX)
			{
				fixed (int* pintRedY = &intRedY)
				{
					fixed (int* pintGreenY = &intGreenY)
					{
						fixed (int* pintGreenZ = &intGreenZ)
						{
							fixed (int* pintBlueY = &intBlueY)
							{
								fixed (int* pintBlueZ = &intBlueZ)
								{
									uint ret = GetCHRMXYZFixedNative(pngPtr, infoPtr, (int*)pintRedX, (int*)pintRedY, intRedZ, intGreenX, (int*)pintGreenY, (int*)pintGreenZ, intBlueX, (int*)pintBlueY, (int*)pintBlueZ);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCHRMXYZFixed(PngStruct* pngPtr, PngInfo* infoPtr, int* intRedX, int* intRedY, ref int intRedZ, int* intGreenX, ref int intGreenY, ref int intGreenZ, int* intBlueX, ref int intBlueY, ref int intBlueZ)
		{
			fixed (int* pintRedZ = &intRedZ)
			{
				fixed (int* pintGreenY = &intGreenY)
				{
					fixed (int* pintGreenZ = &intGreenZ)
					{
						fixed (int* pintBlueY = &intBlueY)
						{
							fixed (int* pintBlueZ = &intBlueZ)
							{
								uint ret = GetCHRMXYZFixedNative(pngPtr, infoPtr, intRedX, intRedY, (int*)pintRedZ, intGreenX, (int*)pintGreenY, (int*)pintGreenZ, intBlueX, (int*)pintBlueY, (int*)pintBlueZ);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCHRMXYZFixed(PngStruct* pngPtr, PngInfo* infoPtr, ref int intRedX, int* intRedY, ref int intRedZ, int* intGreenX, ref int intGreenY, ref int intGreenZ, int* intBlueX, ref int intBlueY, ref int intBlueZ)
		{
			fixed (int* pintRedX = &intRedX)
			{
				fixed (int* pintRedZ = &intRedZ)
				{
					fixed (int* pintGreenY = &intGreenY)
					{
						fixed (int* pintGreenZ = &intGreenZ)
						{
							fixed (int* pintBlueY = &intBlueY)
							{
								fixed (int* pintBlueZ = &intBlueZ)
								{
									uint ret = GetCHRMXYZFixedNative(pngPtr, infoPtr, (int*)pintRedX, intRedY, (int*)pintRedZ, intGreenX, (int*)pintGreenY, (int*)pintGreenZ, intBlueX, (int*)pintBlueY, (int*)pintBlueZ);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCHRMXYZFixed(PngStruct* pngPtr, PngInfo* infoPtr, int* intRedX, ref int intRedY, ref int intRedZ, int* intGreenX, ref int intGreenY, ref int intGreenZ, int* intBlueX, ref int intBlueY, ref int intBlueZ)
		{
			fixed (int* pintRedY = &intRedY)
			{
				fixed (int* pintRedZ = &intRedZ)
				{
					fixed (int* pintGreenY = &intGreenY)
					{
						fixed (int* pintGreenZ = &intGreenZ)
						{
							fixed (int* pintBlueY = &intBlueY)
							{
								fixed (int* pintBlueZ = &intBlueZ)
								{
									uint ret = GetCHRMXYZFixedNative(pngPtr, infoPtr, intRedX, (int*)pintRedY, (int*)pintRedZ, intGreenX, (int*)pintGreenY, (int*)pintGreenZ, intBlueX, (int*)pintBlueY, (int*)pintBlueZ);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCHRMXYZFixed(PngStruct* pngPtr, PngInfo* infoPtr, ref int intRedX, ref int intRedY, ref int intRedZ, int* intGreenX, ref int intGreenY, ref int intGreenZ, int* intBlueX, ref int intBlueY, ref int intBlueZ)
		{
			fixed (int* pintRedX = &intRedX)
			{
				fixed (int* pintRedY = &intRedY)
				{
					fixed (int* pintRedZ = &intRedZ)
					{
						fixed (int* pintGreenY = &intGreenY)
						{
							fixed (int* pintGreenZ = &intGreenZ)
							{
								fixed (int* pintBlueY = &intBlueY)
								{
									fixed (int* pintBlueZ = &intBlueZ)
									{
										uint ret = GetCHRMXYZFixedNative(pngPtr, infoPtr, (int*)pintRedX, (int*)pintRedY, (int*)pintRedZ, intGreenX, (int*)pintGreenY, (int*)pintGreenZ, intBlueX, (int*)pintBlueY, (int*)pintBlueZ);
										return ret;
									}
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCHRMXYZFixed(PngStruct* pngPtr, PngInfo* infoPtr, int* intRedX, int* intRedY, int* intRedZ, ref int intGreenX, ref int intGreenY, ref int intGreenZ, int* intBlueX, ref int intBlueY, ref int intBlueZ)
		{
			fixed (int* pintGreenX = &intGreenX)
			{
				fixed (int* pintGreenY = &intGreenY)
				{
					fixed (int* pintGreenZ = &intGreenZ)
					{
						fixed (int* pintBlueY = &intBlueY)
						{
							fixed (int* pintBlueZ = &intBlueZ)
							{
								uint ret = GetCHRMXYZFixedNative(pngPtr, infoPtr, intRedX, intRedY, intRedZ, (int*)pintGreenX, (int*)pintGreenY, (int*)pintGreenZ, intBlueX, (int*)pintBlueY, (int*)pintBlueZ);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCHRMXYZFixed(PngStruct* pngPtr, PngInfo* infoPtr, ref int intRedX, int* intRedY, int* intRedZ, ref int intGreenX, ref int intGreenY, ref int intGreenZ, int* intBlueX, ref int intBlueY, ref int intBlueZ)
		{
			fixed (int* pintRedX = &intRedX)
			{
				fixed (int* pintGreenX = &intGreenX)
				{
					fixed (int* pintGreenY = &intGreenY)
					{
						fixed (int* pintGreenZ = &intGreenZ)
						{
							fixed (int* pintBlueY = &intBlueY)
							{
								fixed (int* pintBlueZ = &intBlueZ)
								{
									uint ret = GetCHRMXYZFixedNative(pngPtr, infoPtr, (int*)pintRedX, intRedY, intRedZ, (int*)pintGreenX, (int*)pintGreenY, (int*)pintGreenZ, intBlueX, (int*)pintBlueY, (int*)pintBlueZ);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCHRMXYZFixed(PngStruct* pngPtr, PngInfo* infoPtr, int* intRedX, ref int intRedY, int* intRedZ, ref int intGreenX, ref int intGreenY, ref int intGreenZ, int* intBlueX, ref int intBlueY, ref int intBlueZ)
		{
			fixed (int* pintRedY = &intRedY)
			{
				fixed (int* pintGreenX = &intGreenX)
				{
					fixed (int* pintGreenY = &intGreenY)
					{
						fixed (int* pintGreenZ = &intGreenZ)
						{
							fixed (int* pintBlueY = &intBlueY)
							{
								fixed (int* pintBlueZ = &intBlueZ)
								{
									uint ret = GetCHRMXYZFixedNative(pngPtr, infoPtr, intRedX, (int*)pintRedY, intRedZ, (int*)pintGreenX, (int*)pintGreenY, (int*)pintGreenZ, intBlueX, (int*)pintBlueY, (int*)pintBlueZ);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCHRMXYZFixed(PngStruct* pngPtr, PngInfo* infoPtr, ref int intRedX, ref int intRedY, int* intRedZ, ref int intGreenX, ref int intGreenY, ref int intGreenZ, int* intBlueX, ref int intBlueY, ref int intBlueZ)
		{
			fixed (int* pintRedX = &intRedX)
			{
				fixed (int* pintRedY = &intRedY)
				{
					fixed (int* pintGreenX = &intGreenX)
					{
						fixed (int* pintGreenY = &intGreenY)
						{
							fixed (int* pintGreenZ = &intGreenZ)
							{
								fixed (int* pintBlueY = &intBlueY)
								{
									fixed (int* pintBlueZ = &intBlueZ)
									{
										uint ret = GetCHRMXYZFixedNative(pngPtr, infoPtr, (int*)pintRedX, (int*)pintRedY, intRedZ, (int*)pintGreenX, (int*)pintGreenY, (int*)pintGreenZ, intBlueX, (int*)pintBlueY, (int*)pintBlueZ);
										return ret;
									}
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCHRMXYZFixed(PngStruct* pngPtr, PngInfo* infoPtr, int* intRedX, int* intRedY, ref int intRedZ, ref int intGreenX, ref int intGreenY, ref int intGreenZ, int* intBlueX, ref int intBlueY, ref int intBlueZ)
		{
			fixed (int* pintRedZ = &intRedZ)
			{
				fixed (int* pintGreenX = &intGreenX)
				{
					fixed (int* pintGreenY = &intGreenY)
					{
						fixed (int* pintGreenZ = &intGreenZ)
						{
							fixed (int* pintBlueY = &intBlueY)
							{
								fixed (int* pintBlueZ = &intBlueZ)
								{
									uint ret = GetCHRMXYZFixedNative(pngPtr, infoPtr, intRedX, intRedY, (int*)pintRedZ, (int*)pintGreenX, (int*)pintGreenY, (int*)pintGreenZ, intBlueX, (int*)pintBlueY, (int*)pintBlueZ);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCHRMXYZFixed(PngStruct* pngPtr, PngInfo* infoPtr, ref int intRedX, int* intRedY, ref int intRedZ, ref int intGreenX, ref int intGreenY, ref int intGreenZ, int* intBlueX, ref int intBlueY, ref int intBlueZ)
		{
			fixed (int* pintRedX = &intRedX)
			{
				fixed (int* pintRedZ = &intRedZ)
				{
					fixed (int* pintGreenX = &intGreenX)
					{
						fixed (int* pintGreenY = &intGreenY)
						{
							fixed (int* pintGreenZ = &intGreenZ)
							{
								fixed (int* pintBlueY = &intBlueY)
								{
									fixed (int* pintBlueZ = &intBlueZ)
									{
										uint ret = GetCHRMXYZFixedNative(pngPtr, infoPtr, (int*)pintRedX, intRedY, (int*)pintRedZ, (int*)pintGreenX, (int*)pintGreenY, (int*)pintGreenZ, intBlueX, (int*)pintBlueY, (int*)pintBlueZ);
										return ret;
									}
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCHRMXYZFixed(PngStruct* pngPtr, PngInfo* infoPtr, int* intRedX, ref int intRedY, ref int intRedZ, ref int intGreenX, ref int intGreenY, ref int intGreenZ, int* intBlueX, ref int intBlueY, ref int intBlueZ)
		{
			fixed (int* pintRedY = &intRedY)
			{
				fixed (int* pintRedZ = &intRedZ)
				{
					fixed (int* pintGreenX = &intGreenX)
					{
						fixed (int* pintGreenY = &intGreenY)
						{
							fixed (int* pintGreenZ = &intGreenZ)
							{
								fixed (int* pintBlueY = &intBlueY)
								{
									fixed (int* pintBlueZ = &intBlueZ)
									{
										uint ret = GetCHRMXYZFixedNative(pngPtr, infoPtr, intRedX, (int*)pintRedY, (int*)pintRedZ, (int*)pintGreenX, (int*)pintGreenY, (int*)pintGreenZ, intBlueX, (int*)pintBlueY, (int*)pintBlueZ);
										return ret;
									}
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCHRMXYZFixed(PngStruct* pngPtr, PngInfo* infoPtr, ref int intRedX, ref int intRedY, ref int intRedZ, ref int intGreenX, ref int intGreenY, ref int intGreenZ, int* intBlueX, ref int intBlueY, ref int intBlueZ)
		{
			fixed (int* pintRedX = &intRedX)
			{
				fixed (int* pintRedY = &intRedY)
				{
					fixed (int* pintRedZ = &intRedZ)
					{
						fixed (int* pintGreenX = &intGreenX)
						{
							fixed (int* pintGreenY = &intGreenY)
							{
								fixed (int* pintGreenZ = &intGreenZ)
								{
									fixed (int* pintBlueY = &intBlueY)
									{
										fixed (int* pintBlueZ = &intBlueZ)
										{
											uint ret = GetCHRMXYZFixedNative(pngPtr, infoPtr, (int*)pintRedX, (int*)pintRedY, (int*)pintRedZ, (int*)pintGreenX, (int*)pintGreenY, (int*)pintGreenZ, intBlueX, (int*)pintBlueY, (int*)pintBlueZ);
											return ret;
										}
									}
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCHRMXYZFixed(PngStruct* pngPtr, PngInfo* infoPtr, int* intRedX, int* intRedY, int* intRedZ, int* intGreenX, int* intGreenY, int* intGreenZ, ref int intBlueX, ref int intBlueY, ref int intBlueZ)
		{
			fixed (int* pintBlueX = &intBlueX)
			{
				fixed (int* pintBlueY = &intBlueY)
				{
					fixed (int* pintBlueZ = &intBlueZ)
					{
						uint ret = GetCHRMXYZFixedNative(pngPtr, infoPtr, intRedX, intRedY, intRedZ, intGreenX, intGreenY, intGreenZ, (int*)pintBlueX, (int*)pintBlueY, (int*)pintBlueZ);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCHRMXYZFixed(PngStruct* pngPtr, PngInfo* infoPtr, ref int intRedX, int* intRedY, int* intRedZ, int* intGreenX, int* intGreenY, int* intGreenZ, ref int intBlueX, ref int intBlueY, ref int intBlueZ)
		{
			fixed (int* pintRedX = &intRedX)
			{
				fixed (int* pintBlueX = &intBlueX)
				{
					fixed (int* pintBlueY = &intBlueY)
					{
						fixed (int* pintBlueZ = &intBlueZ)
						{
							uint ret = GetCHRMXYZFixedNative(pngPtr, infoPtr, (int*)pintRedX, intRedY, intRedZ, intGreenX, intGreenY, intGreenZ, (int*)pintBlueX, (int*)pintBlueY, (int*)pintBlueZ);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCHRMXYZFixed(PngStruct* pngPtr, PngInfo* infoPtr, int* intRedX, ref int intRedY, int* intRedZ, int* intGreenX, int* intGreenY, int* intGreenZ, ref int intBlueX, ref int intBlueY, ref int intBlueZ)
		{
			fixed (int* pintRedY = &intRedY)
			{
				fixed (int* pintBlueX = &intBlueX)
				{
					fixed (int* pintBlueY = &intBlueY)
					{
						fixed (int* pintBlueZ = &intBlueZ)
						{
							uint ret = GetCHRMXYZFixedNative(pngPtr, infoPtr, intRedX, (int*)pintRedY, intRedZ, intGreenX, intGreenY, intGreenZ, (int*)pintBlueX, (int*)pintBlueY, (int*)pintBlueZ);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCHRMXYZFixed(PngStruct* pngPtr, PngInfo* infoPtr, ref int intRedX, ref int intRedY, int* intRedZ, int* intGreenX, int* intGreenY, int* intGreenZ, ref int intBlueX, ref int intBlueY, ref int intBlueZ)
		{
			fixed (int* pintRedX = &intRedX)
			{
				fixed (int* pintRedY = &intRedY)
				{
					fixed (int* pintBlueX = &intBlueX)
					{
						fixed (int* pintBlueY = &intBlueY)
						{
							fixed (int* pintBlueZ = &intBlueZ)
							{
								uint ret = GetCHRMXYZFixedNative(pngPtr, infoPtr, (int*)pintRedX, (int*)pintRedY, intRedZ, intGreenX, intGreenY, intGreenZ, (int*)pintBlueX, (int*)pintBlueY, (int*)pintBlueZ);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCHRMXYZFixed(PngStruct* pngPtr, PngInfo* infoPtr, int* intRedX, int* intRedY, ref int intRedZ, int* intGreenX, int* intGreenY, int* intGreenZ, ref int intBlueX, ref int intBlueY, ref int intBlueZ)
		{
			fixed (int* pintRedZ = &intRedZ)
			{
				fixed (int* pintBlueX = &intBlueX)
				{
					fixed (int* pintBlueY = &intBlueY)
					{
						fixed (int* pintBlueZ = &intBlueZ)
						{
							uint ret = GetCHRMXYZFixedNative(pngPtr, infoPtr, intRedX, intRedY, (int*)pintRedZ, intGreenX, intGreenY, intGreenZ, (int*)pintBlueX, (int*)pintBlueY, (int*)pintBlueZ);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCHRMXYZFixed(PngStruct* pngPtr, PngInfo* infoPtr, ref int intRedX, int* intRedY, ref int intRedZ, int* intGreenX, int* intGreenY, int* intGreenZ, ref int intBlueX, ref int intBlueY, ref int intBlueZ)
		{
			fixed (int* pintRedX = &intRedX)
			{
				fixed (int* pintRedZ = &intRedZ)
				{
					fixed (int* pintBlueX = &intBlueX)
					{
						fixed (int* pintBlueY = &intBlueY)
						{
							fixed (int* pintBlueZ = &intBlueZ)
							{
								uint ret = GetCHRMXYZFixedNative(pngPtr, infoPtr, (int*)pintRedX, intRedY, (int*)pintRedZ, intGreenX, intGreenY, intGreenZ, (int*)pintBlueX, (int*)pintBlueY, (int*)pintBlueZ);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCHRMXYZFixed(PngStruct* pngPtr, PngInfo* infoPtr, int* intRedX, ref int intRedY, ref int intRedZ, int* intGreenX, int* intGreenY, int* intGreenZ, ref int intBlueX, ref int intBlueY, ref int intBlueZ)
		{
			fixed (int* pintRedY = &intRedY)
			{
				fixed (int* pintRedZ = &intRedZ)
				{
					fixed (int* pintBlueX = &intBlueX)
					{
						fixed (int* pintBlueY = &intBlueY)
						{
							fixed (int* pintBlueZ = &intBlueZ)
							{
								uint ret = GetCHRMXYZFixedNative(pngPtr, infoPtr, intRedX, (int*)pintRedY, (int*)pintRedZ, intGreenX, intGreenY, intGreenZ, (int*)pintBlueX, (int*)pintBlueY, (int*)pintBlueZ);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCHRMXYZFixed(PngStruct* pngPtr, PngInfo* infoPtr, ref int intRedX, ref int intRedY, ref int intRedZ, int* intGreenX, int* intGreenY, int* intGreenZ, ref int intBlueX, ref int intBlueY, ref int intBlueZ)
		{
			fixed (int* pintRedX = &intRedX)
			{
				fixed (int* pintRedY = &intRedY)
				{
					fixed (int* pintRedZ = &intRedZ)
					{
						fixed (int* pintBlueX = &intBlueX)
						{
							fixed (int* pintBlueY = &intBlueY)
							{
								fixed (int* pintBlueZ = &intBlueZ)
								{
									uint ret = GetCHRMXYZFixedNative(pngPtr, infoPtr, (int*)pintRedX, (int*)pintRedY, (int*)pintRedZ, intGreenX, intGreenY, intGreenZ, (int*)pintBlueX, (int*)pintBlueY, (int*)pintBlueZ);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCHRMXYZFixed(PngStruct* pngPtr, PngInfo* infoPtr, int* intRedX, int* intRedY, int* intRedZ, ref int intGreenX, int* intGreenY, int* intGreenZ, ref int intBlueX, ref int intBlueY, ref int intBlueZ)
		{
			fixed (int* pintGreenX = &intGreenX)
			{
				fixed (int* pintBlueX = &intBlueX)
				{
					fixed (int* pintBlueY = &intBlueY)
					{
						fixed (int* pintBlueZ = &intBlueZ)
						{
							uint ret = GetCHRMXYZFixedNative(pngPtr, infoPtr, intRedX, intRedY, intRedZ, (int*)pintGreenX, intGreenY, intGreenZ, (int*)pintBlueX, (int*)pintBlueY, (int*)pintBlueZ);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCHRMXYZFixed(PngStruct* pngPtr, PngInfo* infoPtr, ref int intRedX, int* intRedY, int* intRedZ, ref int intGreenX, int* intGreenY, int* intGreenZ, ref int intBlueX, ref int intBlueY, ref int intBlueZ)
		{
			fixed (int* pintRedX = &intRedX)
			{
				fixed (int* pintGreenX = &intGreenX)
				{
					fixed (int* pintBlueX = &intBlueX)
					{
						fixed (int* pintBlueY = &intBlueY)
						{
							fixed (int* pintBlueZ = &intBlueZ)
							{
								uint ret = GetCHRMXYZFixedNative(pngPtr, infoPtr, (int*)pintRedX, intRedY, intRedZ, (int*)pintGreenX, intGreenY, intGreenZ, (int*)pintBlueX, (int*)pintBlueY, (int*)pintBlueZ);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCHRMXYZFixed(PngStruct* pngPtr, PngInfo* infoPtr, int* intRedX, ref int intRedY, int* intRedZ, ref int intGreenX, int* intGreenY, int* intGreenZ, ref int intBlueX, ref int intBlueY, ref int intBlueZ)
		{
			fixed (int* pintRedY = &intRedY)
			{
				fixed (int* pintGreenX = &intGreenX)
				{
					fixed (int* pintBlueX = &intBlueX)
					{
						fixed (int* pintBlueY = &intBlueY)
						{
							fixed (int* pintBlueZ = &intBlueZ)
							{
								uint ret = GetCHRMXYZFixedNative(pngPtr, infoPtr, intRedX, (int*)pintRedY, intRedZ, (int*)pintGreenX, intGreenY, intGreenZ, (int*)pintBlueX, (int*)pintBlueY, (int*)pintBlueZ);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCHRMXYZFixed(PngStruct* pngPtr, PngInfo* infoPtr, ref int intRedX, ref int intRedY, int* intRedZ, ref int intGreenX, int* intGreenY, int* intGreenZ, ref int intBlueX, ref int intBlueY, ref int intBlueZ)
		{
			fixed (int* pintRedX = &intRedX)
			{
				fixed (int* pintRedY = &intRedY)
				{
					fixed (int* pintGreenX = &intGreenX)
					{
						fixed (int* pintBlueX = &intBlueX)
						{
							fixed (int* pintBlueY = &intBlueY)
							{
								fixed (int* pintBlueZ = &intBlueZ)
								{
									uint ret = GetCHRMXYZFixedNative(pngPtr, infoPtr, (int*)pintRedX, (int*)pintRedY, intRedZ, (int*)pintGreenX, intGreenY, intGreenZ, (int*)pintBlueX, (int*)pintBlueY, (int*)pintBlueZ);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCHRMXYZFixed(PngStruct* pngPtr, PngInfo* infoPtr, int* intRedX, int* intRedY, ref int intRedZ, ref int intGreenX, int* intGreenY, int* intGreenZ, ref int intBlueX, ref int intBlueY, ref int intBlueZ)
		{
			fixed (int* pintRedZ = &intRedZ)
			{
				fixed (int* pintGreenX = &intGreenX)
				{
					fixed (int* pintBlueX = &intBlueX)
					{
						fixed (int* pintBlueY = &intBlueY)
						{
							fixed (int* pintBlueZ = &intBlueZ)
							{
								uint ret = GetCHRMXYZFixedNative(pngPtr, infoPtr, intRedX, intRedY, (int*)pintRedZ, (int*)pintGreenX, intGreenY, intGreenZ, (int*)pintBlueX, (int*)pintBlueY, (int*)pintBlueZ);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCHRMXYZFixed(PngStruct* pngPtr, PngInfo* infoPtr, ref int intRedX, int* intRedY, ref int intRedZ, ref int intGreenX, int* intGreenY, int* intGreenZ, ref int intBlueX, ref int intBlueY, ref int intBlueZ)
		{
			fixed (int* pintRedX = &intRedX)
			{
				fixed (int* pintRedZ = &intRedZ)
				{
					fixed (int* pintGreenX = &intGreenX)
					{
						fixed (int* pintBlueX = &intBlueX)
						{
							fixed (int* pintBlueY = &intBlueY)
							{
								fixed (int* pintBlueZ = &intBlueZ)
								{
									uint ret = GetCHRMXYZFixedNative(pngPtr, infoPtr, (int*)pintRedX, intRedY, (int*)pintRedZ, (int*)pintGreenX, intGreenY, intGreenZ, (int*)pintBlueX, (int*)pintBlueY, (int*)pintBlueZ);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCHRMXYZFixed(PngStruct* pngPtr, PngInfo* infoPtr, int* intRedX, ref int intRedY, ref int intRedZ, ref int intGreenX, int* intGreenY, int* intGreenZ, ref int intBlueX, ref int intBlueY, ref int intBlueZ)
		{
			fixed (int* pintRedY = &intRedY)
			{
				fixed (int* pintRedZ = &intRedZ)
				{
					fixed (int* pintGreenX = &intGreenX)
					{
						fixed (int* pintBlueX = &intBlueX)
						{
							fixed (int* pintBlueY = &intBlueY)
							{
								fixed (int* pintBlueZ = &intBlueZ)
								{
									uint ret = GetCHRMXYZFixedNative(pngPtr, infoPtr, intRedX, (int*)pintRedY, (int*)pintRedZ, (int*)pintGreenX, intGreenY, intGreenZ, (int*)pintBlueX, (int*)pintBlueY, (int*)pintBlueZ);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCHRMXYZFixed(PngStruct* pngPtr, PngInfo* infoPtr, ref int intRedX, ref int intRedY, ref int intRedZ, ref int intGreenX, int* intGreenY, int* intGreenZ, ref int intBlueX, ref int intBlueY, ref int intBlueZ)
		{
			fixed (int* pintRedX = &intRedX)
			{
				fixed (int* pintRedY = &intRedY)
				{
					fixed (int* pintRedZ = &intRedZ)
					{
						fixed (int* pintGreenX = &intGreenX)
						{
							fixed (int* pintBlueX = &intBlueX)
							{
								fixed (int* pintBlueY = &intBlueY)
								{
									fixed (int* pintBlueZ = &intBlueZ)
									{
										uint ret = GetCHRMXYZFixedNative(pngPtr, infoPtr, (int*)pintRedX, (int*)pintRedY, (int*)pintRedZ, (int*)pintGreenX, intGreenY, intGreenZ, (int*)pintBlueX, (int*)pintBlueY, (int*)pintBlueZ);
										return ret;
									}
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCHRMXYZFixed(PngStruct* pngPtr, PngInfo* infoPtr, int* intRedX, int* intRedY, int* intRedZ, int* intGreenX, ref int intGreenY, int* intGreenZ, ref int intBlueX, ref int intBlueY, ref int intBlueZ)
		{
			fixed (int* pintGreenY = &intGreenY)
			{
				fixed (int* pintBlueX = &intBlueX)
				{
					fixed (int* pintBlueY = &intBlueY)
					{
						fixed (int* pintBlueZ = &intBlueZ)
						{
							uint ret = GetCHRMXYZFixedNative(pngPtr, infoPtr, intRedX, intRedY, intRedZ, intGreenX, (int*)pintGreenY, intGreenZ, (int*)pintBlueX, (int*)pintBlueY, (int*)pintBlueZ);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCHRMXYZFixed(PngStruct* pngPtr, PngInfo* infoPtr, ref int intRedX, int* intRedY, int* intRedZ, int* intGreenX, ref int intGreenY, int* intGreenZ, ref int intBlueX, ref int intBlueY, ref int intBlueZ)
		{
			fixed (int* pintRedX = &intRedX)
			{
				fixed (int* pintGreenY = &intGreenY)
				{
					fixed (int* pintBlueX = &intBlueX)
					{
						fixed (int* pintBlueY = &intBlueY)
						{
							fixed (int* pintBlueZ = &intBlueZ)
							{
								uint ret = GetCHRMXYZFixedNative(pngPtr, infoPtr, (int*)pintRedX, intRedY, intRedZ, intGreenX, (int*)pintGreenY, intGreenZ, (int*)pintBlueX, (int*)pintBlueY, (int*)pintBlueZ);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCHRMXYZFixed(PngStruct* pngPtr, PngInfo* infoPtr, int* intRedX, ref int intRedY, int* intRedZ, int* intGreenX, ref int intGreenY, int* intGreenZ, ref int intBlueX, ref int intBlueY, ref int intBlueZ)
		{
			fixed (int* pintRedY = &intRedY)
			{
				fixed (int* pintGreenY = &intGreenY)
				{
					fixed (int* pintBlueX = &intBlueX)
					{
						fixed (int* pintBlueY = &intBlueY)
						{
							fixed (int* pintBlueZ = &intBlueZ)
							{
								uint ret = GetCHRMXYZFixedNative(pngPtr, infoPtr, intRedX, (int*)pintRedY, intRedZ, intGreenX, (int*)pintGreenY, intGreenZ, (int*)pintBlueX, (int*)pintBlueY, (int*)pintBlueZ);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCHRMXYZFixed(PngStruct* pngPtr, PngInfo* infoPtr, ref int intRedX, ref int intRedY, int* intRedZ, int* intGreenX, ref int intGreenY, int* intGreenZ, ref int intBlueX, ref int intBlueY, ref int intBlueZ)
		{
			fixed (int* pintRedX = &intRedX)
			{
				fixed (int* pintRedY = &intRedY)
				{
					fixed (int* pintGreenY = &intGreenY)
					{
						fixed (int* pintBlueX = &intBlueX)
						{
							fixed (int* pintBlueY = &intBlueY)
							{
								fixed (int* pintBlueZ = &intBlueZ)
								{
									uint ret = GetCHRMXYZFixedNative(pngPtr, infoPtr, (int*)pintRedX, (int*)pintRedY, intRedZ, intGreenX, (int*)pintGreenY, intGreenZ, (int*)pintBlueX, (int*)pintBlueY, (int*)pintBlueZ);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCHRMXYZFixed(PngStruct* pngPtr, PngInfo* infoPtr, int* intRedX, int* intRedY, ref int intRedZ, int* intGreenX, ref int intGreenY, int* intGreenZ, ref int intBlueX, ref int intBlueY, ref int intBlueZ)
		{
			fixed (int* pintRedZ = &intRedZ)
			{
				fixed (int* pintGreenY = &intGreenY)
				{
					fixed (int* pintBlueX = &intBlueX)
					{
						fixed (int* pintBlueY = &intBlueY)
						{
							fixed (int* pintBlueZ = &intBlueZ)
							{
								uint ret = GetCHRMXYZFixedNative(pngPtr, infoPtr, intRedX, intRedY, (int*)pintRedZ, intGreenX, (int*)pintGreenY, intGreenZ, (int*)pintBlueX, (int*)pintBlueY, (int*)pintBlueZ);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCHRMXYZFixed(PngStruct* pngPtr, PngInfo* infoPtr, ref int intRedX, int* intRedY, ref int intRedZ, int* intGreenX, ref int intGreenY, int* intGreenZ, ref int intBlueX, ref int intBlueY, ref int intBlueZ)
		{
			fixed (int* pintRedX = &intRedX)
			{
				fixed (int* pintRedZ = &intRedZ)
				{
					fixed (int* pintGreenY = &intGreenY)
					{
						fixed (int* pintBlueX = &intBlueX)
						{
							fixed (int* pintBlueY = &intBlueY)
							{
								fixed (int* pintBlueZ = &intBlueZ)
								{
									uint ret = GetCHRMXYZFixedNative(pngPtr, infoPtr, (int*)pintRedX, intRedY, (int*)pintRedZ, intGreenX, (int*)pintGreenY, intGreenZ, (int*)pintBlueX, (int*)pintBlueY, (int*)pintBlueZ);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCHRMXYZFixed(PngStruct* pngPtr, PngInfo* infoPtr, int* intRedX, ref int intRedY, ref int intRedZ, int* intGreenX, ref int intGreenY, int* intGreenZ, ref int intBlueX, ref int intBlueY, ref int intBlueZ)
		{
			fixed (int* pintRedY = &intRedY)
			{
				fixed (int* pintRedZ = &intRedZ)
				{
					fixed (int* pintGreenY = &intGreenY)
					{
						fixed (int* pintBlueX = &intBlueX)
						{
							fixed (int* pintBlueY = &intBlueY)
							{
								fixed (int* pintBlueZ = &intBlueZ)
								{
									uint ret = GetCHRMXYZFixedNative(pngPtr, infoPtr, intRedX, (int*)pintRedY, (int*)pintRedZ, intGreenX, (int*)pintGreenY, intGreenZ, (int*)pintBlueX, (int*)pintBlueY, (int*)pintBlueZ);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCHRMXYZFixed(PngStruct* pngPtr, PngInfo* infoPtr, ref int intRedX, ref int intRedY, ref int intRedZ, int* intGreenX, ref int intGreenY, int* intGreenZ, ref int intBlueX, ref int intBlueY, ref int intBlueZ)
		{
			fixed (int* pintRedX = &intRedX)
			{
				fixed (int* pintRedY = &intRedY)
				{
					fixed (int* pintRedZ = &intRedZ)
					{
						fixed (int* pintGreenY = &intGreenY)
						{
							fixed (int* pintBlueX = &intBlueX)
							{
								fixed (int* pintBlueY = &intBlueY)
								{
									fixed (int* pintBlueZ = &intBlueZ)
									{
										uint ret = GetCHRMXYZFixedNative(pngPtr, infoPtr, (int*)pintRedX, (int*)pintRedY, (int*)pintRedZ, intGreenX, (int*)pintGreenY, intGreenZ, (int*)pintBlueX, (int*)pintBlueY, (int*)pintBlueZ);
										return ret;
									}
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCHRMXYZFixed(PngStruct* pngPtr, PngInfo* infoPtr, int* intRedX, int* intRedY, int* intRedZ, ref int intGreenX, ref int intGreenY, int* intGreenZ, ref int intBlueX, ref int intBlueY, ref int intBlueZ)
		{
			fixed (int* pintGreenX = &intGreenX)
			{
				fixed (int* pintGreenY = &intGreenY)
				{
					fixed (int* pintBlueX = &intBlueX)
					{
						fixed (int* pintBlueY = &intBlueY)
						{
							fixed (int* pintBlueZ = &intBlueZ)
							{
								uint ret = GetCHRMXYZFixedNative(pngPtr, infoPtr, intRedX, intRedY, intRedZ, (int*)pintGreenX, (int*)pintGreenY, intGreenZ, (int*)pintBlueX, (int*)pintBlueY, (int*)pintBlueZ);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCHRMXYZFixed(PngStruct* pngPtr, PngInfo* infoPtr, ref int intRedX, int* intRedY, int* intRedZ, ref int intGreenX, ref int intGreenY, int* intGreenZ, ref int intBlueX, ref int intBlueY, ref int intBlueZ)
		{
			fixed (int* pintRedX = &intRedX)
			{
				fixed (int* pintGreenX = &intGreenX)
				{
					fixed (int* pintGreenY = &intGreenY)
					{
						fixed (int* pintBlueX = &intBlueX)
						{
							fixed (int* pintBlueY = &intBlueY)
							{
								fixed (int* pintBlueZ = &intBlueZ)
								{
									uint ret = GetCHRMXYZFixedNative(pngPtr, infoPtr, (int*)pintRedX, intRedY, intRedZ, (int*)pintGreenX, (int*)pintGreenY, intGreenZ, (int*)pintBlueX, (int*)pintBlueY, (int*)pintBlueZ);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCHRMXYZFixed(PngStruct* pngPtr, PngInfo* infoPtr, int* intRedX, ref int intRedY, int* intRedZ, ref int intGreenX, ref int intGreenY, int* intGreenZ, ref int intBlueX, ref int intBlueY, ref int intBlueZ)
		{
			fixed (int* pintRedY = &intRedY)
			{
				fixed (int* pintGreenX = &intGreenX)
				{
					fixed (int* pintGreenY = &intGreenY)
					{
						fixed (int* pintBlueX = &intBlueX)
						{
							fixed (int* pintBlueY = &intBlueY)
							{
								fixed (int* pintBlueZ = &intBlueZ)
								{
									uint ret = GetCHRMXYZFixedNative(pngPtr, infoPtr, intRedX, (int*)pintRedY, intRedZ, (int*)pintGreenX, (int*)pintGreenY, intGreenZ, (int*)pintBlueX, (int*)pintBlueY, (int*)pintBlueZ);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCHRMXYZFixed(PngStruct* pngPtr, PngInfo* infoPtr, ref int intRedX, ref int intRedY, int* intRedZ, ref int intGreenX, ref int intGreenY, int* intGreenZ, ref int intBlueX, ref int intBlueY, ref int intBlueZ)
		{
			fixed (int* pintRedX = &intRedX)
			{
				fixed (int* pintRedY = &intRedY)
				{
					fixed (int* pintGreenX = &intGreenX)
					{
						fixed (int* pintGreenY = &intGreenY)
						{
							fixed (int* pintBlueX = &intBlueX)
							{
								fixed (int* pintBlueY = &intBlueY)
								{
									fixed (int* pintBlueZ = &intBlueZ)
									{
										uint ret = GetCHRMXYZFixedNative(pngPtr, infoPtr, (int*)pintRedX, (int*)pintRedY, intRedZ, (int*)pintGreenX, (int*)pintGreenY, intGreenZ, (int*)pintBlueX, (int*)pintBlueY, (int*)pintBlueZ);
										return ret;
									}
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCHRMXYZFixed(PngStruct* pngPtr, PngInfo* infoPtr, int* intRedX, int* intRedY, ref int intRedZ, ref int intGreenX, ref int intGreenY, int* intGreenZ, ref int intBlueX, ref int intBlueY, ref int intBlueZ)
		{
			fixed (int* pintRedZ = &intRedZ)
			{
				fixed (int* pintGreenX = &intGreenX)
				{
					fixed (int* pintGreenY = &intGreenY)
					{
						fixed (int* pintBlueX = &intBlueX)
						{
							fixed (int* pintBlueY = &intBlueY)
							{
								fixed (int* pintBlueZ = &intBlueZ)
								{
									uint ret = GetCHRMXYZFixedNative(pngPtr, infoPtr, intRedX, intRedY, (int*)pintRedZ, (int*)pintGreenX, (int*)pintGreenY, intGreenZ, (int*)pintBlueX, (int*)pintBlueY, (int*)pintBlueZ);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCHRMXYZFixed(PngStruct* pngPtr, PngInfo* infoPtr, ref int intRedX, int* intRedY, ref int intRedZ, ref int intGreenX, ref int intGreenY, int* intGreenZ, ref int intBlueX, ref int intBlueY, ref int intBlueZ)
		{
			fixed (int* pintRedX = &intRedX)
			{
				fixed (int* pintRedZ = &intRedZ)
				{
					fixed (int* pintGreenX = &intGreenX)
					{
						fixed (int* pintGreenY = &intGreenY)
						{
							fixed (int* pintBlueX = &intBlueX)
							{
								fixed (int* pintBlueY = &intBlueY)
								{
									fixed (int* pintBlueZ = &intBlueZ)
									{
										uint ret = GetCHRMXYZFixedNative(pngPtr, infoPtr, (int*)pintRedX, intRedY, (int*)pintRedZ, (int*)pintGreenX, (int*)pintGreenY, intGreenZ, (int*)pintBlueX, (int*)pintBlueY, (int*)pintBlueZ);
										return ret;
									}
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCHRMXYZFixed(PngStruct* pngPtr, PngInfo* infoPtr, int* intRedX, ref int intRedY, ref int intRedZ, ref int intGreenX, ref int intGreenY, int* intGreenZ, ref int intBlueX, ref int intBlueY, ref int intBlueZ)
		{
			fixed (int* pintRedY = &intRedY)
			{
				fixed (int* pintRedZ = &intRedZ)
				{
					fixed (int* pintGreenX = &intGreenX)
					{
						fixed (int* pintGreenY = &intGreenY)
						{
							fixed (int* pintBlueX = &intBlueX)
							{
								fixed (int* pintBlueY = &intBlueY)
								{
									fixed (int* pintBlueZ = &intBlueZ)
									{
										uint ret = GetCHRMXYZFixedNative(pngPtr, infoPtr, intRedX, (int*)pintRedY, (int*)pintRedZ, (int*)pintGreenX, (int*)pintGreenY, intGreenZ, (int*)pintBlueX, (int*)pintBlueY, (int*)pintBlueZ);
										return ret;
									}
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCHRMXYZFixed(PngStruct* pngPtr, PngInfo* infoPtr, ref int intRedX, ref int intRedY, ref int intRedZ, ref int intGreenX, ref int intGreenY, int* intGreenZ, ref int intBlueX, ref int intBlueY, ref int intBlueZ)
		{
			fixed (int* pintRedX = &intRedX)
			{
				fixed (int* pintRedY = &intRedY)
				{
					fixed (int* pintRedZ = &intRedZ)
					{
						fixed (int* pintGreenX = &intGreenX)
						{
							fixed (int* pintGreenY = &intGreenY)
							{
								fixed (int* pintBlueX = &intBlueX)
								{
									fixed (int* pintBlueY = &intBlueY)
									{
										fixed (int* pintBlueZ = &intBlueZ)
										{
											uint ret = GetCHRMXYZFixedNative(pngPtr, infoPtr, (int*)pintRedX, (int*)pintRedY, (int*)pintRedZ, (int*)pintGreenX, (int*)pintGreenY, intGreenZ, (int*)pintBlueX, (int*)pintBlueY, (int*)pintBlueZ);
											return ret;
										}
									}
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCHRMXYZFixed(PngStruct* pngPtr, PngInfo* infoPtr, int* intRedX, int* intRedY, int* intRedZ, int* intGreenX, int* intGreenY, ref int intGreenZ, ref int intBlueX, ref int intBlueY, ref int intBlueZ)
		{
			fixed (int* pintGreenZ = &intGreenZ)
			{
				fixed (int* pintBlueX = &intBlueX)
				{
					fixed (int* pintBlueY = &intBlueY)
					{
						fixed (int* pintBlueZ = &intBlueZ)
						{
							uint ret = GetCHRMXYZFixedNative(pngPtr, infoPtr, intRedX, intRedY, intRedZ, intGreenX, intGreenY, (int*)pintGreenZ, (int*)pintBlueX, (int*)pintBlueY, (int*)pintBlueZ);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCHRMXYZFixed(PngStruct* pngPtr, PngInfo* infoPtr, ref int intRedX, int* intRedY, int* intRedZ, int* intGreenX, int* intGreenY, ref int intGreenZ, ref int intBlueX, ref int intBlueY, ref int intBlueZ)
		{
			fixed (int* pintRedX = &intRedX)
			{
				fixed (int* pintGreenZ = &intGreenZ)
				{
					fixed (int* pintBlueX = &intBlueX)
					{
						fixed (int* pintBlueY = &intBlueY)
						{
							fixed (int* pintBlueZ = &intBlueZ)
							{
								uint ret = GetCHRMXYZFixedNative(pngPtr, infoPtr, (int*)pintRedX, intRedY, intRedZ, intGreenX, intGreenY, (int*)pintGreenZ, (int*)pintBlueX, (int*)pintBlueY, (int*)pintBlueZ);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCHRMXYZFixed(PngStruct* pngPtr, PngInfo* infoPtr, int* intRedX, ref int intRedY, int* intRedZ, int* intGreenX, int* intGreenY, ref int intGreenZ, ref int intBlueX, ref int intBlueY, ref int intBlueZ)
		{
			fixed (int* pintRedY = &intRedY)
			{
				fixed (int* pintGreenZ = &intGreenZ)
				{
					fixed (int* pintBlueX = &intBlueX)
					{
						fixed (int* pintBlueY = &intBlueY)
						{
							fixed (int* pintBlueZ = &intBlueZ)
							{
								uint ret = GetCHRMXYZFixedNative(pngPtr, infoPtr, intRedX, (int*)pintRedY, intRedZ, intGreenX, intGreenY, (int*)pintGreenZ, (int*)pintBlueX, (int*)pintBlueY, (int*)pintBlueZ);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCHRMXYZFixed(PngStruct* pngPtr, PngInfo* infoPtr, ref int intRedX, ref int intRedY, int* intRedZ, int* intGreenX, int* intGreenY, ref int intGreenZ, ref int intBlueX, ref int intBlueY, ref int intBlueZ)
		{
			fixed (int* pintRedX = &intRedX)
			{
				fixed (int* pintRedY = &intRedY)
				{
					fixed (int* pintGreenZ = &intGreenZ)
					{
						fixed (int* pintBlueX = &intBlueX)
						{
							fixed (int* pintBlueY = &intBlueY)
							{
								fixed (int* pintBlueZ = &intBlueZ)
								{
									uint ret = GetCHRMXYZFixedNative(pngPtr, infoPtr, (int*)pintRedX, (int*)pintRedY, intRedZ, intGreenX, intGreenY, (int*)pintGreenZ, (int*)pintBlueX, (int*)pintBlueY, (int*)pintBlueZ);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCHRMXYZFixed(PngStruct* pngPtr, PngInfo* infoPtr, int* intRedX, int* intRedY, ref int intRedZ, int* intGreenX, int* intGreenY, ref int intGreenZ, ref int intBlueX, ref int intBlueY, ref int intBlueZ)
		{
			fixed (int* pintRedZ = &intRedZ)
			{
				fixed (int* pintGreenZ = &intGreenZ)
				{
					fixed (int* pintBlueX = &intBlueX)
					{
						fixed (int* pintBlueY = &intBlueY)
						{
							fixed (int* pintBlueZ = &intBlueZ)
							{
								uint ret = GetCHRMXYZFixedNative(pngPtr, infoPtr, intRedX, intRedY, (int*)pintRedZ, intGreenX, intGreenY, (int*)pintGreenZ, (int*)pintBlueX, (int*)pintBlueY, (int*)pintBlueZ);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCHRMXYZFixed(PngStruct* pngPtr, PngInfo* infoPtr, ref int intRedX, int* intRedY, ref int intRedZ, int* intGreenX, int* intGreenY, ref int intGreenZ, ref int intBlueX, ref int intBlueY, ref int intBlueZ)
		{
			fixed (int* pintRedX = &intRedX)
			{
				fixed (int* pintRedZ = &intRedZ)
				{
					fixed (int* pintGreenZ = &intGreenZ)
					{
						fixed (int* pintBlueX = &intBlueX)
						{
							fixed (int* pintBlueY = &intBlueY)
							{
								fixed (int* pintBlueZ = &intBlueZ)
								{
									uint ret = GetCHRMXYZFixedNative(pngPtr, infoPtr, (int*)pintRedX, intRedY, (int*)pintRedZ, intGreenX, intGreenY, (int*)pintGreenZ, (int*)pintBlueX, (int*)pintBlueY, (int*)pintBlueZ);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCHRMXYZFixed(PngStruct* pngPtr, PngInfo* infoPtr, int* intRedX, ref int intRedY, ref int intRedZ, int* intGreenX, int* intGreenY, ref int intGreenZ, ref int intBlueX, ref int intBlueY, ref int intBlueZ)
		{
			fixed (int* pintRedY = &intRedY)
			{
				fixed (int* pintRedZ = &intRedZ)
				{
					fixed (int* pintGreenZ = &intGreenZ)
					{
						fixed (int* pintBlueX = &intBlueX)
						{
							fixed (int* pintBlueY = &intBlueY)
							{
								fixed (int* pintBlueZ = &intBlueZ)
								{
									uint ret = GetCHRMXYZFixedNative(pngPtr, infoPtr, intRedX, (int*)pintRedY, (int*)pintRedZ, intGreenX, intGreenY, (int*)pintGreenZ, (int*)pintBlueX, (int*)pintBlueY, (int*)pintBlueZ);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCHRMXYZFixed(PngStruct* pngPtr, PngInfo* infoPtr, ref int intRedX, ref int intRedY, ref int intRedZ, int* intGreenX, int* intGreenY, ref int intGreenZ, ref int intBlueX, ref int intBlueY, ref int intBlueZ)
		{
			fixed (int* pintRedX = &intRedX)
			{
				fixed (int* pintRedY = &intRedY)
				{
					fixed (int* pintRedZ = &intRedZ)
					{
						fixed (int* pintGreenZ = &intGreenZ)
						{
							fixed (int* pintBlueX = &intBlueX)
							{
								fixed (int* pintBlueY = &intBlueY)
								{
									fixed (int* pintBlueZ = &intBlueZ)
									{
										uint ret = GetCHRMXYZFixedNative(pngPtr, infoPtr, (int*)pintRedX, (int*)pintRedY, (int*)pintRedZ, intGreenX, intGreenY, (int*)pintGreenZ, (int*)pintBlueX, (int*)pintBlueY, (int*)pintBlueZ);
										return ret;
									}
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCHRMXYZFixed(PngStruct* pngPtr, PngInfo* infoPtr, int* intRedX, int* intRedY, int* intRedZ, ref int intGreenX, int* intGreenY, ref int intGreenZ, ref int intBlueX, ref int intBlueY, ref int intBlueZ)
		{
			fixed (int* pintGreenX = &intGreenX)
			{
				fixed (int* pintGreenZ = &intGreenZ)
				{
					fixed (int* pintBlueX = &intBlueX)
					{
						fixed (int* pintBlueY = &intBlueY)
						{
							fixed (int* pintBlueZ = &intBlueZ)
							{
								uint ret = GetCHRMXYZFixedNative(pngPtr, infoPtr, intRedX, intRedY, intRedZ, (int*)pintGreenX, intGreenY, (int*)pintGreenZ, (int*)pintBlueX, (int*)pintBlueY, (int*)pintBlueZ);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCHRMXYZFixed(PngStruct* pngPtr, PngInfo* infoPtr, ref int intRedX, int* intRedY, int* intRedZ, ref int intGreenX, int* intGreenY, ref int intGreenZ, ref int intBlueX, ref int intBlueY, ref int intBlueZ)
		{
			fixed (int* pintRedX = &intRedX)
			{
				fixed (int* pintGreenX = &intGreenX)
				{
					fixed (int* pintGreenZ = &intGreenZ)
					{
						fixed (int* pintBlueX = &intBlueX)
						{
							fixed (int* pintBlueY = &intBlueY)
							{
								fixed (int* pintBlueZ = &intBlueZ)
								{
									uint ret = GetCHRMXYZFixedNative(pngPtr, infoPtr, (int*)pintRedX, intRedY, intRedZ, (int*)pintGreenX, intGreenY, (int*)pintGreenZ, (int*)pintBlueX, (int*)pintBlueY, (int*)pintBlueZ);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCHRMXYZFixed(PngStruct* pngPtr, PngInfo* infoPtr, int* intRedX, ref int intRedY, int* intRedZ, ref int intGreenX, int* intGreenY, ref int intGreenZ, ref int intBlueX, ref int intBlueY, ref int intBlueZ)
		{
			fixed (int* pintRedY = &intRedY)
			{
				fixed (int* pintGreenX = &intGreenX)
				{
					fixed (int* pintGreenZ = &intGreenZ)
					{
						fixed (int* pintBlueX = &intBlueX)
						{
							fixed (int* pintBlueY = &intBlueY)
							{
								fixed (int* pintBlueZ = &intBlueZ)
								{
									uint ret = GetCHRMXYZFixedNative(pngPtr, infoPtr, intRedX, (int*)pintRedY, intRedZ, (int*)pintGreenX, intGreenY, (int*)pintGreenZ, (int*)pintBlueX, (int*)pintBlueY, (int*)pintBlueZ);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCHRMXYZFixed(PngStruct* pngPtr, PngInfo* infoPtr, ref int intRedX, ref int intRedY, int* intRedZ, ref int intGreenX, int* intGreenY, ref int intGreenZ, ref int intBlueX, ref int intBlueY, ref int intBlueZ)
		{
			fixed (int* pintRedX = &intRedX)
			{
				fixed (int* pintRedY = &intRedY)
				{
					fixed (int* pintGreenX = &intGreenX)
					{
						fixed (int* pintGreenZ = &intGreenZ)
						{
							fixed (int* pintBlueX = &intBlueX)
							{
								fixed (int* pintBlueY = &intBlueY)
								{
									fixed (int* pintBlueZ = &intBlueZ)
									{
										uint ret = GetCHRMXYZFixedNative(pngPtr, infoPtr, (int*)pintRedX, (int*)pintRedY, intRedZ, (int*)pintGreenX, intGreenY, (int*)pintGreenZ, (int*)pintBlueX, (int*)pintBlueY, (int*)pintBlueZ);
										return ret;
									}
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCHRMXYZFixed(PngStruct* pngPtr, PngInfo* infoPtr, int* intRedX, int* intRedY, ref int intRedZ, ref int intGreenX, int* intGreenY, ref int intGreenZ, ref int intBlueX, ref int intBlueY, ref int intBlueZ)
		{
			fixed (int* pintRedZ = &intRedZ)
			{
				fixed (int* pintGreenX = &intGreenX)
				{
					fixed (int* pintGreenZ = &intGreenZ)
					{
						fixed (int* pintBlueX = &intBlueX)
						{
							fixed (int* pintBlueY = &intBlueY)
							{
								fixed (int* pintBlueZ = &intBlueZ)
								{
									uint ret = GetCHRMXYZFixedNative(pngPtr, infoPtr, intRedX, intRedY, (int*)pintRedZ, (int*)pintGreenX, intGreenY, (int*)pintGreenZ, (int*)pintBlueX, (int*)pintBlueY, (int*)pintBlueZ);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCHRMXYZFixed(PngStruct* pngPtr, PngInfo* infoPtr, ref int intRedX, int* intRedY, ref int intRedZ, ref int intGreenX, int* intGreenY, ref int intGreenZ, ref int intBlueX, ref int intBlueY, ref int intBlueZ)
		{
			fixed (int* pintRedX = &intRedX)
			{
				fixed (int* pintRedZ = &intRedZ)
				{
					fixed (int* pintGreenX = &intGreenX)
					{
						fixed (int* pintGreenZ = &intGreenZ)
						{
							fixed (int* pintBlueX = &intBlueX)
							{
								fixed (int* pintBlueY = &intBlueY)
								{
									fixed (int* pintBlueZ = &intBlueZ)
									{
										uint ret = GetCHRMXYZFixedNative(pngPtr, infoPtr, (int*)pintRedX, intRedY, (int*)pintRedZ, (int*)pintGreenX, intGreenY, (int*)pintGreenZ, (int*)pintBlueX, (int*)pintBlueY, (int*)pintBlueZ);
										return ret;
									}
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCHRMXYZFixed(PngStruct* pngPtr, PngInfo* infoPtr, int* intRedX, ref int intRedY, ref int intRedZ, ref int intGreenX, int* intGreenY, ref int intGreenZ, ref int intBlueX, ref int intBlueY, ref int intBlueZ)
		{
			fixed (int* pintRedY = &intRedY)
			{
				fixed (int* pintRedZ = &intRedZ)
				{
					fixed (int* pintGreenX = &intGreenX)
					{
						fixed (int* pintGreenZ = &intGreenZ)
						{
							fixed (int* pintBlueX = &intBlueX)
							{
								fixed (int* pintBlueY = &intBlueY)
								{
									fixed (int* pintBlueZ = &intBlueZ)
									{
										uint ret = GetCHRMXYZFixedNative(pngPtr, infoPtr, intRedX, (int*)pintRedY, (int*)pintRedZ, (int*)pintGreenX, intGreenY, (int*)pintGreenZ, (int*)pintBlueX, (int*)pintBlueY, (int*)pintBlueZ);
										return ret;
									}
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCHRMXYZFixed(PngStruct* pngPtr, PngInfo* infoPtr, ref int intRedX, ref int intRedY, ref int intRedZ, ref int intGreenX, int* intGreenY, ref int intGreenZ, ref int intBlueX, ref int intBlueY, ref int intBlueZ)
		{
			fixed (int* pintRedX = &intRedX)
			{
				fixed (int* pintRedY = &intRedY)
				{
					fixed (int* pintRedZ = &intRedZ)
					{
						fixed (int* pintGreenX = &intGreenX)
						{
							fixed (int* pintGreenZ = &intGreenZ)
							{
								fixed (int* pintBlueX = &intBlueX)
								{
									fixed (int* pintBlueY = &intBlueY)
									{
										fixed (int* pintBlueZ = &intBlueZ)
										{
											uint ret = GetCHRMXYZFixedNative(pngPtr, infoPtr, (int*)pintRedX, (int*)pintRedY, (int*)pintRedZ, (int*)pintGreenX, intGreenY, (int*)pintGreenZ, (int*)pintBlueX, (int*)pintBlueY, (int*)pintBlueZ);
											return ret;
										}
									}
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCHRMXYZFixed(PngStruct* pngPtr, PngInfo* infoPtr, int* intRedX, int* intRedY, int* intRedZ, int* intGreenX, ref int intGreenY, ref int intGreenZ, ref int intBlueX, ref int intBlueY, ref int intBlueZ)
		{
			fixed (int* pintGreenY = &intGreenY)
			{
				fixed (int* pintGreenZ = &intGreenZ)
				{
					fixed (int* pintBlueX = &intBlueX)
					{
						fixed (int* pintBlueY = &intBlueY)
						{
							fixed (int* pintBlueZ = &intBlueZ)
							{
								uint ret = GetCHRMXYZFixedNative(pngPtr, infoPtr, intRedX, intRedY, intRedZ, intGreenX, (int*)pintGreenY, (int*)pintGreenZ, (int*)pintBlueX, (int*)pintBlueY, (int*)pintBlueZ);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCHRMXYZFixed(PngStruct* pngPtr, PngInfo* infoPtr, ref int intRedX, int* intRedY, int* intRedZ, int* intGreenX, ref int intGreenY, ref int intGreenZ, ref int intBlueX, ref int intBlueY, ref int intBlueZ)
		{
			fixed (int* pintRedX = &intRedX)
			{
				fixed (int* pintGreenY = &intGreenY)
				{
					fixed (int* pintGreenZ = &intGreenZ)
					{
						fixed (int* pintBlueX = &intBlueX)
						{
							fixed (int* pintBlueY = &intBlueY)
							{
								fixed (int* pintBlueZ = &intBlueZ)
								{
									uint ret = GetCHRMXYZFixedNative(pngPtr, infoPtr, (int*)pintRedX, intRedY, intRedZ, intGreenX, (int*)pintGreenY, (int*)pintGreenZ, (int*)pintBlueX, (int*)pintBlueY, (int*)pintBlueZ);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCHRMXYZFixed(PngStruct* pngPtr, PngInfo* infoPtr, int* intRedX, ref int intRedY, int* intRedZ, int* intGreenX, ref int intGreenY, ref int intGreenZ, ref int intBlueX, ref int intBlueY, ref int intBlueZ)
		{
			fixed (int* pintRedY = &intRedY)
			{
				fixed (int* pintGreenY = &intGreenY)
				{
					fixed (int* pintGreenZ = &intGreenZ)
					{
						fixed (int* pintBlueX = &intBlueX)
						{
							fixed (int* pintBlueY = &intBlueY)
							{
								fixed (int* pintBlueZ = &intBlueZ)
								{
									uint ret = GetCHRMXYZFixedNative(pngPtr, infoPtr, intRedX, (int*)pintRedY, intRedZ, intGreenX, (int*)pintGreenY, (int*)pintGreenZ, (int*)pintBlueX, (int*)pintBlueY, (int*)pintBlueZ);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCHRMXYZFixed(PngStruct* pngPtr, PngInfo* infoPtr, ref int intRedX, ref int intRedY, int* intRedZ, int* intGreenX, ref int intGreenY, ref int intGreenZ, ref int intBlueX, ref int intBlueY, ref int intBlueZ)
		{
			fixed (int* pintRedX = &intRedX)
			{
				fixed (int* pintRedY = &intRedY)
				{
					fixed (int* pintGreenY = &intGreenY)
					{
						fixed (int* pintGreenZ = &intGreenZ)
						{
							fixed (int* pintBlueX = &intBlueX)
							{
								fixed (int* pintBlueY = &intBlueY)
								{
									fixed (int* pintBlueZ = &intBlueZ)
									{
										uint ret = GetCHRMXYZFixedNative(pngPtr, infoPtr, (int*)pintRedX, (int*)pintRedY, intRedZ, intGreenX, (int*)pintGreenY, (int*)pintGreenZ, (int*)pintBlueX, (int*)pintBlueY, (int*)pintBlueZ);
										return ret;
									}
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCHRMXYZFixed(PngStruct* pngPtr, PngInfo* infoPtr, int* intRedX, int* intRedY, ref int intRedZ, int* intGreenX, ref int intGreenY, ref int intGreenZ, ref int intBlueX, ref int intBlueY, ref int intBlueZ)
		{
			fixed (int* pintRedZ = &intRedZ)
			{
				fixed (int* pintGreenY = &intGreenY)
				{
					fixed (int* pintGreenZ = &intGreenZ)
					{
						fixed (int* pintBlueX = &intBlueX)
						{
							fixed (int* pintBlueY = &intBlueY)
							{
								fixed (int* pintBlueZ = &intBlueZ)
								{
									uint ret = GetCHRMXYZFixedNative(pngPtr, infoPtr, intRedX, intRedY, (int*)pintRedZ, intGreenX, (int*)pintGreenY, (int*)pintGreenZ, (int*)pintBlueX, (int*)pintBlueY, (int*)pintBlueZ);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCHRMXYZFixed(PngStruct* pngPtr, PngInfo* infoPtr, ref int intRedX, int* intRedY, ref int intRedZ, int* intGreenX, ref int intGreenY, ref int intGreenZ, ref int intBlueX, ref int intBlueY, ref int intBlueZ)
		{
			fixed (int* pintRedX = &intRedX)
			{
				fixed (int* pintRedZ = &intRedZ)
				{
					fixed (int* pintGreenY = &intGreenY)
					{
						fixed (int* pintGreenZ = &intGreenZ)
						{
							fixed (int* pintBlueX = &intBlueX)
							{
								fixed (int* pintBlueY = &intBlueY)
								{
									fixed (int* pintBlueZ = &intBlueZ)
									{
										uint ret = GetCHRMXYZFixedNative(pngPtr, infoPtr, (int*)pintRedX, intRedY, (int*)pintRedZ, intGreenX, (int*)pintGreenY, (int*)pintGreenZ, (int*)pintBlueX, (int*)pintBlueY, (int*)pintBlueZ);
										return ret;
									}
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCHRMXYZFixed(PngStruct* pngPtr, PngInfo* infoPtr, int* intRedX, ref int intRedY, ref int intRedZ, int* intGreenX, ref int intGreenY, ref int intGreenZ, ref int intBlueX, ref int intBlueY, ref int intBlueZ)
		{
			fixed (int* pintRedY = &intRedY)
			{
				fixed (int* pintRedZ = &intRedZ)
				{
					fixed (int* pintGreenY = &intGreenY)
					{
						fixed (int* pintGreenZ = &intGreenZ)
						{
							fixed (int* pintBlueX = &intBlueX)
							{
								fixed (int* pintBlueY = &intBlueY)
								{
									fixed (int* pintBlueZ = &intBlueZ)
									{
										uint ret = GetCHRMXYZFixedNative(pngPtr, infoPtr, intRedX, (int*)pintRedY, (int*)pintRedZ, intGreenX, (int*)pintGreenY, (int*)pintGreenZ, (int*)pintBlueX, (int*)pintBlueY, (int*)pintBlueZ);
										return ret;
									}
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCHRMXYZFixed(PngStruct* pngPtr, PngInfo* infoPtr, ref int intRedX, ref int intRedY, ref int intRedZ, int* intGreenX, ref int intGreenY, ref int intGreenZ, ref int intBlueX, ref int intBlueY, ref int intBlueZ)
		{
			fixed (int* pintRedX = &intRedX)
			{
				fixed (int* pintRedY = &intRedY)
				{
					fixed (int* pintRedZ = &intRedZ)
					{
						fixed (int* pintGreenY = &intGreenY)
						{
							fixed (int* pintGreenZ = &intGreenZ)
							{
								fixed (int* pintBlueX = &intBlueX)
								{
									fixed (int* pintBlueY = &intBlueY)
									{
										fixed (int* pintBlueZ = &intBlueZ)
										{
											uint ret = GetCHRMXYZFixedNative(pngPtr, infoPtr, (int*)pintRedX, (int*)pintRedY, (int*)pintRedZ, intGreenX, (int*)pintGreenY, (int*)pintGreenZ, (int*)pintBlueX, (int*)pintBlueY, (int*)pintBlueZ);
											return ret;
										}
									}
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCHRMXYZFixed(PngStruct* pngPtr, PngInfo* infoPtr, int* intRedX, int* intRedY, int* intRedZ, ref int intGreenX, ref int intGreenY, ref int intGreenZ, ref int intBlueX, ref int intBlueY, ref int intBlueZ)
		{
			fixed (int* pintGreenX = &intGreenX)
			{
				fixed (int* pintGreenY = &intGreenY)
				{
					fixed (int* pintGreenZ = &intGreenZ)
					{
						fixed (int* pintBlueX = &intBlueX)
						{
							fixed (int* pintBlueY = &intBlueY)
							{
								fixed (int* pintBlueZ = &intBlueZ)
								{
									uint ret = GetCHRMXYZFixedNative(pngPtr, infoPtr, intRedX, intRedY, intRedZ, (int*)pintGreenX, (int*)pintGreenY, (int*)pintGreenZ, (int*)pintBlueX, (int*)pintBlueY, (int*)pintBlueZ);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCHRMXYZFixed(PngStruct* pngPtr, PngInfo* infoPtr, ref int intRedX, int* intRedY, int* intRedZ, ref int intGreenX, ref int intGreenY, ref int intGreenZ, ref int intBlueX, ref int intBlueY, ref int intBlueZ)
		{
			fixed (int* pintRedX = &intRedX)
			{
				fixed (int* pintGreenX = &intGreenX)
				{
					fixed (int* pintGreenY = &intGreenY)
					{
						fixed (int* pintGreenZ = &intGreenZ)
						{
							fixed (int* pintBlueX = &intBlueX)
							{
								fixed (int* pintBlueY = &intBlueY)
								{
									fixed (int* pintBlueZ = &intBlueZ)
									{
										uint ret = GetCHRMXYZFixedNative(pngPtr, infoPtr, (int*)pintRedX, intRedY, intRedZ, (int*)pintGreenX, (int*)pintGreenY, (int*)pintGreenZ, (int*)pintBlueX, (int*)pintBlueY, (int*)pintBlueZ);
										return ret;
									}
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCHRMXYZFixed(PngStruct* pngPtr, PngInfo* infoPtr, int* intRedX, ref int intRedY, int* intRedZ, ref int intGreenX, ref int intGreenY, ref int intGreenZ, ref int intBlueX, ref int intBlueY, ref int intBlueZ)
		{
			fixed (int* pintRedY = &intRedY)
			{
				fixed (int* pintGreenX = &intGreenX)
				{
					fixed (int* pintGreenY = &intGreenY)
					{
						fixed (int* pintGreenZ = &intGreenZ)
						{
							fixed (int* pintBlueX = &intBlueX)
							{
								fixed (int* pintBlueY = &intBlueY)
								{
									fixed (int* pintBlueZ = &intBlueZ)
									{
										uint ret = GetCHRMXYZFixedNative(pngPtr, infoPtr, intRedX, (int*)pintRedY, intRedZ, (int*)pintGreenX, (int*)pintGreenY, (int*)pintGreenZ, (int*)pintBlueX, (int*)pintBlueY, (int*)pintBlueZ);
										return ret;
									}
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCHRMXYZFixed(PngStruct* pngPtr, PngInfo* infoPtr, ref int intRedX, ref int intRedY, int* intRedZ, ref int intGreenX, ref int intGreenY, ref int intGreenZ, ref int intBlueX, ref int intBlueY, ref int intBlueZ)
		{
			fixed (int* pintRedX = &intRedX)
			{
				fixed (int* pintRedY = &intRedY)
				{
					fixed (int* pintGreenX = &intGreenX)
					{
						fixed (int* pintGreenY = &intGreenY)
						{
							fixed (int* pintGreenZ = &intGreenZ)
							{
								fixed (int* pintBlueX = &intBlueX)
								{
									fixed (int* pintBlueY = &intBlueY)
									{
										fixed (int* pintBlueZ = &intBlueZ)
										{
											uint ret = GetCHRMXYZFixedNative(pngPtr, infoPtr, (int*)pintRedX, (int*)pintRedY, intRedZ, (int*)pintGreenX, (int*)pintGreenY, (int*)pintGreenZ, (int*)pintBlueX, (int*)pintBlueY, (int*)pintBlueZ);
											return ret;
										}
									}
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCHRMXYZFixed(PngStruct* pngPtr, PngInfo* infoPtr, int* intRedX, int* intRedY, ref int intRedZ, ref int intGreenX, ref int intGreenY, ref int intGreenZ, ref int intBlueX, ref int intBlueY, ref int intBlueZ)
		{
			fixed (int* pintRedZ = &intRedZ)
			{
				fixed (int* pintGreenX = &intGreenX)
				{
					fixed (int* pintGreenY = &intGreenY)
					{
						fixed (int* pintGreenZ = &intGreenZ)
						{
							fixed (int* pintBlueX = &intBlueX)
							{
								fixed (int* pintBlueY = &intBlueY)
								{
									fixed (int* pintBlueZ = &intBlueZ)
									{
										uint ret = GetCHRMXYZFixedNative(pngPtr, infoPtr, intRedX, intRedY, (int*)pintRedZ, (int*)pintGreenX, (int*)pintGreenY, (int*)pintGreenZ, (int*)pintBlueX, (int*)pintBlueY, (int*)pintBlueZ);
										return ret;
									}
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCHRMXYZFixed(PngStruct* pngPtr, PngInfo* infoPtr, ref int intRedX, int* intRedY, ref int intRedZ, ref int intGreenX, ref int intGreenY, ref int intGreenZ, ref int intBlueX, ref int intBlueY, ref int intBlueZ)
		{
			fixed (int* pintRedX = &intRedX)
			{
				fixed (int* pintRedZ = &intRedZ)
				{
					fixed (int* pintGreenX = &intGreenX)
					{
						fixed (int* pintGreenY = &intGreenY)
						{
							fixed (int* pintGreenZ = &intGreenZ)
							{
								fixed (int* pintBlueX = &intBlueX)
								{
									fixed (int* pintBlueY = &intBlueY)
									{
										fixed (int* pintBlueZ = &intBlueZ)
										{
											uint ret = GetCHRMXYZFixedNative(pngPtr, infoPtr, (int*)pintRedX, intRedY, (int*)pintRedZ, (int*)pintGreenX, (int*)pintGreenY, (int*)pintGreenZ, (int*)pintBlueX, (int*)pintBlueY, (int*)pintBlueZ);
											return ret;
										}
									}
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCHRMXYZFixed(PngStruct* pngPtr, PngInfo* infoPtr, int* intRedX, ref int intRedY, ref int intRedZ, ref int intGreenX, ref int intGreenY, ref int intGreenZ, ref int intBlueX, ref int intBlueY, ref int intBlueZ)
		{
			fixed (int* pintRedY = &intRedY)
			{
				fixed (int* pintRedZ = &intRedZ)
				{
					fixed (int* pintGreenX = &intGreenX)
					{
						fixed (int* pintGreenY = &intGreenY)
						{
							fixed (int* pintGreenZ = &intGreenZ)
							{
								fixed (int* pintBlueX = &intBlueX)
								{
									fixed (int* pintBlueY = &intBlueY)
									{
										fixed (int* pintBlueZ = &intBlueZ)
										{
											uint ret = GetCHRMXYZFixedNative(pngPtr, infoPtr, intRedX, (int*)pintRedY, (int*)pintRedZ, (int*)pintGreenX, (int*)pintGreenY, (int*)pintGreenZ, (int*)pintBlueX, (int*)pintBlueY, (int*)pintBlueZ);
											return ret;
										}
									}
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCHRMXYZFixed(PngStruct* pngPtr, PngInfo* infoPtr, ref int intRedX, ref int intRedY, ref int intRedZ, ref int intGreenX, ref int intGreenY, ref int intGreenZ, ref int intBlueX, ref int intBlueY, ref int intBlueZ)
		{
			fixed (int* pintRedX = &intRedX)
			{
				fixed (int* pintRedY = &intRedY)
				{
					fixed (int* pintRedZ = &intRedZ)
					{
						fixed (int* pintGreenX = &intGreenX)
						{
							fixed (int* pintGreenY = &intGreenY)
							{
								fixed (int* pintGreenZ = &intGreenZ)
								{
									fixed (int* pintBlueX = &intBlueX)
									{
										fixed (int* pintBlueY = &intBlueY)
										{
											fixed (int* pintBlueZ = &intBlueZ)
											{
												uint ret = GetCHRMXYZFixedNative(pngPtr, infoPtr, (int*)pintRedX, (int*)pintRedY, (int*)pintRedZ, (int*)pintGreenX, (int*)pintGreenY, (int*)pintGreenZ, (int*)pintBlueX, (int*)pintBlueY, (int*)pintBlueZ);
												return ret;
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void SetCHRMNative(PngStruct* pngPtr, PngInfo* infoPtr, double whiteX, double whiteY, double redX, double redY, double greenX, double greenY, double blueX, double blueY)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<PngStruct*, PngInfo*, double, double, double, double, double, double, double, double, void>)funcTable[153])(pngPtr, infoPtr, whiteX, whiteY, redX, redY, greenX, greenY, blueX, blueY);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, double, double, double, double, double, double, double, double, void>)funcTable[153])((nint)pngPtr, (nint)infoPtr, whiteX, whiteY, redX, redY, greenX, greenY, blueX, blueY);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void SetCHRM(PngStruct* pngPtr, PngInfo* infoPtr, double whiteX, double whiteY, double redX, double redY, double greenX, double greenY, double blueX, double blueY)
		{
			SetCHRMNative(pngPtr, infoPtr, whiteX, whiteY, redX, redY, greenX, greenY, blueX, blueY);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void SetCHRMXYZNative(PngStruct* pngPtr, PngInfo* infoPtr, double redX, double redY, double redZ, double greenX, double greenY, double greenZ, double blueX, double blueY, double blueZ)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<PngStruct*, PngInfo*, double, double, double, double, double, double, double, double, double, void>)funcTable[154])(pngPtr, infoPtr, redX, redY, redZ, greenX, greenY, greenZ, blueX, blueY, blueZ);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, double, double, double, double, double, double, double, double, double, void>)funcTable[154])((nint)pngPtr, (nint)infoPtr, redX, redY, redZ, greenX, greenY, greenZ, blueX, blueY, blueZ);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void SetCHRMXYZ(PngStruct* pngPtr, PngInfo* infoPtr, double redX, double redY, double redZ, double greenX, double greenY, double greenZ, double blueX, double blueY, double blueZ)
		{
			SetCHRMXYZNative(pngPtr, infoPtr, redX, redY, redZ, greenX, greenY, greenZ, blueX, blueY, blueZ);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void SetCHRMFixedNative(PngStruct* pngPtr, PngInfo* infoPtr, int intWhiteX, int intWhiteY, int intRedX, int intRedY, int intGreenX, int intGreenY, int intBlueX, int intBlueY)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<PngStruct*, PngInfo*, int, int, int, int, int, int, int, int, void>)funcTable[155])(pngPtr, infoPtr, intWhiteX, intWhiteY, intRedX, intRedY, intGreenX, intGreenY, intBlueX, intBlueY);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, int, int, int, int, int, int, int, int, void>)funcTable[155])((nint)pngPtr, (nint)infoPtr, intWhiteX, intWhiteY, intRedX, intRedY, intGreenX, intGreenY, intBlueX, intBlueY);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void SetCHRMFixed(PngStruct* pngPtr, PngInfo* infoPtr, int intWhiteX, int intWhiteY, int intRedX, int intRedY, int intGreenX, int intGreenY, int intBlueX, int intBlueY)
		{
			SetCHRMFixedNative(pngPtr, infoPtr, intWhiteX, intWhiteY, intRedX, intRedY, intGreenX, intGreenY, intBlueX, intBlueY);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void SetCHRMXYZFixedNative(PngStruct* pngPtr, PngInfo* infoPtr, int intRedX, int intRedY, int intRedZ, int intGreenX, int intGreenY, int intGreenZ, int intBlueX, int intBlueY, int intBlueZ)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<PngStruct*, PngInfo*, int, int, int, int, int, int, int, int, int, void>)funcTable[156])(pngPtr, infoPtr, intRedX, intRedY, intRedZ, intGreenX, intGreenY, intGreenZ, intBlueX, intBlueY, intBlueZ);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, int, int, int, int, int, int, int, int, int, void>)funcTable[156])((nint)pngPtr, (nint)infoPtr, intRedX, intRedY, intRedZ, intGreenX, intGreenY, intGreenZ, intBlueX, intBlueY, intBlueZ);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void SetCHRMXYZFixed(PngStruct* pngPtr, PngInfo* infoPtr, int intRedX, int intRedY, int intRedZ, int intGreenX, int intGreenY, int intGreenZ, int intBlueX, int intBlueY, int intBlueZ)
		{
			SetCHRMXYZFixedNative(pngPtr, infoPtr, intRedX, intRedY, intRedZ, intGreenX, intGreenY, intGreenZ, intBlueX, intBlueY, intBlueZ);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static uint GetCICPNative(PngStruct* pngPtr, PngInfo* infoPtr, byte* colourPrimaries, byte* transferFunction, byte* matrixCoefficients, byte* videoFullRangeFlag)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<PngStruct*, PngInfo*, byte*, byte*, byte*, byte*, uint>)funcTable[157])(pngPtr, infoPtr, colourPrimaries, transferFunction, matrixCoefficients, videoFullRangeFlag);
			#else
			return (uint)((delegate* unmanaged[Cdecl]<nint, nint, nint, nint, nint, nint, uint>)funcTable[157])((nint)pngPtr, (nint)infoPtr, (nint)colourPrimaries, (nint)transferFunction, (nint)matrixCoefficients, (nint)videoFullRangeFlag);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCICP(PngStruct* pngPtr, PngInfo* infoPtr, byte* colourPrimaries, byte* transferFunction, byte* matrixCoefficients, byte* videoFullRangeFlag)
		{
			uint ret = GetCICPNative(pngPtr, infoPtr, colourPrimaries, transferFunction, matrixCoefficients, videoFullRangeFlag);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCICP(PngStruct* pngPtr, PngInfo* infoPtr, ReadOnlySpan<byte> colourPrimaries, byte* transferFunction, byte* matrixCoefficients, byte* videoFullRangeFlag)
		{
			fixed (byte* pcolourPrimaries = colourPrimaries)
			{
				uint ret = GetCICPNative(pngPtr, infoPtr, (byte*)pcolourPrimaries, transferFunction, matrixCoefficients, videoFullRangeFlag);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCICP(PngStruct* pngPtr, PngInfo* infoPtr, string colourPrimaries, byte* transferFunction, byte* matrixCoefficients, byte* videoFullRangeFlag)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (colourPrimaries != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(colourPrimaries);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(colourPrimaries, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			uint ret = GetCICPNative(pngPtr, infoPtr, pStr0, transferFunction, matrixCoefficients, videoFullRangeFlag);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCICP(PngStruct* pngPtr, PngInfo* infoPtr, byte* colourPrimaries, ReadOnlySpan<byte> transferFunction, byte* matrixCoefficients, byte* videoFullRangeFlag)
		{
			fixed (byte* ptransferFunction = transferFunction)
			{
				uint ret = GetCICPNative(pngPtr, infoPtr, colourPrimaries, (byte*)ptransferFunction, matrixCoefficients, videoFullRangeFlag);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCICP(PngStruct* pngPtr, PngInfo* infoPtr, byte* colourPrimaries, string transferFunction, byte* matrixCoefficients, byte* videoFullRangeFlag)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (transferFunction != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(transferFunction);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(transferFunction, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			uint ret = GetCICPNative(pngPtr, infoPtr, colourPrimaries, pStr0, matrixCoefficients, videoFullRangeFlag);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCICP(PngStruct* pngPtr, PngInfo* infoPtr, ReadOnlySpan<byte> colourPrimaries, ReadOnlySpan<byte> transferFunction, byte* matrixCoefficients, byte* videoFullRangeFlag)
		{
			fixed (byte* pcolourPrimaries = colourPrimaries)
			{
				fixed (byte* ptransferFunction = transferFunction)
				{
					uint ret = GetCICPNative(pngPtr, infoPtr, (byte*)pcolourPrimaries, (byte*)ptransferFunction, matrixCoefficients, videoFullRangeFlag);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCICP(PngStruct* pngPtr, PngInfo* infoPtr, string colourPrimaries, string transferFunction, byte* matrixCoefficients, byte* videoFullRangeFlag)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (colourPrimaries != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(colourPrimaries);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(colourPrimaries, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (transferFunction != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(transferFunction);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(transferFunction, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			uint ret = GetCICPNative(pngPtr, infoPtr, pStr0, pStr1, matrixCoefficients, videoFullRangeFlag);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCICP(PngStruct* pngPtr, PngInfo* infoPtr, byte* colourPrimaries, byte* transferFunction, ReadOnlySpan<byte> matrixCoefficients, byte* videoFullRangeFlag)
		{
			fixed (byte* pmatrixCoefficients = matrixCoefficients)
			{
				uint ret = GetCICPNative(pngPtr, infoPtr, colourPrimaries, transferFunction, (byte*)pmatrixCoefficients, videoFullRangeFlag);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCICP(PngStruct* pngPtr, PngInfo* infoPtr, byte* colourPrimaries, byte* transferFunction, string matrixCoefficients, byte* videoFullRangeFlag)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (matrixCoefficients != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(matrixCoefficients);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(matrixCoefficients, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			uint ret = GetCICPNative(pngPtr, infoPtr, colourPrimaries, transferFunction, pStr0, videoFullRangeFlag);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCICP(PngStruct* pngPtr, PngInfo* infoPtr, ReadOnlySpan<byte> colourPrimaries, byte* transferFunction, ReadOnlySpan<byte> matrixCoefficients, byte* videoFullRangeFlag)
		{
			fixed (byte* pcolourPrimaries = colourPrimaries)
			{
				fixed (byte* pmatrixCoefficients = matrixCoefficients)
				{
					uint ret = GetCICPNative(pngPtr, infoPtr, (byte*)pcolourPrimaries, transferFunction, (byte*)pmatrixCoefficients, videoFullRangeFlag);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCICP(PngStruct* pngPtr, PngInfo* infoPtr, string colourPrimaries, byte* transferFunction, string matrixCoefficients, byte* videoFullRangeFlag)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (colourPrimaries != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(colourPrimaries);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(colourPrimaries, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (matrixCoefficients != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(matrixCoefficients);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(matrixCoefficients, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			uint ret = GetCICPNative(pngPtr, infoPtr, pStr0, transferFunction, pStr1, videoFullRangeFlag);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCICP(PngStruct* pngPtr, PngInfo* infoPtr, byte* colourPrimaries, ReadOnlySpan<byte> transferFunction, ReadOnlySpan<byte> matrixCoefficients, byte* videoFullRangeFlag)
		{
			fixed (byte* ptransferFunction = transferFunction)
			{
				fixed (byte* pmatrixCoefficients = matrixCoefficients)
				{
					uint ret = GetCICPNative(pngPtr, infoPtr, colourPrimaries, (byte*)ptransferFunction, (byte*)pmatrixCoefficients, videoFullRangeFlag);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCICP(PngStruct* pngPtr, PngInfo* infoPtr, byte* colourPrimaries, string transferFunction, string matrixCoefficients, byte* videoFullRangeFlag)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (transferFunction != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(transferFunction);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(transferFunction, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (matrixCoefficients != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(matrixCoefficients);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(matrixCoefficients, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			uint ret = GetCICPNative(pngPtr, infoPtr, colourPrimaries, pStr0, pStr1, videoFullRangeFlag);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCICP(PngStruct* pngPtr, PngInfo* infoPtr, ReadOnlySpan<byte> colourPrimaries, ReadOnlySpan<byte> transferFunction, ReadOnlySpan<byte> matrixCoefficients, byte* videoFullRangeFlag)
		{
			fixed (byte* pcolourPrimaries = colourPrimaries)
			{
				fixed (byte* ptransferFunction = transferFunction)
				{
					fixed (byte* pmatrixCoefficients = matrixCoefficients)
					{
						uint ret = GetCICPNative(pngPtr, infoPtr, (byte*)pcolourPrimaries, (byte*)ptransferFunction, (byte*)pmatrixCoefficients, videoFullRangeFlag);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCICP(PngStruct* pngPtr, PngInfo* infoPtr, string colourPrimaries, string transferFunction, string matrixCoefficients, byte* videoFullRangeFlag)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (colourPrimaries != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(colourPrimaries);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(colourPrimaries, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (transferFunction != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(transferFunction);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(transferFunction, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			byte* pStr2 = null;
			int pStrSize2 = 0;
			if (matrixCoefficients != null)
			{
				pStrSize2 = Utils.GetByteCountUTF8(matrixCoefficients);
				if (pStrSize2 >= Utils.MaxStackallocSize)
				{
					pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
				}
				else
				{
					byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
					pStr2 = pStrStack2;
				}
				int pStrOffset2 = Utils.EncodeStringUTF8(matrixCoefficients, pStr2, pStrSize2);
				pStr2[pStrOffset2] = 0;
			}
			uint ret = GetCICPNative(pngPtr, infoPtr, pStr0, pStr1, pStr2, videoFullRangeFlag);
			if (pStrSize2 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr2);
			}
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCICP(PngStruct* pngPtr, PngInfo* infoPtr, byte* colourPrimaries, byte* transferFunction, byte* matrixCoefficients, ReadOnlySpan<byte> videoFullRangeFlag)
		{
			fixed (byte* pvideoFullRangeFlag = videoFullRangeFlag)
			{
				uint ret = GetCICPNative(pngPtr, infoPtr, colourPrimaries, transferFunction, matrixCoefficients, (byte*)pvideoFullRangeFlag);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCICP(PngStruct* pngPtr, PngInfo* infoPtr, byte* colourPrimaries, byte* transferFunction, byte* matrixCoefficients, string videoFullRangeFlag)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (videoFullRangeFlag != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(videoFullRangeFlag);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(videoFullRangeFlag, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			uint ret = GetCICPNative(pngPtr, infoPtr, colourPrimaries, transferFunction, matrixCoefficients, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCICP(PngStruct* pngPtr, PngInfo* infoPtr, ReadOnlySpan<byte> colourPrimaries, byte* transferFunction, byte* matrixCoefficients, ReadOnlySpan<byte> videoFullRangeFlag)
		{
			fixed (byte* pcolourPrimaries = colourPrimaries)
			{
				fixed (byte* pvideoFullRangeFlag = videoFullRangeFlag)
				{
					uint ret = GetCICPNative(pngPtr, infoPtr, (byte*)pcolourPrimaries, transferFunction, matrixCoefficients, (byte*)pvideoFullRangeFlag);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCICP(PngStruct* pngPtr, PngInfo* infoPtr, string colourPrimaries, byte* transferFunction, byte* matrixCoefficients, string videoFullRangeFlag)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (colourPrimaries != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(colourPrimaries);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(colourPrimaries, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (videoFullRangeFlag != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(videoFullRangeFlag);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(videoFullRangeFlag, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			uint ret = GetCICPNative(pngPtr, infoPtr, pStr0, transferFunction, matrixCoefficients, pStr1);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCICP(PngStruct* pngPtr, PngInfo* infoPtr, byte* colourPrimaries, ReadOnlySpan<byte> transferFunction, byte* matrixCoefficients, ReadOnlySpan<byte> videoFullRangeFlag)
		{
			fixed (byte* ptransferFunction = transferFunction)
			{
				fixed (byte* pvideoFullRangeFlag = videoFullRangeFlag)
				{
					uint ret = GetCICPNative(pngPtr, infoPtr, colourPrimaries, (byte*)ptransferFunction, matrixCoefficients, (byte*)pvideoFullRangeFlag);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCICP(PngStruct* pngPtr, PngInfo* infoPtr, byte* colourPrimaries, string transferFunction, byte* matrixCoefficients, string videoFullRangeFlag)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (transferFunction != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(transferFunction);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(transferFunction, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (videoFullRangeFlag != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(videoFullRangeFlag);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(videoFullRangeFlag, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			uint ret = GetCICPNative(pngPtr, infoPtr, colourPrimaries, pStr0, matrixCoefficients, pStr1);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCICP(PngStruct* pngPtr, PngInfo* infoPtr, ReadOnlySpan<byte> colourPrimaries, ReadOnlySpan<byte> transferFunction, byte* matrixCoefficients, ReadOnlySpan<byte> videoFullRangeFlag)
		{
			fixed (byte* pcolourPrimaries = colourPrimaries)
			{
				fixed (byte* ptransferFunction = transferFunction)
				{
					fixed (byte* pvideoFullRangeFlag = videoFullRangeFlag)
					{
						uint ret = GetCICPNative(pngPtr, infoPtr, (byte*)pcolourPrimaries, (byte*)ptransferFunction, matrixCoefficients, (byte*)pvideoFullRangeFlag);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCICP(PngStruct* pngPtr, PngInfo* infoPtr, string colourPrimaries, string transferFunction, byte* matrixCoefficients, string videoFullRangeFlag)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (colourPrimaries != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(colourPrimaries);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(colourPrimaries, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (transferFunction != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(transferFunction);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(transferFunction, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			byte* pStr2 = null;
			int pStrSize2 = 0;
			if (videoFullRangeFlag != null)
			{
				pStrSize2 = Utils.GetByteCountUTF8(videoFullRangeFlag);
				if (pStrSize2 >= Utils.MaxStackallocSize)
				{
					pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
				}
				else
				{
					byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
					pStr2 = pStrStack2;
				}
				int pStrOffset2 = Utils.EncodeStringUTF8(videoFullRangeFlag, pStr2, pStrSize2);
				pStr2[pStrOffset2] = 0;
			}
			uint ret = GetCICPNative(pngPtr, infoPtr, pStr0, pStr1, matrixCoefficients, pStr2);
			if (pStrSize2 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr2);
			}
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCICP(PngStruct* pngPtr, PngInfo* infoPtr, byte* colourPrimaries, byte* transferFunction, ReadOnlySpan<byte> matrixCoefficients, ReadOnlySpan<byte> videoFullRangeFlag)
		{
			fixed (byte* pmatrixCoefficients = matrixCoefficients)
			{
				fixed (byte* pvideoFullRangeFlag = videoFullRangeFlag)
				{
					uint ret = GetCICPNative(pngPtr, infoPtr, colourPrimaries, transferFunction, (byte*)pmatrixCoefficients, (byte*)pvideoFullRangeFlag);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCICP(PngStruct* pngPtr, PngInfo* infoPtr, byte* colourPrimaries, byte* transferFunction, string matrixCoefficients, string videoFullRangeFlag)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (matrixCoefficients != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(matrixCoefficients);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(matrixCoefficients, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (videoFullRangeFlag != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(videoFullRangeFlag);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(videoFullRangeFlag, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			uint ret = GetCICPNative(pngPtr, infoPtr, colourPrimaries, transferFunction, pStr0, pStr1);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCICP(PngStruct* pngPtr, PngInfo* infoPtr, ReadOnlySpan<byte> colourPrimaries, byte* transferFunction, ReadOnlySpan<byte> matrixCoefficients, ReadOnlySpan<byte> videoFullRangeFlag)
		{
			fixed (byte* pcolourPrimaries = colourPrimaries)
			{
				fixed (byte* pmatrixCoefficients = matrixCoefficients)
				{
					fixed (byte* pvideoFullRangeFlag = videoFullRangeFlag)
					{
						uint ret = GetCICPNative(pngPtr, infoPtr, (byte*)pcolourPrimaries, transferFunction, (byte*)pmatrixCoefficients, (byte*)pvideoFullRangeFlag);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCICP(PngStruct* pngPtr, PngInfo* infoPtr, string colourPrimaries, byte* transferFunction, string matrixCoefficients, string videoFullRangeFlag)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (colourPrimaries != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(colourPrimaries);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(colourPrimaries, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (matrixCoefficients != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(matrixCoefficients);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(matrixCoefficients, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			byte* pStr2 = null;
			int pStrSize2 = 0;
			if (videoFullRangeFlag != null)
			{
				pStrSize2 = Utils.GetByteCountUTF8(videoFullRangeFlag);
				if (pStrSize2 >= Utils.MaxStackallocSize)
				{
					pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
				}
				else
				{
					byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
					pStr2 = pStrStack2;
				}
				int pStrOffset2 = Utils.EncodeStringUTF8(videoFullRangeFlag, pStr2, pStrSize2);
				pStr2[pStrOffset2] = 0;
			}
			uint ret = GetCICPNative(pngPtr, infoPtr, pStr0, transferFunction, pStr1, pStr2);
			if (pStrSize2 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr2);
			}
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCICP(PngStruct* pngPtr, PngInfo* infoPtr, byte* colourPrimaries, ReadOnlySpan<byte> transferFunction, ReadOnlySpan<byte> matrixCoefficients, ReadOnlySpan<byte> videoFullRangeFlag)
		{
			fixed (byte* ptransferFunction = transferFunction)
			{
				fixed (byte* pmatrixCoefficients = matrixCoefficients)
				{
					fixed (byte* pvideoFullRangeFlag = videoFullRangeFlag)
					{
						uint ret = GetCICPNative(pngPtr, infoPtr, colourPrimaries, (byte*)ptransferFunction, (byte*)pmatrixCoefficients, (byte*)pvideoFullRangeFlag);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCICP(PngStruct* pngPtr, PngInfo* infoPtr, byte* colourPrimaries, string transferFunction, string matrixCoefficients, string videoFullRangeFlag)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (transferFunction != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(transferFunction);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(transferFunction, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (matrixCoefficients != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(matrixCoefficients);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(matrixCoefficients, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			byte* pStr2 = null;
			int pStrSize2 = 0;
			if (videoFullRangeFlag != null)
			{
				pStrSize2 = Utils.GetByteCountUTF8(videoFullRangeFlag);
				if (pStrSize2 >= Utils.MaxStackallocSize)
				{
					pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
				}
				else
				{
					byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
					pStr2 = pStrStack2;
				}
				int pStrOffset2 = Utils.EncodeStringUTF8(videoFullRangeFlag, pStr2, pStrSize2);
				pStr2[pStrOffset2] = 0;
			}
			uint ret = GetCICPNative(pngPtr, infoPtr, colourPrimaries, pStr0, pStr1, pStr2);
			if (pStrSize2 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr2);
			}
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCICP(PngStruct* pngPtr, PngInfo* infoPtr, ReadOnlySpan<byte> colourPrimaries, ReadOnlySpan<byte> transferFunction, ReadOnlySpan<byte> matrixCoefficients, ReadOnlySpan<byte> videoFullRangeFlag)
		{
			fixed (byte* pcolourPrimaries = colourPrimaries)
			{
				fixed (byte* ptransferFunction = transferFunction)
				{
					fixed (byte* pmatrixCoefficients = matrixCoefficients)
					{
						fixed (byte* pvideoFullRangeFlag = videoFullRangeFlag)
						{
							uint ret = GetCICPNative(pngPtr, infoPtr, (byte*)pcolourPrimaries, (byte*)ptransferFunction, (byte*)pmatrixCoefficients, (byte*)pvideoFullRangeFlag);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCICP(PngStruct* pngPtr, PngInfo* infoPtr, string colourPrimaries, string transferFunction, string matrixCoefficients, string videoFullRangeFlag)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (colourPrimaries != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(colourPrimaries);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(colourPrimaries, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (transferFunction != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(transferFunction);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(transferFunction, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			byte* pStr2 = null;
			int pStrSize2 = 0;
			if (matrixCoefficients != null)
			{
				pStrSize2 = Utils.GetByteCountUTF8(matrixCoefficients);
				if (pStrSize2 >= Utils.MaxStackallocSize)
				{
					pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
				}
				else
				{
					byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
					pStr2 = pStrStack2;
				}
				int pStrOffset2 = Utils.EncodeStringUTF8(matrixCoefficients, pStr2, pStrSize2);
				pStr2[pStrOffset2] = 0;
			}
			byte* pStr3 = null;
			int pStrSize3 = 0;
			if (videoFullRangeFlag != null)
			{
				pStrSize3 = Utils.GetByteCountUTF8(videoFullRangeFlag);
				if (pStrSize3 >= Utils.MaxStackallocSize)
				{
					pStr3 = Utils.Alloc<byte>(pStrSize3 + 1);
				}
				else
				{
					byte* pStrStack3 = stackalloc byte[pStrSize3 + 1];
					pStr3 = pStrStack3;
				}
				int pStrOffset3 = Utils.EncodeStringUTF8(videoFullRangeFlag, pStr3, pStrSize3);
				pStr3[pStrOffset3] = 0;
			}
			uint ret = GetCICPNative(pngPtr, infoPtr, pStr0, pStr1, pStr2, pStr3);
			if (pStrSize3 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr3);
			}
			if (pStrSize2 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr2);
			}
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void SetCICPNative(PngStruct* pngPtr, PngInfo* infoPtr, byte colourPrimaries, byte transferFunction, byte matrixCoefficients, byte videoFullRangeFlag)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<PngStruct*, PngInfo*, byte, byte, byte, byte, void>)funcTable[158])(pngPtr, infoPtr, colourPrimaries, transferFunction, matrixCoefficients, videoFullRangeFlag);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, byte, byte, byte, byte, void>)funcTable[158])((nint)pngPtr, (nint)infoPtr, colourPrimaries, transferFunction, matrixCoefficients, videoFullRangeFlag);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void SetCICP(PngStruct* pngPtr, PngInfo* infoPtr, byte colourPrimaries, byte transferFunction, byte matrixCoefficients, byte videoFullRangeFlag)
		{
			SetCICPNative(pngPtr, infoPtr, colourPrimaries, transferFunction, matrixCoefficients, videoFullRangeFlag);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static uint GetCLLINative(PngStruct* pngPtr, PngInfo* infoPtr, double* maximumContentLightLevel, double* maximumFrameAverageLightLevel)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<PngStruct*, PngInfo*, double*, double*, uint>)funcTable[159])(pngPtr, infoPtr, maximumContentLightLevel, maximumFrameAverageLightLevel);
			#else
			return (uint)((delegate* unmanaged[Cdecl]<nint, nint, nint, nint, uint>)funcTable[159])((nint)pngPtr, (nint)infoPtr, (nint)maximumContentLightLevel, (nint)maximumFrameAverageLightLevel);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCLLI(PngStruct* pngPtr, PngInfo* infoPtr, double* maximumContentLightLevel, double* maximumFrameAverageLightLevel)
		{
			uint ret = GetCLLINative(pngPtr, infoPtr, maximumContentLightLevel, maximumFrameAverageLightLevel);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCLLI(PngStruct* pngPtr, PngInfo* infoPtr, ref double maximumContentLightLevel, double* maximumFrameAverageLightLevel)
		{
			fixed (double* pmaximumContentLightLevel = &maximumContentLightLevel)
			{
				uint ret = GetCLLINative(pngPtr, infoPtr, (double*)pmaximumContentLightLevel, maximumFrameAverageLightLevel);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCLLI(PngStruct* pngPtr, PngInfo* infoPtr, double* maximumContentLightLevel, ref double maximumFrameAverageLightLevel)
		{
			fixed (double* pmaximumFrameAverageLightLevel = &maximumFrameAverageLightLevel)
			{
				uint ret = GetCLLINative(pngPtr, infoPtr, maximumContentLightLevel, (double*)pmaximumFrameAverageLightLevel);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCLLI(PngStruct* pngPtr, PngInfo* infoPtr, ref double maximumContentLightLevel, ref double maximumFrameAverageLightLevel)
		{
			fixed (double* pmaximumContentLightLevel = &maximumContentLightLevel)
			{
				fixed (double* pmaximumFrameAverageLightLevel = &maximumFrameAverageLightLevel)
				{
					uint ret = GetCLLINative(pngPtr, infoPtr, (double*)pmaximumContentLightLevel, (double*)pmaximumFrameAverageLightLevel);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static uint GetCLLIFixedNative(PngStruct* pngPtr, PngInfo* infoPtr, uint* maximumContentLightLevelScaledBy10000, uint* maximumFrameAverageLightLevelScaledBy10000)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<PngStruct*, PngInfo*, uint*, uint*, uint>)funcTable[160])(pngPtr, infoPtr, maximumContentLightLevelScaledBy10000, maximumFrameAverageLightLevelScaledBy10000);
			#else
			return (uint)((delegate* unmanaged[Cdecl]<nint, nint, nint, nint, uint>)funcTable[160])((nint)pngPtr, (nint)infoPtr, (nint)maximumContentLightLevelScaledBy10000, (nint)maximumFrameAverageLightLevelScaledBy10000);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetCLLIFixed(PngStruct* pngPtr, PngInfo* infoPtr, uint* maximumContentLightLevelScaledBy10000, uint* maximumFrameAverageLightLevelScaledBy10000)
		{
			uint ret = GetCLLIFixedNative(pngPtr, infoPtr, maximumContentLightLevelScaledBy10000, maximumFrameAverageLightLevelScaledBy10000);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void SetCLLINative(PngStruct* pngPtr, PngInfo* infoPtr, double maximumContentLightLevel, double maximumFrameAverageLightLevel)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<PngStruct*, PngInfo*, double, double, void>)funcTable[161])(pngPtr, infoPtr, maximumContentLightLevel, maximumFrameAverageLightLevel);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, double, double, void>)funcTable[161])((nint)pngPtr, (nint)infoPtr, maximumContentLightLevel, maximumFrameAverageLightLevel);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void SetCLLI(PngStruct* pngPtr, PngInfo* infoPtr, double maximumContentLightLevel, double maximumFrameAverageLightLevel)
		{
			SetCLLINative(pngPtr, infoPtr, maximumContentLightLevel, maximumFrameAverageLightLevel);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void SetCLLIFixedNative(PngStruct* pngPtr, PngInfo* infoPtr, uint maximumContentLightLevelScaledBy10000, uint maximumFrameAverageLightLevelScaledBy10000)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<PngStruct*, PngInfo*, uint, uint, void>)funcTable[162])(pngPtr, infoPtr, maximumContentLightLevelScaledBy10000, maximumFrameAverageLightLevelScaledBy10000);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, uint, uint, void>)funcTable[162])((nint)pngPtr, (nint)infoPtr, maximumContentLightLevelScaledBy10000, maximumFrameAverageLightLevelScaledBy10000);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void SetCLLIFixed(PngStruct* pngPtr, PngInfo* infoPtr, uint maximumContentLightLevelScaledBy10000, uint maximumFrameAverageLightLevelScaledBy10000)
		{
			SetCLLIFixedNative(pngPtr, infoPtr, maximumContentLightLevelScaledBy10000, maximumFrameAverageLightLevelScaledBy10000);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static uint GetEXIfNative(PngStruct* pngPtr, PngInfo* infoPtr, byte** exif)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<PngStruct*, PngInfo*, byte**, uint>)funcTable[163])(pngPtr, infoPtr, exif);
			#else
			return (uint)((delegate* unmanaged[Cdecl]<nint, nint, nint, uint>)funcTable[163])((nint)pngPtr, (nint)infoPtr, (nint)exif);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetEXIf(PngStruct* pngPtr, PngInfo* infoPtr, byte** exif)
		{
			uint ret = GetEXIfNative(pngPtr, infoPtr, exif);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetEXIf(PngStruct* pngPtr, PngInfo* infoPtr, ref byte* exif)
		{
			fixed (byte** pexif = &exif)
			{
				uint ret = GetEXIfNative(pngPtr, infoPtr, (byte**)pexif);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void SetEXIfNative(PngStruct* pngPtr, PngInfo* infoPtr, byte* exif)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<PngStruct*, PngInfo*, byte*, void>)funcTable[164])(pngPtr, infoPtr, exif);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, nint, void>)funcTable[164])((nint)pngPtr, (nint)infoPtr, (nint)exif);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void SetEXIf(PngStruct* pngPtr, PngInfo* infoPtr, byte* exif)
		{
			SetEXIfNative(pngPtr, infoPtr, exif);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void SetEXIf(PngStruct* pngPtr, PngInfo* infoPtr, ReadOnlySpan<byte> exif)
		{
			fixed (byte* pexif = exif)
			{
				SetEXIfNative(pngPtr, infoPtr, (byte*)pexif);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void SetEXIf(PngStruct* pngPtr, PngInfo* infoPtr, string exif)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (exif != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(exif);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(exif, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			SetEXIfNative(pngPtr, infoPtr, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static uint GetEXIf1Native(PngStruct* pngPtr, PngInfo* infoPtr, uint* numExif, byte** exif)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<PngStruct*, PngInfo*, uint*, byte**, uint>)funcTable[165])(pngPtr, infoPtr, numExif, exif);
			#else
			return (uint)((delegate* unmanaged[Cdecl]<nint, nint, nint, nint, uint>)funcTable[165])((nint)pngPtr, (nint)infoPtr, (nint)numExif, (nint)exif);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetEXIf1(PngStruct* pngPtr, PngInfo* infoPtr, uint* numExif, byte** exif)
		{
			uint ret = GetEXIf1Native(pngPtr, infoPtr, numExif, exif);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetEXIf1(PngStruct* pngPtr, PngInfo* infoPtr, ref uint numExif, byte** exif)
		{
			fixed (uint* pnumExif = &numExif)
			{
				uint ret = GetEXIf1Native(pngPtr, infoPtr, (uint*)pnumExif, exif);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetEXIf1(PngStruct* pngPtr, PngInfo* infoPtr, uint* numExif, ref byte* exif)
		{
			fixed (byte** pexif = &exif)
			{
				uint ret = GetEXIf1Native(pngPtr, infoPtr, numExif, (byte**)pexif);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetEXIf1(PngStruct* pngPtr, PngInfo* infoPtr, ref uint numExif, ref byte* exif)
		{
			fixed (uint* pnumExif = &numExif)
			{
				fixed (byte** pexif = &exif)
				{
					uint ret = GetEXIf1Native(pngPtr, infoPtr, (uint*)pnumExif, (byte**)pexif);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void SetEXIf1Native(PngStruct* pngPtr, PngInfo* infoPtr, uint numExif, byte* exif)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<PngStruct*, PngInfo*, uint, byte*, void>)funcTable[166])(pngPtr, infoPtr, numExif, exif);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, uint, nint, void>)funcTable[166])((nint)pngPtr, (nint)infoPtr, numExif, (nint)exif);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void SetEXIf1(PngStruct* pngPtr, PngInfo* infoPtr, uint numExif, byte* exif)
		{
			SetEXIf1Native(pngPtr, infoPtr, numExif, exif);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void SetEXIf1(PngStruct* pngPtr, PngInfo* infoPtr, uint numExif, ReadOnlySpan<byte> exif)
		{
			fixed (byte* pexif = exif)
			{
				SetEXIf1Native(pngPtr, infoPtr, numExif, (byte*)pexif);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void SetEXIf1(PngStruct* pngPtr, PngInfo* infoPtr, uint numExif, string exif)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (exif != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(exif);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(exif, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			SetEXIf1Native(pngPtr, infoPtr, numExif, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static uint GetGAMANative(PngStruct* pngPtr, PngInfo* infoPtr, double* fileGamma)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<PngStruct*, PngInfo*, double*, uint>)funcTable[167])(pngPtr, infoPtr, fileGamma);
			#else
			return (uint)((delegate* unmanaged[Cdecl]<nint, nint, nint, uint>)funcTable[167])((nint)pngPtr, (nint)infoPtr, (nint)fileGamma);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetGAMA(PngStruct* pngPtr, PngInfo* infoPtr, double* fileGamma)
		{
			uint ret = GetGAMANative(pngPtr, infoPtr, fileGamma);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetGAMA(PngStruct* pngPtr, PngInfo* infoPtr, ref double fileGamma)
		{
			fixed (double* pfileGamma = &fileGamma)
			{
				uint ret = GetGAMANative(pngPtr, infoPtr, (double*)pfileGamma);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static uint GetGAMAFixedNative(PngStruct* pngPtr, PngInfo* infoPtr, int* intFileGamma)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<PngStruct*, PngInfo*, int*, uint>)funcTable[168])(pngPtr, infoPtr, intFileGamma);
			#else
			return (uint)((delegate* unmanaged[Cdecl]<nint, nint, nint, uint>)funcTable[168])((nint)pngPtr, (nint)infoPtr, (nint)intFileGamma);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetGAMAFixed(PngStruct* pngPtr, PngInfo* infoPtr, int* intFileGamma)
		{
			uint ret = GetGAMAFixedNative(pngPtr, infoPtr, intFileGamma);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetGAMAFixed(PngStruct* pngPtr, PngInfo* infoPtr, ref int intFileGamma)
		{
			fixed (int* pintFileGamma = &intFileGamma)
			{
				uint ret = GetGAMAFixedNative(pngPtr, infoPtr, (int*)pintFileGamma);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void SetGAMANative(PngStruct* pngPtr, PngInfo* infoPtr, double fileGamma)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<PngStruct*, PngInfo*, double, void>)funcTable[169])(pngPtr, infoPtr, fileGamma);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, double, void>)funcTable[169])((nint)pngPtr, (nint)infoPtr, fileGamma);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void SetGAMA(PngStruct* pngPtr, PngInfo* infoPtr, double fileGamma)
		{
			SetGAMANative(pngPtr, infoPtr, fileGamma);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void SetGAMAFixedNative(PngStruct* pngPtr, PngInfo* infoPtr, int intFileGamma)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<PngStruct*, PngInfo*, int, void>)funcTable[170])(pngPtr, infoPtr, intFileGamma);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, int, void>)funcTable[170])((nint)pngPtr, (nint)infoPtr, intFileGamma);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void SetGAMAFixed(PngStruct* pngPtr, PngInfo* infoPtr, int intFileGamma)
		{
			SetGAMAFixedNative(pngPtr, infoPtr, intFileGamma);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static uint GetHISTNative(PngStruct* pngPtr, PngInfo* infoPtr, ushort** hist)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<PngStruct*, PngInfo*, ushort**, uint>)funcTable[171])(pngPtr, infoPtr, hist);
			#else
			return (uint)((delegate* unmanaged[Cdecl]<nint, nint, nint, uint>)funcTable[171])((nint)pngPtr, (nint)infoPtr, (nint)hist);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetHIST(PngStruct* pngPtr, PngInfo* infoPtr, ushort** hist)
		{
			uint ret = GetHISTNative(pngPtr, infoPtr, hist);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetHIST(PngStruct* pngPtr, PngInfo* infoPtr, ref ushort* hist)
		{
			fixed (ushort** phist = &hist)
			{
				uint ret = GetHISTNative(pngPtr, infoPtr, (ushort**)phist);
				return ret;
			}
		}
	}
}
