// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;
using Hexa.NET.ZLib;

namespace Hexa.NET.Libpng
{
	public unsafe partial class Libpng
	{

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void SetHISTNative(PngStruct* pngPtr, PngInfo* infoPtr, ushort* hist)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<PngStruct*, PngInfo*, ushort*, void>)funcTable[172])(pngPtr, infoPtr, hist);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, nint, void>)funcTable[172])((nint)pngPtr, (nint)infoPtr, (nint)hist);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void SetHIST(PngStruct* pngPtr, PngInfo* infoPtr, ushort* hist)
		{
			SetHISTNative(pngPtr, infoPtr, hist);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static uint GetIHDRNative(PngStruct* pngPtr, PngInfo* infoPtr, uint* width, uint* height, int* bitDepth, int* colorType, int* interlaceMethod, int* compressionMethod, int* filterMethod)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<PngStruct*, PngInfo*, uint*, uint*, int*, int*, int*, int*, int*, uint>)funcTable[173])(pngPtr, infoPtr, width, height, bitDepth, colorType, interlaceMethod, compressionMethod, filterMethod);
			#else
			return (uint)((delegate* unmanaged[Cdecl]<nint, nint, nint, nint, nint, nint, nint, nint, nint, uint>)funcTable[173])((nint)pngPtr, (nint)infoPtr, (nint)width, (nint)height, (nint)bitDepth, (nint)colorType, (nint)interlaceMethod, (nint)compressionMethod, (nint)filterMethod);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetIHDR(PngStruct* pngPtr, PngInfo* infoPtr, uint* width, uint* height, int* bitDepth, int* colorType, int* interlaceMethod, int* compressionMethod, int* filterMethod)
		{
			uint ret = GetIHDRNative(pngPtr, infoPtr, width, height, bitDepth, colorType, interlaceMethod, compressionMethod, filterMethod);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetIHDR(PngStruct* pngPtr, PngInfo* infoPtr, ref uint width, uint* height, int* bitDepth, int* colorType, int* interlaceMethod, int* compressionMethod, int* filterMethod)
		{
			fixed (uint* pwidth = &width)
			{
				uint ret = GetIHDRNative(pngPtr, infoPtr, (uint*)pwidth, height, bitDepth, colorType, interlaceMethod, compressionMethod, filterMethod);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetIHDR(PngStruct* pngPtr, PngInfo* infoPtr, uint* width, ref uint height, int* bitDepth, int* colorType, int* interlaceMethod, int* compressionMethod, int* filterMethod)
		{
			fixed (uint* pheight = &height)
			{
				uint ret = GetIHDRNative(pngPtr, infoPtr, width, (uint*)pheight, bitDepth, colorType, interlaceMethod, compressionMethod, filterMethod);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetIHDR(PngStruct* pngPtr, PngInfo* infoPtr, ref uint width, ref uint height, int* bitDepth, int* colorType, int* interlaceMethod, int* compressionMethod, int* filterMethod)
		{
			fixed (uint* pwidth = &width)
			{
				fixed (uint* pheight = &height)
				{
					uint ret = GetIHDRNative(pngPtr, infoPtr, (uint*)pwidth, (uint*)pheight, bitDepth, colorType, interlaceMethod, compressionMethod, filterMethod);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetIHDR(PngStruct* pngPtr, PngInfo* infoPtr, uint* width, uint* height, ref int bitDepth, int* colorType, int* interlaceMethod, int* compressionMethod, int* filterMethod)
		{
			fixed (int* pbitDepth = &bitDepth)
			{
				uint ret = GetIHDRNative(pngPtr, infoPtr, width, height, (int*)pbitDepth, colorType, interlaceMethod, compressionMethod, filterMethod);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetIHDR(PngStruct* pngPtr, PngInfo* infoPtr, ref uint width, uint* height, ref int bitDepth, int* colorType, int* interlaceMethod, int* compressionMethod, int* filterMethod)
		{
			fixed (uint* pwidth = &width)
			{
				fixed (int* pbitDepth = &bitDepth)
				{
					uint ret = GetIHDRNative(pngPtr, infoPtr, (uint*)pwidth, height, (int*)pbitDepth, colorType, interlaceMethod, compressionMethod, filterMethod);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetIHDR(PngStruct* pngPtr, PngInfo* infoPtr, uint* width, ref uint height, ref int bitDepth, int* colorType, int* interlaceMethod, int* compressionMethod, int* filterMethod)
		{
			fixed (uint* pheight = &height)
			{
				fixed (int* pbitDepth = &bitDepth)
				{
					uint ret = GetIHDRNative(pngPtr, infoPtr, width, (uint*)pheight, (int*)pbitDepth, colorType, interlaceMethod, compressionMethod, filterMethod);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetIHDR(PngStruct* pngPtr, PngInfo* infoPtr, ref uint width, ref uint height, ref int bitDepth, int* colorType, int* interlaceMethod, int* compressionMethod, int* filterMethod)
		{
			fixed (uint* pwidth = &width)
			{
				fixed (uint* pheight = &height)
				{
					fixed (int* pbitDepth = &bitDepth)
					{
						uint ret = GetIHDRNative(pngPtr, infoPtr, (uint*)pwidth, (uint*)pheight, (int*)pbitDepth, colorType, interlaceMethod, compressionMethod, filterMethod);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetIHDR(PngStruct* pngPtr, PngInfo* infoPtr, uint* width, uint* height, int* bitDepth, ref int colorType, int* interlaceMethod, int* compressionMethod, int* filterMethod)
		{
			fixed (int* pcolorType = &colorType)
			{
				uint ret = GetIHDRNative(pngPtr, infoPtr, width, height, bitDepth, (int*)pcolorType, interlaceMethod, compressionMethod, filterMethod);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetIHDR(PngStruct* pngPtr, PngInfo* infoPtr, ref uint width, uint* height, int* bitDepth, ref int colorType, int* interlaceMethod, int* compressionMethod, int* filterMethod)
		{
			fixed (uint* pwidth = &width)
			{
				fixed (int* pcolorType = &colorType)
				{
					uint ret = GetIHDRNative(pngPtr, infoPtr, (uint*)pwidth, height, bitDepth, (int*)pcolorType, interlaceMethod, compressionMethod, filterMethod);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetIHDR(PngStruct* pngPtr, PngInfo* infoPtr, uint* width, ref uint height, int* bitDepth, ref int colorType, int* interlaceMethod, int* compressionMethod, int* filterMethod)
		{
			fixed (uint* pheight = &height)
			{
				fixed (int* pcolorType = &colorType)
				{
					uint ret = GetIHDRNative(pngPtr, infoPtr, width, (uint*)pheight, bitDepth, (int*)pcolorType, interlaceMethod, compressionMethod, filterMethod);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetIHDR(PngStruct* pngPtr, PngInfo* infoPtr, ref uint width, ref uint height, int* bitDepth, ref int colorType, int* interlaceMethod, int* compressionMethod, int* filterMethod)
		{
			fixed (uint* pwidth = &width)
			{
				fixed (uint* pheight = &height)
				{
					fixed (int* pcolorType = &colorType)
					{
						uint ret = GetIHDRNative(pngPtr, infoPtr, (uint*)pwidth, (uint*)pheight, bitDepth, (int*)pcolorType, interlaceMethod, compressionMethod, filterMethod);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetIHDR(PngStruct* pngPtr, PngInfo* infoPtr, uint* width, uint* height, ref int bitDepth, ref int colorType, int* interlaceMethod, int* compressionMethod, int* filterMethod)
		{
			fixed (int* pbitDepth = &bitDepth)
			{
				fixed (int* pcolorType = &colorType)
				{
					uint ret = GetIHDRNative(pngPtr, infoPtr, width, height, (int*)pbitDepth, (int*)pcolorType, interlaceMethod, compressionMethod, filterMethod);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetIHDR(PngStruct* pngPtr, PngInfo* infoPtr, ref uint width, uint* height, ref int bitDepth, ref int colorType, int* interlaceMethod, int* compressionMethod, int* filterMethod)
		{
			fixed (uint* pwidth = &width)
			{
				fixed (int* pbitDepth = &bitDepth)
				{
					fixed (int* pcolorType = &colorType)
					{
						uint ret = GetIHDRNative(pngPtr, infoPtr, (uint*)pwidth, height, (int*)pbitDepth, (int*)pcolorType, interlaceMethod, compressionMethod, filterMethod);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetIHDR(PngStruct* pngPtr, PngInfo* infoPtr, uint* width, ref uint height, ref int bitDepth, ref int colorType, int* interlaceMethod, int* compressionMethod, int* filterMethod)
		{
			fixed (uint* pheight = &height)
			{
				fixed (int* pbitDepth = &bitDepth)
				{
					fixed (int* pcolorType = &colorType)
					{
						uint ret = GetIHDRNative(pngPtr, infoPtr, width, (uint*)pheight, (int*)pbitDepth, (int*)pcolorType, interlaceMethod, compressionMethod, filterMethod);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetIHDR(PngStruct* pngPtr, PngInfo* infoPtr, ref uint width, ref uint height, ref int bitDepth, ref int colorType, int* interlaceMethod, int* compressionMethod, int* filterMethod)
		{
			fixed (uint* pwidth = &width)
			{
				fixed (uint* pheight = &height)
				{
					fixed (int* pbitDepth = &bitDepth)
					{
						fixed (int* pcolorType = &colorType)
						{
							uint ret = GetIHDRNative(pngPtr, infoPtr, (uint*)pwidth, (uint*)pheight, (int*)pbitDepth, (int*)pcolorType, interlaceMethod, compressionMethod, filterMethod);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetIHDR(PngStruct* pngPtr, PngInfo* infoPtr, uint* width, uint* height, int* bitDepth, int* colorType, ref int interlaceMethod, int* compressionMethod, int* filterMethod)
		{
			fixed (int* pinterlaceMethod = &interlaceMethod)
			{
				uint ret = GetIHDRNative(pngPtr, infoPtr, width, height, bitDepth, colorType, (int*)pinterlaceMethod, compressionMethod, filterMethod);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetIHDR(PngStruct* pngPtr, PngInfo* infoPtr, ref uint width, uint* height, int* bitDepth, int* colorType, ref int interlaceMethod, int* compressionMethod, int* filterMethod)
		{
			fixed (uint* pwidth = &width)
			{
				fixed (int* pinterlaceMethod = &interlaceMethod)
				{
					uint ret = GetIHDRNative(pngPtr, infoPtr, (uint*)pwidth, height, bitDepth, colorType, (int*)pinterlaceMethod, compressionMethod, filterMethod);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetIHDR(PngStruct* pngPtr, PngInfo* infoPtr, uint* width, ref uint height, int* bitDepth, int* colorType, ref int interlaceMethod, int* compressionMethod, int* filterMethod)
		{
			fixed (uint* pheight = &height)
			{
				fixed (int* pinterlaceMethod = &interlaceMethod)
				{
					uint ret = GetIHDRNative(pngPtr, infoPtr, width, (uint*)pheight, bitDepth, colorType, (int*)pinterlaceMethod, compressionMethod, filterMethod);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetIHDR(PngStruct* pngPtr, PngInfo* infoPtr, ref uint width, ref uint height, int* bitDepth, int* colorType, ref int interlaceMethod, int* compressionMethod, int* filterMethod)
		{
			fixed (uint* pwidth = &width)
			{
				fixed (uint* pheight = &height)
				{
					fixed (int* pinterlaceMethod = &interlaceMethod)
					{
						uint ret = GetIHDRNative(pngPtr, infoPtr, (uint*)pwidth, (uint*)pheight, bitDepth, colorType, (int*)pinterlaceMethod, compressionMethod, filterMethod);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetIHDR(PngStruct* pngPtr, PngInfo* infoPtr, uint* width, uint* height, ref int bitDepth, int* colorType, ref int interlaceMethod, int* compressionMethod, int* filterMethod)
		{
			fixed (int* pbitDepth = &bitDepth)
			{
				fixed (int* pinterlaceMethod = &interlaceMethod)
				{
					uint ret = GetIHDRNative(pngPtr, infoPtr, width, height, (int*)pbitDepth, colorType, (int*)pinterlaceMethod, compressionMethod, filterMethod);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetIHDR(PngStruct* pngPtr, PngInfo* infoPtr, ref uint width, uint* height, ref int bitDepth, int* colorType, ref int interlaceMethod, int* compressionMethod, int* filterMethod)
		{
			fixed (uint* pwidth = &width)
			{
				fixed (int* pbitDepth = &bitDepth)
				{
					fixed (int* pinterlaceMethod = &interlaceMethod)
					{
						uint ret = GetIHDRNative(pngPtr, infoPtr, (uint*)pwidth, height, (int*)pbitDepth, colorType, (int*)pinterlaceMethod, compressionMethod, filterMethod);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetIHDR(PngStruct* pngPtr, PngInfo* infoPtr, uint* width, ref uint height, ref int bitDepth, int* colorType, ref int interlaceMethod, int* compressionMethod, int* filterMethod)
		{
			fixed (uint* pheight = &height)
			{
				fixed (int* pbitDepth = &bitDepth)
				{
					fixed (int* pinterlaceMethod = &interlaceMethod)
					{
						uint ret = GetIHDRNative(pngPtr, infoPtr, width, (uint*)pheight, (int*)pbitDepth, colorType, (int*)pinterlaceMethod, compressionMethod, filterMethod);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetIHDR(PngStruct* pngPtr, PngInfo* infoPtr, ref uint width, ref uint height, ref int bitDepth, int* colorType, ref int interlaceMethod, int* compressionMethod, int* filterMethod)
		{
			fixed (uint* pwidth = &width)
			{
				fixed (uint* pheight = &height)
				{
					fixed (int* pbitDepth = &bitDepth)
					{
						fixed (int* pinterlaceMethod = &interlaceMethod)
						{
							uint ret = GetIHDRNative(pngPtr, infoPtr, (uint*)pwidth, (uint*)pheight, (int*)pbitDepth, colorType, (int*)pinterlaceMethod, compressionMethod, filterMethod);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetIHDR(PngStruct* pngPtr, PngInfo* infoPtr, uint* width, uint* height, int* bitDepth, ref int colorType, ref int interlaceMethod, int* compressionMethod, int* filterMethod)
		{
			fixed (int* pcolorType = &colorType)
			{
				fixed (int* pinterlaceMethod = &interlaceMethod)
				{
					uint ret = GetIHDRNative(pngPtr, infoPtr, width, height, bitDepth, (int*)pcolorType, (int*)pinterlaceMethod, compressionMethod, filterMethod);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetIHDR(PngStruct* pngPtr, PngInfo* infoPtr, ref uint width, uint* height, int* bitDepth, ref int colorType, ref int interlaceMethod, int* compressionMethod, int* filterMethod)
		{
			fixed (uint* pwidth = &width)
			{
				fixed (int* pcolorType = &colorType)
				{
					fixed (int* pinterlaceMethod = &interlaceMethod)
					{
						uint ret = GetIHDRNative(pngPtr, infoPtr, (uint*)pwidth, height, bitDepth, (int*)pcolorType, (int*)pinterlaceMethod, compressionMethod, filterMethod);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetIHDR(PngStruct* pngPtr, PngInfo* infoPtr, uint* width, ref uint height, int* bitDepth, ref int colorType, ref int interlaceMethod, int* compressionMethod, int* filterMethod)
		{
			fixed (uint* pheight = &height)
			{
				fixed (int* pcolorType = &colorType)
				{
					fixed (int* pinterlaceMethod = &interlaceMethod)
					{
						uint ret = GetIHDRNative(pngPtr, infoPtr, width, (uint*)pheight, bitDepth, (int*)pcolorType, (int*)pinterlaceMethod, compressionMethod, filterMethod);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetIHDR(PngStruct* pngPtr, PngInfo* infoPtr, ref uint width, ref uint height, int* bitDepth, ref int colorType, ref int interlaceMethod, int* compressionMethod, int* filterMethod)
		{
			fixed (uint* pwidth = &width)
			{
				fixed (uint* pheight = &height)
				{
					fixed (int* pcolorType = &colorType)
					{
						fixed (int* pinterlaceMethod = &interlaceMethod)
						{
							uint ret = GetIHDRNative(pngPtr, infoPtr, (uint*)pwidth, (uint*)pheight, bitDepth, (int*)pcolorType, (int*)pinterlaceMethod, compressionMethod, filterMethod);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetIHDR(PngStruct* pngPtr, PngInfo* infoPtr, uint* width, uint* height, ref int bitDepth, ref int colorType, ref int interlaceMethod, int* compressionMethod, int* filterMethod)
		{
			fixed (int* pbitDepth = &bitDepth)
			{
				fixed (int* pcolorType = &colorType)
				{
					fixed (int* pinterlaceMethod = &interlaceMethod)
					{
						uint ret = GetIHDRNative(pngPtr, infoPtr, width, height, (int*)pbitDepth, (int*)pcolorType, (int*)pinterlaceMethod, compressionMethod, filterMethod);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetIHDR(PngStruct* pngPtr, PngInfo* infoPtr, ref uint width, uint* height, ref int bitDepth, ref int colorType, ref int interlaceMethod, int* compressionMethod, int* filterMethod)
		{
			fixed (uint* pwidth = &width)
			{
				fixed (int* pbitDepth = &bitDepth)
				{
					fixed (int* pcolorType = &colorType)
					{
						fixed (int* pinterlaceMethod = &interlaceMethod)
						{
							uint ret = GetIHDRNative(pngPtr, infoPtr, (uint*)pwidth, height, (int*)pbitDepth, (int*)pcolorType, (int*)pinterlaceMethod, compressionMethod, filterMethod);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetIHDR(PngStruct* pngPtr, PngInfo* infoPtr, uint* width, ref uint height, ref int bitDepth, ref int colorType, ref int interlaceMethod, int* compressionMethod, int* filterMethod)
		{
			fixed (uint* pheight = &height)
			{
				fixed (int* pbitDepth = &bitDepth)
				{
					fixed (int* pcolorType = &colorType)
					{
						fixed (int* pinterlaceMethod = &interlaceMethod)
						{
							uint ret = GetIHDRNative(pngPtr, infoPtr, width, (uint*)pheight, (int*)pbitDepth, (int*)pcolorType, (int*)pinterlaceMethod, compressionMethod, filterMethod);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetIHDR(PngStruct* pngPtr, PngInfo* infoPtr, ref uint width, ref uint height, ref int bitDepth, ref int colorType, ref int interlaceMethod, int* compressionMethod, int* filterMethod)
		{
			fixed (uint* pwidth = &width)
			{
				fixed (uint* pheight = &height)
				{
					fixed (int* pbitDepth = &bitDepth)
					{
						fixed (int* pcolorType = &colorType)
						{
							fixed (int* pinterlaceMethod = &interlaceMethod)
							{
								uint ret = GetIHDRNative(pngPtr, infoPtr, (uint*)pwidth, (uint*)pheight, (int*)pbitDepth, (int*)pcolorType, (int*)pinterlaceMethod, compressionMethod, filterMethod);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetIHDR(PngStruct* pngPtr, PngInfo* infoPtr, uint* width, uint* height, int* bitDepth, int* colorType, int* interlaceMethod, ref int compressionMethod, int* filterMethod)
		{
			fixed (int* pcompressionMethod = &compressionMethod)
			{
				uint ret = GetIHDRNative(pngPtr, infoPtr, width, height, bitDepth, colorType, interlaceMethod, (int*)pcompressionMethod, filterMethod);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetIHDR(PngStruct* pngPtr, PngInfo* infoPtr, ref uint width, uint* height, int* bitDepth, int* colorType, int* interlaceMethod, ref int compressionMethod, int* filterMethod)
		{
			fixed (uint* pwidth = &width)
			{
				fixed (int* pcompressionMethod = &compressionMethod)
				{
					uint ret = GetIHDRNative(pngPtr, infoPtr, (uint*)pwidth, height, bitDepth, colorType, interlaceMethod, (int*)pcompressionMethod, filterMethod);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetIHDR(PngStruct* pngPtr, PngInfo* infoPtr, uint* width, ref uint height, int* bitDepth, int* colorType, int* interlaceMethod, ref int compressionMethod, int* filterMethod)
		{
			fixed (uint* pheight = &height)
			{
				fixed (int* pcompressionMethod = &compressionMethod)
				{
					uint ret = GetIHDRNative(pngPtr, infoPtr, width, (uint*)pheight, bitDepth, colorType, interlaceMethod, (int*)pcompressionMethod, filterMethod);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetIHDR(PngStruct* pngPtr, PngInfo* infoPtr, ref uint width, ref uint height, int* bitDepth, int* colorType, int* interlaceMethod, ref int compressionMethod, int* filterMethod)
		{
			fixed (uint* pwidth = &width)
			{
				fixed (uint* pheight = &height)
				{
					fixed (int* pcompressionMethod = &compressionMethod)
					{
						uint ret = GetIHDRNative(pngPtr, infoPtr, (uint*)pwidth, (uint*)pheight, bitDepth, colorType, interlaceMethod, (int*)pcompressionMethod, filterMethod);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetIHDR(PngStruct* pngPtr, PngInfo* infoPtr, uint* width, uint* height, ref int bitDepth, int* colorType, int* interlaceMethod, ref int compressionMethod, int* filterMethod)
		{
			fixed (int* pbitDepth = &bitDepth)
			{
				fixed (int* pcompressionMethod = &compressionMethod)
				{
					uint ret = GetIHDRNative(pngPtr, infoPtr, width, height, (int*)pbitDepth, colorType, interlaceMethod, (int*)pcompressionMethod, filterMethod);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetIHDR(PngStruct* pngPtr, PngInfo* infoPtr, ref uint width, uint* height, ref int bitDepth, int* colorType, int* interlaceMethod, ref int compressionMethod, int* filterMethod)
		{
			fixed (uint* pwidth = &width)
			{
				fixed (int* pbitDepth = &bitDepth)
				{
					fixed (int* pcompressionMethod = &compressionMethod)
					{
						uint ret = GetIHDRNative(pngPtr, infoPtr, (uint*)pwidth, height, (int*)pbitDepth, colorType, interlaceMethod, (int*)pcompressionMethod, filterMethod);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetIHDR(PngStruct* pngPtr, PngInfo* infoPtr, uint* width, ref uint height, ref int bitDepth, int* colorType, int* interlaceMethod, ref int compressionMethod, int* filterMethod)
		{
			fixed (uint* pheight = &height)
			{
				fixed (int* pbitDepth = &bitDepth)
				{
					fixed (int* pcompressionMethod = &compressionMethod)
					{
						uint ret = GetIHDRNative(pngPtr, infoPtr, width, (uint*)pheight, (int*)pbitDepth, colorType, interlaceMethod, (int*)pcompressionMethod, filterMethod);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetIHDR(PngStruct* pngPtr, PngInfo* infoPtr, ref uint width, ref uint height, ref int bitDepth, int* colorType, int* interlaceMethod, ref int compressionMethod, int* filterMethod)
		{
			fixed (uint* pwidth = &width)
			{
				fixed (uint* pheight = &height)
				{
					fixed (int* pbitDepth = &bitDepth)
					{
						fixed (int* pcompressionMethod = &compressionMethod)
						{
							uint ret = GetIHDRNative(pngPtr, infoPtr, (uint*)pwidth, (uint*)pheight, (int*)pbitDepth, colorType, interlaceMethod, (int*)pcompressionMethod, filterMethod);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetIHDR(PngStruct* pngPtr, PngInfo* infoPtr, uint* width, uint* height, int* bitDepth, ref int colorType, int* interlaceMethod, ref int compressionMethod, int* filterMethod)
		{
			fixed (int* pcolorType = &colorType)
			{
				fixed (int* pcompressionMethod = &compressionMethod)
				{
					uint ret = GetIHDRNative(pngPtr, infoPtr, width, height, bitDepth, (int*)pcolorType, interlaceMethod, (int*)pcompressionMethod, filterMethod);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetIHDR(PngStruct* pngPtr, PngInfo* infoPtr, ref uint width, uint* height, int* bitDepth, ref int colorType, int* interlaceMethod, ref int compressionMethod, int* filterMethod)
		{
			fixed (uint* pwidth = &width)
			{
				fixed (int* pcolorType = &colorType)
				{
					fixed (int* pcompressionMethod = &compressionMethod)
					{
						uint ret = GetIHDRNative(pngPtr, infoPtr, (uint*)pwidth, height, bitDepth, (int*)pcolorType, interlaceMethod, (int*)pcompressionMethod, filterMethod);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetIHDR(PngStruct* pngPtr, PngInfo* infoPtr, uint* width, ref uint height, int* bitDepth, ref int colorType, int* interlaceMethod, ref int compressionMethod, int* filterMethod)
		{
			fixed (uint* pheight = &height)
			{
				fixed (int* pcolorType = &colorType)
				{
					fixed (int* pcompressionMethod = &compressionMethod)
					{
						uint ret = GetIHDRNative(pngPtr, infoPtr, width, (uint*)pheight, bitDepth, (int*)pcolorType, interlaceMethod, (int*)pcompressionMethod, filterMethod);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetIHDR(PngStruct* pngPtr, PngInfo* infoPtr, ref uint width, ref uint height, int* bitDepth, ref int colorType, int* interlaceMethod, ref int compressionMethod, int* filterMethod)
		{
			fixed (uint* pwidth = &width)
			{
				fixed (uint* pheight = &height)
				{
					fixed (int* pcolorType = &colorType)
					{
						fixed (int* pcompressionMethod = &compressionMethod)
						{
							uint ret = GetIHDRNative(pngPtr, infoPtr, (uint*)pwidth, (uint*)pheight, bitDepth, (int*)pcolorType, interlaceMethod, (int*)pcompressionMethod, filterMethod);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetIHDR(PngStruct* pngPtr, PngInfo* infoPtr, uint* width, uint* height, ref int bitDepth, ref int colorType, int* interlaceMethod, ref int compressionMethod, int* filterMethod)
		{
			fixed (int* pbitDepth = &bitDepth)
			{
				fixed (int* pcolorType = &colorType)
				{
					fixed (int* pcompressionMethod = &compressionMethod)
					{
						uint ret = GetIHDRNative(pngPtr, infoPtr, width, height, (int*)pbitDepth, (int*)pcolorType, interlaceMethod, (int*)pcompressionMethod, filterMethod);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetIHDR(PngStruct* pngPtr, PngInfo* infoPtr, ref uint width, uint* height, ref int bitDepth, ref int colorType, int* interlaceMethod, ref int compressionMethod, int* filterMethod)
		{
			fixed (uint* pwidth = &width)
			{
				fixed (int* pbitDepth = &bitDepth)
				{
					fixed (int* pcolorType = &colorType)
					{
						fixed (int* pcompressionMethod = &compressionMethod)
						{
							uint ret = GetIHDRNative(pngPtr, infoPtr, (uint*)pwidth, height, (int*)pbitDepth, (int*)pcolorType, interlaceMethod, (int*)pcompressionMethod, filterMethod);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetIHDR(PngStruct* pngPtr, PngInfo* infoPtr, uint* width, ref uint height, ref int bitDepth, ref int colorType, int* interlaceMethod, ref int compressionMethod, int* filterMethod)
		{
			fixed (uint* pheight = &height)
			{
				fixed (int* pbitDepth = &bitDepth)
				{
					fixed (int* pcolorType = &colorType)
					{
						fixed (int* pcompressionMethod = &compressionMethod)
						{
							uint ret = GetIHDRNative(pngPtr, infoPtr, width, (uint*)pheight, (int*)pbitDepth, (int*)pcolorType, interlaceMethod, (int*)pcompressionMethod, filterMethod);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetIHDR(PngStruct* pngPtr, PngInfo* infoPtr, ref uint width, ref uint height, ref int bitDepth, ref int colorType, int* interlaceMethod, ref int compressionMethod, int* filterMethod)
		{
			fixed (uint* pwidth = &width)
			{
				fixed (uint* pheight = &height)
				{
					fixed (int* pbitDepth = &bitDepth)
					{
						fixed (int* pcolorType = &colorType)
						{
							fixed (int* pcompressionMethod = &compressionMethod)
							{
								uint ret = GetIHDRNative(pngPtr, infoPtr, (uint*)pwidth, (uint*)pheight, (int*)pbitDepth, (int*)pcolorType, interlaceMethod, (int*)pcompressionMethod, filterMethod);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetIHDR(PngStruct* pngPtr, PngInfo* infoPtr, uint* width, uint* height, int* bitDepth, int* colorType, ref int interlaceMethod, ref int compressionMethod, int* filterMethod)
		{
			fixed (int* pinterlaceMethod = &interlaceMethod)
			{
				fixed (int* pcompressionMethod = &compressionMethod)
				{
					uint ret = GetIHDRNative(pngPtr, infoPtr, width, height, bitDepth, colorType, (int*)pinterlaceMethod, (int*)pcompressionMethod, filterMethod);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetIHDR(PngStruct* pngPtr, PngInfo* infoPtr, ref uint width, uint* height, int* bitDepth, int* colorType, ref int interlaceMethod, ref int compressionMethod, int* filterMethod)
		{
			fixed (uint* pwidth = &width)
			{
				fixed (int* pinterlaceMethod = &interlaceMethod)
				{
					fixed (int* pcompressionMethod = &compressionMethod)
					{
						uint ret = GetIHDRNative(pngPtr, infoPtr, (uint*)pwidth, height, bitDepth, colorType, (int*)pinterlaceMethod, (int*)pcompressionMethod, filterMethod);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetIHDR(PngStruct* pngPtr, PngInfo* infoPtr, uint* width, ref uint height, int* bitDepth, int* colorType, ref int interlaceMethod, ref int compressionMethod, int* filterMethod)
		{
			fixed (uint* pheight = &height)
			{
				fixed (int* pinterlaceMethod = &interlaceMethod)
				{
					fixed (int* pcompressionMethod = &compressionMethod)
					{
						uint ret = GetIHDRNative(pngPtr, infoPtr, width, (uint*)pheight, bitDepth, colorType, (int*)pinterlaceMethod, (int*)pcompressionMethod, filterMethod);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetIHDR(PngStruct* pngPtr, PngInfo* infoPtr, ref uint width, ref uint height, int* bitDepth, int* colorType, ref int interlaceMethod, ref int compressionMethod, int* filterMethod)
		{
			fixed (uint* pwidth = &width)
			{
				fixed (uint* pheight = &height)
				{
					fixed (int* pinterlaceMethod = &interlaceMethod)
					{
						fixed (int* pcompressionMethod = &compressionMethod)
						{
							uint ret = GetIHDRNative(pngPtr, infoPtr, (uint*)pwidth, (uint*)pheight, bitDepth, colorType, (int*)pinterlaceMethod, (int*)pcompressionMethod, filterMethod);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetIHDR(PngStruct* pngPtr, PngInfo* infoPtr, uint* width, uint* height, ref int bitDepth, int* colorType, ref int interlaceMethod, ref int compressionMethod, int* filterMethod)
		{
			fixed (int* pbitDepth = &bitDepth)
			{
				fixed (int* pinterlaceMethod = &interlaceMethod)
				{
					fixed (int* pcompressionMethod = &compressionMethod)
					{
						uint ret = GetIHDRNative(pngPtr, infoPtr, width, height, (int*)pbitDepth, colorType, (int*)pinterlaceMethod, (int*)pcompressionMethod, filterMethod);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetIHDR(PngStruct* pngPtr, PngInfo* infoPtr, ref uint width, uint* height, ref int bitDepth, int* colorType, ref int interlaceMethod, ref int compressionMethod, int* filterMethod)
		{
			fixed (uint* pwidth = &width)
			{
				fixed (int* pbitDepth = &bitDepth)
				{
					fixed (int* pinterlaceMethod = &interlaceMethod)
					{
						fixed (int* pcompressionMethod = &compressionMethod)
						{
							uint ret = GetIHDRNative(pngPtr, infoPtr, (uint*)pwidth, height, (int*)pbitDepth, colorType, (int*)pinterlaceMethod, (int*)pcompressionMethod, filterMethod);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetIHDR(PngStruct* pngPtr, PngInfo* infoPtr, uint* width, ref uint height, ref int bitDepth, int* colorType, ref int interlaceMethod, ref int compressionMethod, int* filterMethod)
		{
			fixed (uint* pheight = &height)
			{
				fixed (int* pbitDepth = &bitDepth)
				{
					fixed (int* pinterlaceMethod = &interlaceMethod)
					{
						fixed (int* pcompressionMethod = &compressionMethod)
						{
							uint ret = GetIHDRNative(pngPtr, infoPtr, width, (uint*)pheight, (int*)pbitDepth, colorType, (int*)pinterlaceMethod, (int*)pcompressionMethod, filterMethod);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetIHDR(PngStruct* pngPtr, PngInfo* infoPtr, ref uint width, ref uint height, ref int bitDepth, int* colorType, ref int interlaceMethod, ref int compressionMethod, int* filterMethod)
		{
			fixed (uint* pwidth = &width)
			{
				fixed (uint* pheight = &height)
				{
					fixed (int* pbitDepth = &bitDepth)
					{
						fixed (int* pinterlaceMethod = &interlaceMethod)
						{
							fixed (int* pcompressionMethod = &compressionMethod)
							{
								uint ret = GetIHDRNative(pngPtr, infoPtr, (uint*)pwidth, (uint*)pheight, (int*)pbitDepth, colorType, (int*)pinterlaceMethod, (int*)pcompressionMethod, filterMethod);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetIHDR(PngStruct* pngPtr, PngInfo* infoPtr, uint* width, uint* height, int* bitDepth, ref int colorType, ref int interlaceMethod, ref int compressionMethod, int* filterMethod)
		{
			fixed (int* pcolorType = &colorType)
			{
				fixed (int* pinterlaceMethod = &interlaceMethod)
				{
					fixed (int* pcompressionMethod = &compressionMethod)
					{
						uint ret = GetIHDRNative(pngPtr, infoPtr, width, height, bitDepth, (int*)pcolorType, (int*)pinterlaceMethod, (int*)pcompressionMethod, filterMethod);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetIHDR(PngStruct* pngPtr, PngInfo* infoPtr, ref uint width, uint* height, int* bitDepth, ref int colorType, ref int interlaceMethod, ref int compressionMethod, int* filterMethod)
		{
			fixed (uint* pwidth = &width)
			{
				fixed (int* pcolorType = &colorType)
				{
					fixed (int* pinterlaceMethod = &interlaceMethod)
					{
						fixed (int* pcompressionMethod = &compressionMethod)
						{
							uint ret = GetIHDRNative(pngPtr, infoPtr, (uint*)pwidth, height, bitDepth, (int*)pcolorType, (int*)pinterlaceMethod, (int*)pcompressionMethod, filterMethod);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetIHDR(PngStruct* pngPtr, PngInfo* infoPtr, uint* width, ref uint height, int* bitDepth, ref int colorType, ref int interlaceMethod, ref int compressionMethod, int* filterMethod)
		{
			fixed (uint* pheight = &height)
			{
				fixed (int* pcolorType = &colorType)
				{
					fixed (int* pinterlaceMethod = &interlaceMethod)
					{
						fixed (int* pcompressionMethod = &compressionMethod)
						{
							uint ret = GetIHDRNative(pngPtr, infoPtr, width, (uint*)pheight, bitDepth, (int*)pcolorType, (int*)pinterlaceMethod, (int*)pcompressionMethod, filterMethod);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetIHDR(PngStruct* pngPtr, PngInfo* infoPtr, ref uint width, ref uint height, int* bitDepth, ref int colorType, ref int interlaceMethod, ref int compressionMethod, int* filterMethod)
		{
			fixed (uint* pwidth = &width)
			{
				fixed (uint* pheight = &height)
				{
					fixed (int* pcolorType = &colorType)
					{
						fixed (int* pinterlaceMethod = &interlaceMethod)
						{
							fixed (int* pcompressionMethod = &compressionMethod)
							{
								uint ret = GetIHDRNative(pngPtr, infoPtr, (uint*)pwidth, (uint*)pheight, bitDepth, (int*)pcolorType, (int*)pinterlaceMethod, (int*)pcompressionMethod, filterMethod);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetIHDR(PngStruct* pngPtr, PngInfo* infoPtr, uint* width, uint* height, ref int bitDepth, ref int colorType, ref int interlaceMethod, ref int compressionMethod, int* filterMethod)
		{
			fixed (int* pbitDepth = &bitDepth)
			{
				fixed (int* pcolorType = &colorType)
				{
					fixed (int* pinterlaceMethod = &interlaceMethod)
					{
						fixed (int* pcompressionMethod = &compressionMethod)
						{
							uint ret = GetIHDRNative(pngPtr, infoPtr, width, height, (int*)pbitDepth, (int*)pcolorType, (int*)pinterlaceMethod, (int*)pcompressionMethod, filterMethod);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetIHDR(PngStruct* pngPtr, PngInfo* infoPtr, ref uint width, uint* height, ref int bitDepth, ref int colorType, ref int interlaceMethod, ref int compressionMethod, int* filterMethod)
		{
			fixed (uint* pwidth = &width)
			{
				fixed (int* pbitDepth = &bitDepth)
				{
					fixed (int* pcolorType = &colorType)
					{
						fixed (int* pinterlaceMethod = &interlaceMethod)
						{
							fixed (int* pcompressionMethod = &compressionMethod)
							{
								uint ret = GetIHDRNative(pngPtr, infoPtr, (uint*)pwidth, height, (int*)pbitDepth, (int*)pcolorType, (int*)pinterlaceMethod, (int*)pcompressionMethod, filterMethod);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetIHDR(PngStruct* pngPtr, PngInfo* infoPtr, uint* width, ref uint height, ref int bitDepth, ref int colorType, ref int interlaceMethod, ref int compressionMethod, int* filterMethod)
		{
			fixed (uint* pheight = &height)
			{
				fixed (int* pbitDepth = &bitDepth)
				{
					fixed (int* pcolorType = &colorType)
					{
						fixed (int* pinterlaceMethod = &interlaceMethod)
						{
							fixed (int* pcompressionMethod = &compressionMethod)
							{
								uint ret = GetIHDRNative(pngPtr, infoPtr, width, (uint*)pheight, (int*)pbitDepth, (int*)pcolorType, (int*)pinterlaceMethod, (int*)pcompressionMethod, filterMethod);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetIHDR(PngStruct* pngPtr, PngInfo* infoPtr, ref uint width, ref uint height, ref int bitDepth, ref int colorType, ref int interlaceMethod, ref int compressionMethod, int* filterMethod)
		{
			fixed (uint* pwidth = &width)
			{
				fixed (uint* pheight = &height)
				{
					fixed (int* pbitDepth = &bitDepth)
					{
						fixed (int* pcolorType = &colorType)
						{
							fixed (int* pinterlaceMethod = &interlaceMethod)
							{
								fixed (int* pcompressionMethod = &compressionMethod)
								{
									uint ret = GetIHDRNative(pngPtr, infoPtr, (uint*)pwidth, (uint*)pheight, (int*)pbitDepth, (int*)pcolorType, (int*)pinterlaceMethod, (int*)pcompressionMethod, filterMethod);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetIHDR(PngStruct* pngPtr, PngInfo* infoPtr, uint* width, uint* height, int* bitDepth, int* colorType, int* interlaceMethod, int* compressionMethod, ref int filterMethod)
		{
			fixed (int* pfilterMethod = &filterMethod)
			{
				uint ret = GetIHDRNative(pngPtr, infoPtr, width, height, bitDepth, colorType, interlaceMethod, compressionMethod, (int*)pfilterMethod);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetIHDR(PngStruct* pngPtr, PngInfo* infoPtr, ref uint width, uint* height, int* bitDepth, int* colorType, int* interlaceMethod, int* compressionMethod, ref int filterMethod)
		{
			fixed (uint* pwidth = &width)
			{
				fixed (int* pfilterMethod = &filterMethod)
				{
					uint ret = GetIHDRNative(pngPtr, infoPtr, (uint*)pwidth, height, bitDepth, colorType, interlaceMethod, compressionMethod, (int*)pfilterMethod);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetIHDR(PngStruct* pngPtr, PngInfo* infoPtr, uint* width, ref uint height, int* bitDepth, int* colorType, int* interlaceMethod, int* compressionMethod, ref int filterMethod)
		{
			fixed (uint* pheight = &height)
			{
				fixed (int* pfilterMethod = &filterMethod)
				{
					uint ret = GetIHDRNative(pngPtr, infoPtr, width, (uint*)pheight, bitDepth, colorType, interlaceMethod, compressionMethod, (int*)pfilterMethod);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetIHDR(PngStruct* pngPtr, PngInfo* infoPtr, ref uint width, ref uint height, int* bitDepth, int* colorType, int* interlaceMethod, int* compressionMethod, ref int filterMethod)
		{
			fixed (uint* pwidth = &width)
			{
				fixed (uint* pheight = &height)
				{
					fixed (int* pfilterMethod = &filterMethod)
					{
						uint ret = GetIHDRNative(pngPtr, infoPtr, (uint*)pwidth, (uint*)pheight, bitDepth, colorType, interlaceMethod, compressionMethod, (int*)pfilterMethod);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetIHDR(PngStruct* pngPtr, PngInfo* infoPtr, uint* width, uint* height, ref int bitDepth, int* colorType, int* interlaceMethod, int* compressionMethod, ref int filterMethod)
		{
			fixed (int* pbitDepth = &bitDepth)
			{
				fixed (int* pfilterMethod = &filterMethod)
				{
					uint ret = GetIHDRNative(pngPtr, infoPtr, width, height, (int*)pbitDepth, colorType, interlaceMethod, compressionMethod, (int*)pfilterMethod);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetIHDR(PngStruct* pngPtr, PngInfo* infoPtr, ref uint width, uint* height, ref int bitDepth, int* colorType, int* interlaceMethod, int* compressionMethod, ref int filterMethod)
		{
			fixed (uint* pwidth = &width)
			{
				fixed (int* pbitDepth = &bitDepth)
				{
					fixed (int* pfilterMethod = &filterMethod)
					{
						uint ret = GetIHDRNative(pngPtr, infoPtr, (uint*)pwidth, height, (int*)pbitDepth, colorType, interlaceMethod, compressionMethod, (int*)pfilterMethod);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetIHDR(PngStruct* pngPtr, PngInfo* infoPtr, uint* width, ref uint height, ref int bitDepth, int* colorType, int* interlaceMethod, int* compressionMethod, ref int filterMethod)
		{
			fixed (uint* pheight = &height)
			{
				fixed (int* pbitDepth = &bitDepth)
				{
					fixed (int* pfilterMethod = &filterMethod)
					{
						uint ret = GetIHDRNative(pngPtr, infoPtr, width, (uint*)pheight, (int*)pbitDepth, colorType, interlaceMethod, compressionMethod, (int*)pfilterMethod);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetIHDR(PngStruct* pngPtr, PngInfo* infoPtr, ref uint width, ref uint height, ref int bitDepth, int* colorType, int* interlaceMethod, int* compressionMethod, ref int filterMethod)
		{
			fixed (uint* pwidth = &width)
			{
				fixed (uint* pheight = &height)
				{
					fixed (int* pbitDepth = &bitDepth)
					{
						fixed (int* pfilterMethod = &filterMethod)
						{
							uint ret = GetIHDRNative(pngPtr, infoPtr, (uint*)pwidth, (uint*)pheight, (int*)pbitDepth, colorType, interlaceMethod, compressionMethod, (int*)pfilterMethod);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetIHDR(PngStruct* pngPtr, PngInfo* infoPtr, uint* width, uint* height, int* bitDepth, ref int colorType, int* interlaceMethod, int* compressionMethod, ref int filterMethod)
		{
			fixed (int* pcolorType = &colorType)
			{
				fixed (int* pfilterMethod = &filterMethod)
				{
					uint ret = GetIHDRNative(pngPtr, infoPtr, width, height, bitDepth, (int*)pcolorType, interlaceMethod, compressionMethod, (int*)pfilterMethod);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetIHDR(PngStruct* pngPtr, PngInfo* infoPtr, ref uint width, uint* height, int* bitDepth, ref int colorType, int* interlaceMethod, int* compressionMethod, ref int filterMethod)
		{
			fixed (uint* pwidth = &width)
			{
				fixed (int* pcolorType = &colorType)
				{
					fixed (int* pfilterMethod = &filterMethod)
					{
						uint ret = GetIHDRNative(pngPtr, infoPtr, (uint*)pwidth, height, bitDepth, (int*)pcolorType, interlaceMethod, compressionMethod, (int*)pfilterMethod);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetIHDR(PngStruct* pngPtr, PngInfo* infoPtr, uint* width, ref uint height, int* bitDepth, ref int colorType, int* interlaceMethod, int* compressionMethod, ref int filterMethod)
		{
			fixed (uint* pheight = &height)
			{
				fixed (int* pcolorType = &colorType)
				{
					fixed (int* pfilterMethod = &filterMethod)
					{
						uint ret = GetIHDRNative(pngPtr, infoPtr, width, (uint*)pheight, bitDepth, (int*)pcolorType, interlaceMethod, compressionMethod, (int*)pfilterMethod);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetIHDR(PngStruct* pngPtr, PngInfo* infoPtr, ref uint width, ref uint height, int* bitDepth, ref int colorType, int* interlaceMethod, int* compressionMethod, ref int filterMethod)
		{
			fixed (uint* pwidth = &width)
			{
				fixed (uint* pheight = &height)
				{
					fixed (int* pcolorType = &colorType)
					{
						fixed (int* pfilterMethod = &filterMethod)
						{
							uint ret = GetIHDRNative(pngPtr, infoPtr, (uint*)pwidth, (uint*)pheight, bitDepth, (int*)pcolorType, interlaceMethod, compressionMethod, (int*)pfilterMethod);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetIHDR(PngStruct* pngPtr, PngInfo* infoPtr, uint* width, uint* height, ref int bitDepth, ref int colorType, int* interlaceMethod, int* compressionMethod, ref int filterMethod)
		{
			fixed (int* pbitDepth = &bitDepth)
			{
				fixed (int* pcolorType = &colorType)
				{
					fixed (int* pfilterMethod = &filterMethod)
					{
						uint ret = GetIHDRNative(pngPtr, infoPtr, width, height, (int*)pbitDepth, (int*)pcolorType, interlaceMethod, compressionMethod, (int*)pfilterMethod);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetIHDR(PngStruct* pngPtr, PngInfo* infoPtr, ref uint width, uint* height, ref int bitDepth, ref int colorType, int* interlaceMethod, int* compressionMethod, ref int filterMethod)
		{
			fixed (uint* pwidth = &width)
			{
				fixed (int* pbitDepth = &bitDepth)
				{
					fixed (int* pcolorType = &colorType)
					{
						fixed (int* pfilterMethod = &filterMethod)
						{
							uint ret = GetIHDRNative(pngPtr, infoPtr, (uint*)pwidth, height, (int*)pbitDepth, (int*)pcolorType, interlaceMethod, compressionMethod, (int*)pfilterMethod);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetIHDR(PngStruct* pngPtr, PngInfo* infoPtr, uint* width, ref uint height, ref int bitDepth, ref int colorType, int* interlaceMethod, int* compressionMethod, ref int filterMethod)
		{
			fixed (uint* pheight = &height)
			{
				fixed (int* pbitDepth = &bitDepth)
				{
					fixed (int* pcolorType = &colorType)
					{
						fixed (int* pfilterMethod = &filterMethod)
						{
							uint ret = GetIHDRNative(pngPtr, infoPtr, width, (uint*)pheight, (int*)pbitDepth, (int*)pcolorType, interlaceMethod, compressionMethod, (int*)pfilterMethod);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetIHDR(PngStruct* pngPtr, PngInfo* infoPtr, ref uint width, ref uint height, ref int bitDepth, ref int colorType, int* interlaceMethod, int* compressionMethod, ref int filterMethod)
		{
			fixed (uint* pwidth = &width)
			{
				fixed (uint* pheight = &height)
				{
					fixed (int* pbitDepth = &bitDepth)
					{
						fixed (int* pcolorType = &colorType)
						{
							fixed (int* pfilterMethod = &filterMethod)
							{
								uint ret = GetIHDRNative(pngPtr, infoPtr, (uint*)pwidth, (uint*)pheight, (int*)pbitDepth, (int*)pcolorType, interlaceMethod, compressionMethod, (int*)pfilterMethod);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetIHDR(PngStruct* pngPtr, PngInfo* infoPtr, uint* width, uint* height, int* bitDepth, int* colorType, ref int interlaceMethod, int* compressionMethod, ref int filterMethod)
		{
			fixed (int* pinterlaceMethod = &interlaceMethod)
			{
				fixed (int* pfilterMethod = &filterMethod)
				{
					uint ret = GetIHDRNative(pngPtr, infoPtr, width, height, bitDepth, colorType, (int*)pinterlaceMethod, compressionMethod, (int*)pfilterMethod);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetIHDR(PngStruct* pngPtr, PngInfo* infoPtr, ref uint width, uint* height, int* bitDepth, int* colorType, ref int interlaceMethod, int* compressionMethod, ref int filterMethod)
		{
			fixed (uint* pwidth = &width)
			{
				fixed (int* pinterlaceMethod = &interlaceMethod)
				{
					fixed (int* pfilterMethod = &filterMethod)
					{
						uint ret = GetIHDRNative(pngPtr, infoPtr, (uint*)pwidth, height, bitDepth, colorType, (int*)pinterlaceMethod, compressionMethod, (int*)pfilterMethod);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetIHDR(PngStruct* pngPtr, PngInfo* infoPtr, uint* width, ref uint height, int* bitDepth, int* colorType, ref int interlaceMethod, int* compressionMethod, ref int filterMethod)
		{
			fixed (uint* pheight = &height)
			{
				fixed (int* pinterlaceMethod = &interlaceMethod)
				{
					fixed (int* pfilterMethod = &filterMethod)
					{
						uint ret = GetIHDRNative(pngPtr, infoPtr, width, (uint*)pheight, bitDepth, colorType, (int*)pinterlaceMethod, compressionMethod, (int*)pfilterMethod);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetIHDR(PngStruct* pngPtr, PngInfo* infoPtr, ref uint width, ref uint height, int* bitDepth, int* colorType, ref int interlaceMethod, int* compressionMethod, ref int filterMethod)
		{
			fixed (uint* pwidth = &width)
			{
				fixed (uint* pheight = &height)
				{
					fixed (int* pinterlaceMethod = &interlaceMethod)
					{
						fixed (int* pfilterMethod = &filterMethod)
						{
							uint ret = GetIHDRNative(pngPtr, infoPtr, (uint*)pwidth, (uint*)pheight, bitDepth, colorType, (int*)pinterlaceMethod, compressionMethod, (int*)pfilterMethod);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetIHDR(PngStruct* pngPtr, PngInfo* infoPtr, uint* width, uint* height, ref int bitDepth, int* colorType, ref int interlaceMethod, int* compressionMethod, ref int filterMethod)
		{
			fixed (int* pbitDepth = &bitDepth)
			{
				fixed (int* pinterlaceMethod = &interlaceMethod)
				{
					fixed (int* pfilterMethod = &filterMethod)
					{
						uint ret = GetIHDRNative(pngPtr, infoPtr, width, height, (int*)pbitDepth, colorType, (int*)pinterlaceMethod, compressionMethod, (int*)pfilterMethod);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetIHDR(PngStruct* pngPtr, PngInfo* infoPtr, ref uint width, uint* height, ref int bitDepth, int* colorType, ref int interlaceMethod, int* compressionMethod, ref int filterMethod)
		{
			fixed (uint* pwidth = &width)
			{
				fixed (int* pbitDepth = &bitDepth)
				{
					fixed (int* pinterlaceMethod = &interlaceMethod)
					{
						fixed (int* pfilterMethod = &filterMethod)
						{
							uint ret = GetIHDRNative(pngPtr, infoPtr, (uint*)pwidth, height, (int*)pbitDepth, colorType, (int*)pinterlaceMethod, compressionMethod, (int*)pfilterMethod);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetIHDR(PngStruct* pngPtr, PngInfo* infoPtr, uint* width, ref uint height, ref int bitDepth, int* colorType, ref int interlaceMethod, int* compressionMethod, ref int filterMethod)
		{
			fixed (uint* pheight = &height)
			{
				fixed (int* pbitDepth = &bitDepth)
				{
					fixed (int* pinterlaceMethod = &interlaceMethod)
					{
						fixed (int* pfilterMethod = &filterMethod)
						{
							uint ret = GetIHDRNative(pngPtr, infoPtr, width, (uint*)pheight, (int*)pbitDepth, colorType, (int*)pinterlaceMethod, compressionMethod, (int*)pfilterMethod);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetIHDR(PngStruct* pngPtr, PngInfo* infoPtr, ref uint width, ref uint height, ref int bitDepth, int* colorType, ref int interlaceMethod, int* compressionMethod, ref int filterMethod)
		{
			fixed (uint* pwidth = &width)
			{
				fixed (uint* pheight = &height)
				{
					fixed (int* pbitDepth = &bitDepth)
					{
						fixed (int* pinterlaceMethod = &interlaceMethod)
						{
							fixed (int* pfilterMethod = &filterMethod)
							{
								uint ret = GetIHDRNative(pngPtr, infoPtr, (uint*)pwidth, (uint*)pheight, (int*)pbitDepth, colorType, (int*)pinterlaceMethod, compressionMethod, (int*)pfilterMethod);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetIHDR(PngStruct* pngPtr, PngInfo* infoPtr, uint* width, uint* height, int* bitDepth, ref int colorType, ref int interlaceMethod, int* compressionMethod, ref int filterMethod)
		{
			fixed (int* pcolorType = &colorType)
			{
				fixed (int* pinterlaceMethod = &interlaceMethod)
				{
					fixed (int* pfilterMethod = &filterMethod)
					{
						uint ret = GetIHDRNative(pngPtr, infoPtr, width, height, bitDepth, (int*)pcolorType, (int*)pinterlaceMethod, compressionMethod, (int*)pfilterMethod);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetIHDR(PngStruct* pngPtr, PngInfo* infoPtr, ref uint width, uint* height, int* bitDepth, ref int colorType, ref int interlaceMethod, int* compressionMethod, ref int filterMethod)
		{
			fixed (uint* pwidth = &width)
			{
				fixed (int* pcolorType = &colorType)
				{
					fixed (int* pinterlaceMethod = &interlaceMethod)
					{
						fixed (int* pfilterMethod = &filterMethod)
						{
							uint ret = GetIHDRNative(pngPtr, infoPtr, (uint*)pwidth, height, bitDepth, (int*)pcolorType, (int*)pinterlaceMethod, compressionMethod, (int*)pfilterMethod);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetIHDR(PngStruct* pngPtr, PngInfo* infoPtr, uint* width, ref uint height, int* bitDepth, ref int colorType, ref int interlaceMethod, int* compressionMethod, ref int filterMethod)
		{
			fixed (uint* pheight = &height)
			{
				fixed (int* pcolorType = &colorType)
				{
					fixed (int* pinterlaceMethod = &interlaceMethod)
					{
						fixed (int* pfilterMethod = &filterMethod)
						{
							uint ret = GetIHDRNative(pngPtr, infoPtr, width, (uint*)pheight, bitDepth, (int*)pcolorType, (int*)pinterlaceMethod, compressionMethod, (int*)pfilterMethod);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetIHDR(PngStruct* pngPtr, PngInfo* infoPtr, ref uint width, ref uint height, int* bitDepth, ref int colorType, ref int interlaceMethod, int* compressionMethod, ref int filterMethod)
		{
			fixed (uint* pwidth = &width)
			{
				fixed (uint* pheight = &height)
				{
					fixed (int* pcolorType = &colorType)
					{
						fixed (int* pinterlaceMethod = &interlaceMethod)
						{
							fixed (int* pfilterMethod = &filterMethod)
							{
								uint ret = GetIHDRNative(pngPtr, infoPtr, (uint*)pwidth, (uint*)pheight, bitDepth, (int*)pcolorType, (int*)pinterlaceMethod, compressionMethod, (int*)pfilterMethod);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetIHDR(PngStruct* pngPtr, PngInfo* infoPtr, uint* width, uint* height, ref int bitDepth, ref int colorType, ref int interlaceMethod, int* compressionMethod, ref int filterMethod)
		{
			fixed (int* pbitDepth = &bitDepth)
			{
				fixed (int* pcolorType = &colorType)
				{
					fixed (int* pinterlaceMethod = &interlaceMethod)
					{
						fixed (int* pfilterMethod = &filterMethod)
						{
							uint ret = GetIHDRNative(pngPtr, infoPtr, width, height, (int*)pbitDepth, (int*)pcolorType, (int*)pinterlaceMethod, compressionMethod, (int*)pfilterMethod);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetIHDR(PngStruct* pngPtr, PngInfo* infoPtr, ref uint width, uint* height, ref int bitDepth, ref int colorType, ref int interlaceMethod, int* compressionMethod, ref int filterMethod)
		{
			fixed (uint* pwidth = &width)
			{
				fixed (int* pbitDepth = &bitDepth)
				{
					fixed (int* pcolorType = &colorType)
					{
						fixed (int* pinterlaceMethod = &interlaceMethod)
						{
							fixed (int* pfilterMethod = &filterMethod)
							{
								uint ret = GetIHDRNative(pngPtr, infoPtr, (uint*)pwidth, height, (int*)pbitDepth, (int*)pcolorType, (int*)pinterlaceMethod, compressionMethod, (int*)pfilterMethod);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetIHDR(PngStruct* pngPtr, PngInfo* infoPtr, uint* width, ref uint height, ref int bitDepth, ref int colorType, ref int interlaceMethod, int* compressionMethod, ref int filterMethod)
		{
			fixed (uint* pheight = &height)
			{
				fixed (int* pbitDepth = &bitDepth)
				{
					fixed (int* pcolorType = &colorType)
					{
						fixed (int* pinterlaceMethod = &interlaceMethod)
						{
							fixed (int* pfilterMethod = &filterMethod)
							{
								uint ret = GetIHDRNative(pngPtr, infoPtr, width, (uint*)pheight, (int*)pbitDepth, (int*)pcolorType, (int*)pinterlaceMethod, compressionMethod, (int*)pfilterMethod);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetIHDR(PngStruct* pngPtr, PngInfo* infoPtr, ref uint width, ref uint height, ref int bitDepth, ref int colorType, ref int interlaceMethod, int* compressionMethod, ref int filterMethod)
		{
			fixed (uint* pwidth = &width)
			{
				fixed (uint* pheight = &height)
				{
					fixed (int* pbitDepth = &bitDepth)
					{
						fixed (int* pcolorType = &colorType)
						{
							fixed (int* pinterlaceMethod = &interlaceMethod)
							{
								fixed (int* pfilterMethod = &filterMethod)
								{
									uint ret = GetIHDRNative(pngPtr, infoPtr, (uint*)pwidth, (uint*)pheight, (int*)pbitDepth, (int*)pcolorType, (int*)pinterlaceMethod, compressionMethod, (int*)pfilterMethod);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetIHDR(PngStruct* pngPtr, PngInfo* infoPtr, uint* width, uint* height, int* bitDepth, int* colorType, int* interlaceMethod, ref int compressionMethod, ref int filterMethod)
		{
			fixed (int* pcompressionMethod = &compressionMethod)
			{
				fixed (int* pfilterMethod = &filterMethod)
				{
					uint ret = GetIHDRNative(pngPtr, infoPtr, width, height, bitDepth, colorType, interlaceMethod, (int*)pcompressionMethod, (int*)pfilterMethod);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetIHDR(PngStruct* pngPtr, PngInfo* infoPtr, ref uint width, uint* height, int* bitDepth, int* colorType, int* interlaceMethod, ref int compressionMethod, ref int filterMethod)
		{
			fixed (uint* pwidth = &width)
			{
				fixed (int* pcompressionMethod = &compressionMethod)
				{
					fixed (int* pfilterMethod = &filterMethod)
					{
						uint ret = GetIHDRNative(pngPtr, infoPtr, (uint*)pwidth, height, bitDepth, colorType, interlaceMethod, (int*)pcompressionMethod, (int*)pfilterMethod);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetIHDR(PngStruct* pngPtr, PngInfo* infoPtr, uint* width, ref uint height, int* bitDepth, int* colorType, int* interlaceMethod, ref int compressionMethod, ref int filterMethod)
		{
			fixed (uint* pheight = &height)
			{
				fixed (int* pcompressionMethod = &compressionMethod)
				{
					fixed (int* pfilterMethod = &filterMethod)
					{
						uint ret = GetIHDRNative(pngPtr, infoPtr, width, (uint*)pheight, bitDepth, colorType, interlaceMethod, (int*)pcompressionMethod, (int*)pfilterMethod);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetIHDR(PngStruct* pngPtr, PngInfo* infoPtr, ref uint width, ref uint height, int* bitDepth, int* colorType, int* interlaceMethod, ref int compressionMethod, ref int filterMethod)
		{
			fixed (uint* pwidth = &width)
			{
				fixed (uint* pheight = &height)
				{
					fixed (int* pcompressionMethod = &compressionMethod)
					{
						fixed (int* pfilterMethod = &filterMethod)
						{
							uint ret = GetIHDRNative(pngPtr, infoPtr, (uint*)pwidth, (uint*)pheight, bitDepth, colorType, interlaceMethod, (int*)pcompressionMethod, (int*)pfilterMethod);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetIHDR(PngStruct* pngPtr, PngInfo* infoPtr, uint* width, uint* height, ref int bitDepth, int* colorType, int* interlaceMethod, ref int compressionMethod, ref int filterMethod)
		{
			fixed (int* pbitDepth = &bitDepth)
			{
				fixed (int* pcompressionMethod = &compressionMethod)
				{
					fixed (int* pfilterMethod = &filterMethod)
					{
						uint ret = GetIHDRNative(pngPtr, infoPtr, width, height, (int*)pbitDepth, colorType, interlaceMethod, (int*)pcompressionMethod, (int*)pfilterMethod);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetIHDR(PngStruct* pngPtr, PngInfo* infoPtr, ref uint width, uint* height, ref int bitDepth, int* colorType, int* interlaceMethod, ref int compressionMethod, ref int filterMethod)
		{
			fixed (uint* pwidth = &width)
			{
				fixed (int* pbitDepth = &bitDepth)
				{
					fixed (int* pcompressionMethod = &compressionMethod)
					{
						fixed (int* pfilterMethod = &filterMethod)
						{
							uint ret = GetIHDRNative(pngPtr, infoPtr, (uint*)pwidth, height, (int*)pbitDepth, colorType, interlaceMethod, (int*)pcompressionMethod, (int*)pfilterMethod);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetIHDR(PngStruct* pngPtr, PngInfo* infoPtr, uint* width, ref uint height, ref int bitDepth, int* colorType, int* interlaceMethod, ref int compressionMethod, ref int filterMethod)
		{
			fixed (uint* pheight = &height)
			{
				fixed (int* pbitDepth = &bitDepth)
				{
					fixed (int* pcompressionMethod = &compressionMethod)
					{
						fixed (int* pfilterMethod = &filterMethod)
						{
							uint ret = GetIHDRNative(pngPtr, infoPtr, width, (uint*)pheight, (int*)pbitDepth, colorType, interlaceMethod, (int*)pcompressionMethod, (int*)pfilterMethod);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetIHDR(PngStruct* pngPtr, PngInfo* infoPtr, ref uint width, ref uint height, ref int bitDepth, int* colorType, int* interlaceMethod, ref int compressionMethod, ref int filterMethod)
		{
			fixed (uint* pwidth = &width)
			{
				fixed (uint* pheight = &height)
				{
					fixed (int* pbitDepth = &bitDepth)
					{
						fixed (int* pcompressionMethod = &compressionMethod)
						{
							fixed (int* pfilterMethod = &filterMethod)
							{
								uint ret = GetIHDRNative(pngPtr, infoPtr, (uint*)pwidth, (uint*)pheight, (int*)pbitDepth, colorType, interlaceMethod, (int*)pcompressionMethod, (int*)pfilterMethod);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetIHDR(PngStruct* pngPtr, PngInfo* infoPtr, uint* width, uint* height, int* bitDepth, ref int colorType, int* interlaceMethod, ref int compressionMethod, ref int filterMethod)
		{
			fixed (int* pcolorType = &colorType)
			{
				fixed (int* pcompressionMethod = &compressionMethod)
				{
					fixed (int* pfilterMethod = &filterMethod)
					{
						uint ret = GetIHDRNative(pngPtr, infoPtr, width, height, bitDepth, (int*)pcolorType, interlaceMethod, (int*)pcompressionMethod, (int*)pfilterMethod);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetIHDR(PngStruct* pngPtr, PngInfo* infoPtr, ref uint width, uint* height, int* bitDepth, ref int colorType, int* interlaceMethod, ref int compressionMethod, ref int filterMethod)
		{
			fixed (uint* pwidth = &width)
			{
				fixed (int* pcolorType = &colorType)
				{
					fixed (int* pcompressionMethod = &compressionMethod)
					{
						fixed (int* pfilterMethod = &filterMethod)
						{
							uint ret = GetIHDRNative(pngPtr, infoPtr, (uint*)pwidth, height, bitDepth, (int*)pcolorType, interlaceMethod, (int*)pcompressionMethod, (int*)pfilterMethod);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetIHDR(PngStruct* pngPtr, PngInfo* infoPtr, uint* width, ref uint height, int* bitDepth, ref int colorType, int* interlaceMethod, ref int compressionMethod, ref int filterMethod)
		{
			fixed (uint* pheight = &height)
			{
				fixed (int* pcolorType = &colorType)
				{
					fixed (int* pcompressionMethod = &compressionMethod)
					{
						fixed (int* pfilterMethod = &filterMethod)
						{
							uint ret = GetIHDRNative(pngPtr, infoPtr, width, (uint*)pheight, bitDepth, (int*)pcolorType, interlaceMethod, (int*)pcompressionMethod, (int*)pfilterMethod);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetIHDR(PngStruct* pngPtr, PngInfo* infoPtr, ref uint width, ref uint height, int* bitDepth, ref int colorType, int* interlaceMethod, ref int compressionMethod, ref int filterMethod)
		{
			fixed (uint* pwidth = &width)
			{
				fixed (uint* pheight = &height)
				{
					fixed (int* pcolorType = &colorType)
					{
						fixed (int* pcompressionMethod = &compressionMethod)
						{
							fixed (int* pfilterMethod = &filterMethod)
							{
								uint ret = GetIHDRNative(pngPtr, infoPtr, (uint*)pwidth, (uint*)pheight, bitDepth, (int*)pcolorType, interlaceMethod, (int*)pcompressionMethod, (int*)pfilterMethod);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetIHDR(PngStruct* pngPtr, PngInfo* infoPtr, uint* width, uint* height, ref int bitDepth, ref int colorType, int* interlaceMethod, ref int compressionMethod, ref int filterMethod)
		{
			fixed (int* pbitDepth = &bitDepth)
			{
				fixed (int* pcolorType = &colorType)
				{
					fixed (int* pcompressionMethod = &compressionMethod)
					{
						fixed (int* pfilterMethod = &filterMethod)
						{
							uint ret = GetIHDRNative(pngPtr, infoPtr, width, height, (int*)pbitDepth, (int*)pcolorType, interlaceMethod, (int*)pcompressionMethod, (int*)pfilterMethod);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetIHDR(PngStruct* pngPtr, PngInfo* infoPtr, ref uint width, uint* height, ref int bitDepth, ref int colorType, int* interlaceMethod, ref int compressionMethod, ref int filterMethod)
		{
			fixed (uint* pwidth = &width)
			{
				fixed (int* pbitDepth = &bitDepth)
				{
					fixed (int* pcolorType = &colorType)
					{
						fixed (int* pcompressionMethod = &compressionMethod)
						{
							fixed (int* pfilterMethod = &filterMethod)
							{
								uint ret = GetIHDRNative(pngPtr, infoPtr, (uint*)pwidth, height, (int*)pbitDepth, (int*)pcolorType, interlaceMethod, (int*)pcompressionMethod, (int*)pfilterMethod);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetIHDR(PngStruct* pngPtr, PngInfo* infoPtr, uint* width, ref uint height, ref int bitDepth, ref int colorType, int* interlaceMethod, ref int compressionMethod, ref int filterMethod)
		{
			fixed (uint* pheight = &height)
			{
				fixed (int* pbitDepth = &bitDepth)
				{
					fixed (int* pcolorType = &colorType)
					{
						fixed (int* pcompressionMethod = &compressionMethod)
						{
							fixed (int* pfilterMethod = &filterMethod)
							{
								uint ret = GetIHDRNative(pngPtr, infoPtr, width, (uint*)pheight, (int*)pbitDepth, (int*)pcolorType, interlaceMethod, (int*)pcompressionMethod, (int*)pfilterMethod);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetIHDR(PngStruct* pngPtr, PngInfo* infoPtr, ref uint width, ref uint height, ref int bitDepth, ref int colorType, int* interlaceMethod, ref int compressionMethod, ref int filterMethod)
		{
			fixed (uint* pwidth = &width)
			{
				fixed (uint* pheight = &height)
				{
					fixed (int* pbitDepth = &bitDepth)
					{
						fixed (int* pcolorType = &colorType)
						{
							fixed (int* pcompressionMethod = &compressionMethod)
							{
								fixed (int* pfilterMethod = &filterMethod)
								{
									uint ret = GetIHDRNative(pngPtr, infoPtr, (uint*)pwidth, (uint*)pheight, (int*)pbitDepth, (int*)pcolorType, interlaceMethod, (int*)pcompressionMethod, (int*)pfilterMethod);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetIHDR(PngStruct* pngPtr, PngInfo* infoPtr, uint* width, uint* height, int* bitDepth, int* colorType, ref int interlaceMethod, ref int compressionMethod, ref int filterMethod)
		{
			fixed (int* pinterlaceMethod = &interlaceMethod)
			{
				fixed (int* pcompressionMethod = &compressionMethod)
				{
					fixed (int* pfilterMethod = &filterMethod)
					{
						uint ret = GetIHDRNative(pngPtr, infoPtr, width, height, bitDepth, colorType, (int*)pinterlaceMethod, (int*)pcompressionMethod, (int*)pfilterMethod);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetIHDR(PngStruct* pngPtr, PngInfo* infoPtr, ref uint width, uint* height, int* bitDepth, int* colorType, ref int interlaceMethod, ref int compressionMethod, ref int filterMethod)
		{
			fixed (uint* pwidth = &width)
			{
				fixed (int* pinterlaceMethod = &interlaceMethod)
				{
					fixed (int* pcompressionMethod = &compressionMethod)
					{
						fixed (int* pfilterMethod = &filterMethod)
						{
							uint ret = GetIHDRNative(pngPtr, infoPtr, (uint*)pwidth, height, bitDepth, colorType, (int*)pinterlaceMethod, (int*)pcompressionMethod, (int*)pfilterMethod);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetIHDR(PngStruct* pngPtr, PngInfo* infoPtr, uint* width, ref uint height, int* bitDepth, int* colorType, ref int interlaceMethod, ref int compressionMethod, ref int filterMethod)
		{
			fixed (uint* pheight = &height)
			{
				fixed (int* pinterlaceMethod = &interlaceMethod)
				{
					fixed (int* pcompressionMethod = &compressionMethod)
					{
						fixed (int* pfilterMethod = &filterMethod)
						{
							uint ret = GetIHDRNative(pngPtr, infoPtr, width, (uint*)pheight, bitDepth, colorType, (int*)pinterlaceMethod, (int*)pcompressionMethod, (int*)pfilterMethod);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetIHDR(PngStruct* pngPtr, PngInfo* infoPtr, ref uint width, ref uint height, int* bitDepth, int* colorType, ref int interlaceMethod, ref int compressionMethod, ref int filterMethod)
		{
			fixed (uint* pwidth = &width)
			{
				fixed (uint* pheight = &height)
				{
					fixed (int* pinterlaceMethod = &interlaceMethod)
					{
						fixed (int* pcompressionMethod = &compressionMethod)
						{
							fixed (int* pfilterMethod = &filterMethod)
							{
								uint ret = GetIHDRNative(pngPtr, infoPtr, (uint*)pwidth, (uint*)pheight, bitDepth, colorType, (int*)pinterlaceMethod, (int*)pcompressionMethod, (int*)pfilterMethod);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetIHDR(PngStruct* pngPtr, PngInfo* infoPtr, uint* width, uint* height, ref int bitDepth, int* colorType, ref int interlaceMethod, ref int compressionMethod, ref int filterMethod)
		{
			fixed (int* pbitDepth = &bitDepth)
			{
				fixed (int* pinterlaceMethod = &interlaceMethod)
				{
					fixed (int* pcompressionMethod = &compressionMethod)
					{
						fixed (int* pfilterMethod = &filterMethod)
						{
							uint ret = GetIHDRNative(pngPtr, infoPtr, width, height, (int*)pbitDepth, colorType, (int*)pinterlaceMethod, (int*)pcompressionMethod, (int*)pfilterMethod);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetIHDR(PngStruct* pngPtr, PngInfo* infoPtr, ref uint width, uint* height, ref int bitDepth, int* colorType, ref int interlaceMethod, ref int compressionMethod, ref int filterMethod)
		{
			fixed (uint* pwidth = &width)
			{
				fixed (int* pbitDepth = &bitDepth)
				{
					fixed (int* pinterlaceMethod = &interlaceMethod)
					{
						fixed (int* pcompressionMethod = &compressionMethod)
						{
							fixed (int* pfilterMethod = &filterMethod)
							{
								uint ret = GetIHDRNative(pngPtr, infoPtr, (uint*)pwidth, height, (int*)pbitDepth, colorType, (int*)pinterlaceMethod, (int*)pcompressionMethod, (int*)pfilterMethod);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetIHDR(PngStruct* pngPtr, PngInfo* infoPtr, uint* width, ref uint height, ref int bitDepth, int* colorType, ref int interlaceMethod, ref int compressionMethod, ref int filterMethod)
		{
			fixed (uint* pheight = &height)
			{
				fixed (int* pbitDepth = &bitDepth)
				{
					fixed (int* pinterlaceMethod = &interlaceMethod)
					{
						fixed (int* pcompressionMethod = &compressionMethod)
						{
							fixed (int* pfilterMethod = &filterMethod)
							{
								uint ret = GetIHDRNative(pngPtr, infoPtr, width, (uint*)pheight, (int*)pbitDepth, colorType, (int*)pinterlaceMethod, (int*)pcompressionMethod, (int*)pfilterMethod);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetIHDR(PngStruct* pngPtr, PngInfo* infoPtr, ref uint width, ref uint height, ref int bitDepth, int* colorType, ref int interlaceMethod, ref int compressionMethod, ref int filterMethod)
		{
			fixed (uint* pwidth = &width)
			{
				fixed (uint* pheight = &height)
				{
					fixed (int* pbitDepth = &bitDepth)
					{
						fixed (int* pinterlaceMethod = &interlaceMethod)
						{
							fixed (int* pcompressionMethod = &compressionMethod)
							{
								fixed (int* pfilterMethod = &filterMethod)
								{
									uint ret = GetIHDRNative(pngPtr, infoPtr, (uint*)pwidth, (uint*)pheight, (int*)pbitDepth, colorType, (int*)pinterlaceMethod, (int*)pcompressionMethod, (int*)pfilterMethod);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetIHDR(PngStruct* pngPtr, PngInfo* infoPtr, uint* width, uint* height, int* bitDepth, ref int colorType, ref int interlaceMethod, ref int compressionMethod, ref int filterMethod)
		{
			fixed (int* pcolorType = &colorType)
			{
				fixed (int* pinterlaceMethod = &interlaceMethod)
				{
					fixed (int* pcompressionMethod = &compressionMethod)
					{
						fixed (int* pfilterMethod = &filterMethod)
						{
							uint ret = GetIHDRNative(pngPtr, infoPtr, width, height, bitDepth, (int*)pcolorType, (int*)pinterlaceMethod, (int*)pcompressionMethod, (int*)pfilterMethod);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetIHDR(PngStruct* pngPtr, PngInfo* infoPtr, ref uint width, uint* height, int* bitDepth, ref int colorType, ref int interlaceMethod, ref int compressionMethod, ref int filterMethod)
		{
			fixed (uint* pwidth = &width)
			{
				fixed (int* pcolorType = &colorType)
				{
					fixed (int* pinterlaceMethod = &interlaceMethod)
					{
						fixed (int* pcompressionMethod = &compressionMethod)
						{
							fixed (int* pfilterMethod = &filterMethod)
							{
								uint ret = GetIHDRNative(pngPtr, infoPtr, (uint*)pwidth, height, bitDepth, (int*)pcolorType, (int*)pinterlaceMethod, (int*)pcompressionMethod, (int*)pfilterMethod);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetIHDR(PngStruct* pngPtr, PngInfo* infoPtr, uint* width, ref uint height, int* bitDepth, ref int colorType, ref int interlaceMethod, ref int compressionMethod, ref int filterMethod)
		{
			fixed (uint* pheight = &height)
			{
				fixed (int* pcolorType = &colorType)
				{
					fixed (int* pinterlaceMethod = &interlaceMethod)
					{
						fixed (int* pcompressionMethod = &compressionMethod)
						{
							fixed (int* pfilterMethod = &filterMethod)
							{
								uint ret = GetIHDRNative(pngPtr, infoPtr, width, (uint*)pheight, bitDepth, (int*)pcolorType, (int*)pinterlaceMethod, (int*)pcompressionMethod, (int*)pfilterMethod);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetIHDR(PngStruct* pngPtr, PngInfo* infoPtr, ref uint width, ref uint height, int* bitDepth, ref int colorType, ref int interlaceMethod, ref int compressionMethod, ref int filterMethod)
		{
			fixed (uint* pwidth = &width)
			{
				fixed (uint* pheight = &height)
				{
					fixed (int* pcolorType = &colorType)
					{
						fixed (int* pinterlaceMethod = &interlaceMethod)
						{
							fixed (int* pcompressionMethod = &compressionMethod)
							{
								fixed (int* pfilterMethod = &filterMethod)
								{
									uint ret = GetIHDRNative(pngPtr, infoPtr, (uint*)pwidth, (uint*)pheight, bitDepth, (int*)pcolorType, (int*)pinterlaceMethod, (int*)pcompressionMethod, (int*)pfilterMethod);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetIHDR(PngStruct* pngPtr, PngInfo* infoPtr, uint* width, uint* height, ref int bitDepth, ref int colorType, ref int interlaceMethod, ref int compressionMethod, ref int filterMethod)
		{
			fixed (int* pbitDepth = &bitDepth)
			{
				fixed (int* pcolorType = &colorType)
				{
					fixed (int* pinterlaceMethod = &interlaceMethod)
					{
						fixed (int* pcompressionMethod = &compressionMethod)
						{
							fixed (int* pfilterMethod = &filterMethod)
							{
								uint ret = GetIHDRNative(pngPtr, infoPtr, width, height, (int*)pbitDepth, (int*)pcolorType, (int*)pinterlaceMethod, (int*)pcompressionMethod, (int*)pfilterMethod);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetIHDR(PngStruct* pngPtr, PngInfo* infoPtr, ref uint width, uint* height, ref int bitDepth, ref int colorType, ref int interlaceMethod, ref int compressionMethod, ref int filterMethod)
		{
			fixed (uint* pwidth = &width)
			{
				fixed (int* pbitDepth = &bitDepth)
				{
					fixed (int* pcolorType = &colorType)
					{
						fixed (int* pinterlaceMethod = &interlaceMethod)
						{
							fixed (int* pcompressionMethod = &compressionMethod)
							{
								fixed (int* pfilterMethod = &filterMethod)
								{
									uint ret = GetIHDRNative(pngPtr, infoPtr, (uint*)pwidth, height, (int*)pbitDepth, (int*)pcolorType, (int*)pinterlaceMethod, (int*)pcompressionMethod, (int*)pfilterMethod);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetIHDR(PngStruct* pngPtr, PngInfo* infoPtr, uint* width, ref uint height, ref int bitDepth, ref int colorType, ref int interlaceMethod, ref int compressionMethod, ref int filterMethod)
		{
			fixed (uint* pheight = &height)
			{
				fixed (int* pbitDepth = &bitDepth)
				{
					fixed (int* pcolorType = &colorType)
					{
						fixed (int* pinterlaceMethod = &interlaceMethod)
						{
							fixed (int* pcompressionMethod = &compressionMethod)
							{
								fixed (int* pfilterMethod = &filterMethod)
								{
									uint ret = GetIHDRNative(pngPtr, infoPtr, width, (uint*)pheight, (int*)pbitDepth, (int*)pcolorType, (int*)pinterlaceMethod, (int*)pcompressionMethod, (int*)pfilterMethod);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetIHDR(PngStruct* pngPtr, PngInfo* infoPtr, ref uint width, ref uint height, ref int bitDepth, ref int colorType, ref int interlaceMethod, ref int compressionMethod, ref int filterMethod)
		{
			fixed (uint* pwidth = &width)
			{
				fixed (uint* pheight = &height)
				{
					fixed (int* pbitDepth = &bitDepth)
					{
						fixed (int* pcolorType = &colorType)
						{
							fixed (int* pinterlaceMethod = &interlaceMethod)
							{
								fixed (int* pcompressionMethod = &compressionMethod)
								{
									fixed (int* pfilterMethod = &filterMethod)
									{
										uint ret = GetIHDRNative(pngPtr, infoPtr, (uint*)pwidth, (uint*)pheight, (int*)pbitDepth, (int*)pcolorType, (int*)pinterlaceMethod, (int*)pcompressionMethod, (int*)pfilterMethod);
										return ret;
									}
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void SetIHDRNative(PngStruct* pngPtr, PngInfo* infoPtr, uint width, uint height, int bitDepth, int colorType, int interlaceMethod, int compressionMethod, int filterMethod)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<PngStruct*, PngInfo*, uint, uint, int, int, int, int, int, void>)funcTable[174])(pngPtr, infoPtr, width, height, bitDepth, colorType, interlaceMethod, compressionMethod, filterMethod);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, uint, uint, int, int, int, int, int, void>)funcTable[174])((nint)pngPtr, (nint)infoPtr, width, height, bitDepth, colorType, interlaceMethod, compressionMethod, filterMethod);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void SetIHDR(PngStruct* pngPtr, PngInfo* infoPtr, uint width, uint height, int bitDepth, int colorType, int interlaceMethod, int compressionMethod, int filterMethod)
		{
			SetIHDRNative(pngPtr, infoPtr, width, height, bitDepth, colorType, interlaceMethod, compressionMethod, filterMethod);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static uint GetMDCVNative(PngStruct* pngPtr, PngInfo* infoPtr, double* whiteX, double* whiteY, double* redX, double* redY, double* greenX, double* greenY, double* blueX, double* blueY, double* masteringDisplayMaximumLuminance, double* masteringDisplayMinimumLuminance)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<PngStruct*, PngInfo*, double*, double*, double*, double*, double*, double*, double*, double*, double*, double*, uint>)funcTable[175])(pngPtr, infoPtr, whiteX, whiteY, redX, redY, greenX, greenY, blueX, blueY, masteringDisplayMaximumLuminance, masteringDisplayMinimumLuminance);
			#else
			return (uint)((delegate* unmanaged[Cdecl]<nint, nint, nint, nint, nint, nint, nint, nint, nint, nint, nint, nint, uint>)funcTable[175])((nint)pngPtr, (nint)infoPtr, (nint)whiteX, (nint)whiteY, (nint)redX, (nint)redY, (nint)greenX, (nint)greenY, (nint)blueX, (nint)blueY, (nint)masteringDisplayMaximumLuminance, (nint)masteringDisplayMinimumLuminance);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetMDCV(PngStruct* pngPtr, PngInfo* infoPtr, double* whiteX, double* whiteY, double* redX, double* redY, double* greenX, double* greenY, double* blueX, double* blueY, double* masteringDisplayMaximumLuminance, double* masteringDisplayMinimumLuminance)
		{
			uint ret = GetMDCVNative(pngPtr, infoPtr, whiteX, whiteY, redX, redY, greenX, greenY, blueX, blueY, masteringDisplayMaximumLuminance, masteringDisplayMinimumLuminance);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetMDCV(PngStruct* pngPtr, PngInfo* infoPtr, ref double whiteX, double* whiteY, double* redX, double* redY, double* greenX, double* greenY, double* blueX, double* blueY, double* masteringDisplayMaximumLuminance, double* masteringDisplayMinimumLuminance)
		{
			fixed (double* pwhiteX = &whiteX)
			{
				uint ret = GetMDCVNative(pngPtr, infoPtr, (double*)pwhiteX, whiteY, redX, redY, greenX, greenY, blueX, blueY, masteringDisplayMaximumLuminance, masteringDisplayMinimumLuminance);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetMDCV(PngStruct* pngPtr, PngInfo* infoPtr, double* whiteX, ref double whiteY, double* redX, double* redY, double* greenX, double* greenY, double* blueX, double* blueY, double* masteringDisplayMaximumLuminance, double* masteringDisplayMinimumLuminance)
		{
			fixed (double* pwhiteY = &whiteY)
			{
				uint ret = GetMDCVNative(pngPtr, infoPtr, whiteX, (double*)pwhiteY, redX, redY, greenX, greenY, blueX, blueY, masteringDisplayMaximumLuminance, masteringDisplayMinimumLuminance);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetMDCV(PngStruct* pngPtr, PngInfo* infoPtr, ref double whiteX, ref double whiteY, double* redX, double* redY, double* greenX, double* greenY, double* blueX, double* blueY, double* masteringDisplayMaximumLuminance, double* masteringDisplayMinimumLuminance)
		{
			fixed (double* pwhiteX = &whiteX)
			{
				fixed (double* pwhiteY = &whiteY)
				{
					uint ret = GetMDCVNative(pngPtr, infoPtr, (double*)pwhiteX, (double*)pwhiteY, redX, redY, greenX, greenY, blueX, blueY, masteringDisplayMaximumLuminance, masteringDisplayMinimumLuminance);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetMDCV(PngStruct* pngPtr, PngInfo* infoPtr, double* whiteX, double* whiteY, ref double redX, double* redY, double* greenX, double* greenY, double* blueX, double* blueY, double* masteringDisplayMaximumLuminance, double* masteringDisplayMinimumLuminance)
		{
			fixed (double* predX = &redX)
			{
				uint ret = GetMDCVNative(pngPtr, infoPtr, whiteX, whiteY, (double*)predX, redY, greenX, greenY, blueX, blueY, masteringDisplayMaximumLuminance, masteringDisplayMinimumLuminance);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetMDCV(PngStruct* pngPtr, PngInfo* infoPtr, ref double whiteX, double* whiteY, ref double redX, double* redY, double* greenX, double* greenY, double* blueX, double* blueY, double* masteringDisplayMaximumLuminance, double* masteringDisplayMinimumLuminance)
		{
			fixed (double* pwhiteX = &whiteX)
			{
				fixed (double* predX = &redX)
				{
					uint ret = GetMDCVNative(pngPtr, infoPtr, (double*)pwhiteX, whiteY, (double*)predX, redY, greenX, greenY, blueX, blueY, masteringDisplayMaximumLuminance, masteringDisplayMinimumLuminance);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetMDCV(PngStruct* pngPtr, PngInfo* infoPtr, double* whiteX, ref double whiteY, ref double redX, double* redY, double* greenX, double* greenY, double* blueX, double* blueY, double* masteringDisplayMaximumLuminance, double* masteringDisplayMinimumLuminance)
		{
			fixed (double* pwhiteY = &whiteY)
			{
				fixed (double* predX = &redX)
				{
					uint ret = GetMDCVNative(pngPtr, infoPtr, whiteX, (double*)pwhiteY, (double*)predX, redY, greenX, greenY, blueX, blueY, masteringDisplayMaximumLuminance, masteringDisplayMinimumLuminance);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetMDCV(PngStruct* pngPtr, PngInfo* infoPtr, ref double whiteX, ref double whiteY, ref double redX, double* redY, double* greenX, double* greenY, double* blueX, double* blueY, double* masteringDisplayMaximumLuminance, double* masteringDisplayMinimumLuminance)
		{
			fixed (double* pwhiteX = &whiteX)
			{
				fixed (double* pwhiteY = &whiteY)
				{
					fixed (double* predX = &redX)
					{
						uint ret = GetMDCVNative(pngPtr, infoPtr, (double*)pwhiteX, (double*)pwhiteY, (double*)predX, redY, greenX, greenY, blueX, blueY, masteringDisplayMaximumLuminance, masteringDisplayMinimumLuminance);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetMDCV(PngStruct* pngPtr, PngInfo* infoPtr, double* whiteX, double* whiteY, double* redX, ref double redY, double* greenX, double* greenY, double* blueX, double* blueY, double* masteringDisplayMaximumLuminance, double* masteringDisplayMinimumLuminance)
		{
			fixed (double* predY = &redY)
			{
				uint ret = GetMDCVNative(pngPtr, infoPtr, whiteX, whiteY, redX, (double*)predY, greenX, greenY, blueX, blueY, masteringDisplayMaximumLuminance, masteringDisplayMinimumLuminance);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetMDCV(PngStruct* pngPtr, PngInfo* infoPtr, ref double whiteX, double* whiteY, double* redX, ref double redY, double* greenX, double* greenY, double* blueX, double* blueY, double* masteringDisplayMaximumLuminance, double* masteringDisplayMinimumLuminance)
		{
			fixed (double* pwhiteX = &whiteX)
			{
				fixed (double* predY = &redY)
				{
					uint ret = GetMDCVNative(pngPtr, infoPtr, (double*)pwhiteX, whiteY, redX, (double*)predY, greenX, greenY, blueX, blueY, masteringDisplayMaximumLuminance, masteringDisplayMinimumLuminance);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetMDCV(PngStruct* pngPtr, PngInfo* infoPtr, double* whiteX, ref double whiteY, double* redX, ref double redY, double* greenX, double* greenY, double* blueX, double* blueY, double* masteringDisplayMaximumLuminance, double* masteringDisplayMinimumLuminance)
		{
			fixed (double* pwhiteY = &whiteY)
			{
				fixed (double* predY = &redY)
				{
					uint ret = GetMDCVNative(pngPtr, infoPtr, whiteX, (double*)pwhiteY, redX, (double*)predY, greenX, greenY, blueX, blueY, masteringDisplayMaximumLuminance, masteringDisplayMinimumLuminance);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetMDCV(PngStruct* pngPtr, PngInfo* infoPtr, ref double whiteX, ref double whiteY, double* redX, ref double redY, double* greenX, double* greenY, double* blueX, double* blueY, double* masteringDisplayMaximumLuminance, double* masteringDisplayMinimumLuminance)
		{
			fixed (double* pwhiteX = &whiteX)
			{
				fixed (double* pwhiteY = &whiteY)
				{
					fixed (double* predY = &redY)
					{
						uint ret = GetMDCVNative(pngPtr, infoPtr, (double*)pwhiteX, (double*)pwhiteY, redX, (double*)predY, greenX, greenY, blueX, blueY, masteringDisplayMaximumLuminance, masteringDisplayMinimumLuminance);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetMDCV(PngStruct* pngPtr, PngInfo* infoPtr, double* whiteX, double* whiteY, ref double redX, ref double redY, double* greenX, double* greenY, double* blueX, double* blueY, double* masteringDisplayMaximumLuminance, double* masteringDisplayMinimumLuminance)
		{
			fixed (double* predX = &redX)
			{
				fixed (double* predY = &redY)
				{
					uint ret = GetMDCVNative(pngPtr, infoPtr, whiteX, whiteY, (double*)predX, (double*)predY, greenX, greenY, blueX, blueY, masteringDisplayMaximumLuminance, masteringDisplayMinimumLuminance);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetMDCV(PngStruct* pngPtr, PngInfo* infoPtr, ref double whiteX, double* whiteY, ref double redX, ref double redY, double* greenX, double* greenY, double* blueX, double* blueY, double* masteringDisplayMaximumLuminance, double* masteringDisplayMinimumLuminance)
		{
			fixed (double* pwhiteX = &whiteX)
			{
				fixed (double* predX = &redX)
				{
					fixed (double* predY = &redY)
					{
						uint ret = GetMDCVNative(pngPtr, infoPtr, (double*)pwhiteX, whiteY, (double*)predX, (double*)predY, greenX, greenY, blueX, blueY, masteringDisplayMaximumLuminance, masteringDisplayMinimumLuminance);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetMDCV(PngStruct* pngPtr, PngInfo* infoPtr, double* whiteX, ref double whiteY, ref double redX, ref double redY, double* greenX, double* greenY, double* blueX, double* blueY, double* masteringDisplayMaximumLuminance, double* masteringDisplayMinimumLuminance)
		{
			fixed (double* pwhiteY = &whiteY)
			{
				fixed (double* predX = &redX)
				{
					fixed (double* predY = &redY)
					{
						uint ret = GetMDCVNative(pngPtr, infoPtr, whiteX, (double*)pwhiteY, (double*)predX, (double*)predY, greenX, greenY, blueX, blueY, masteringDisplayMaximumLuminance, masteringDisplayMinimumLuminance);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetMDCV(PngStruct* pngPtr, PngInfo* infoPtr, ref double whiteX, ref double whiteY, ref double redX, ref double redY, double* greenX, double* greenY, double* blueX, double* blueY, double* masteringDisplayMaximumLuminance, double* masteringDisplayMinimumLuminance)
		{
			fixed (double* pwhiteX = &whiteX)
			{
				fixed (double* pwhiteY = &whiteY)
				{
					fixed (double* predX = &redX)
					{
						fixed (double* predY = &redY)
						{
							uint ret = GetMDCVNative(pngPtr, infoPtr, (double*)pwhiteX, (double*)pwhiteY, (double*)predX, (double*)predY, greenX, greenY, blueX, blueY, masteringDisplayMaximumLuminance, masteringDisplayMinimumLuminance);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetMDCV(PngStruct* pngPtr, PngInfo* infoPtr, double* whiteX, double* whiteY, double* redX, double* redY, ref double greenX, double* greenY, double* blueX, double* blueY, double* masteringDisplayMaximumLuminance, double* masteringDisplayMinimumLuminance)
		{
			fixed (double* pgreenX = &greenX)
			{
				uint ret = GetMDCVNative(pngPtr, infoPtr, whiteX, whiteY, redX, redY, (double*)pgreenX, greenY, blueX, blueY, masteringDisplayMaximumLuminance, masteringDisplayMinimumLuminance);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetMDCV(PngStruct* pngPtr, PngInfo* infoPtr, ref double whiteX, double* whiteY, double* redX, double* redY, ref double greenX, double* greenY, double* blueX, double* blueY, double* masteringDisplayMaximumLuminance, double* masteringDisplayMinimumLuminance)
		{
			fixed (double* pwhiteX = &whiteX)
			{
				fixed (double* pgreenX = &greenX)
				{
					uint ret = GetMDCVNative(pngPtr, infoPtr, (double*)pwhiteX, whiteY, redX, redY, (double*)pgreenX, greenY, blueX, blueY, masteringDisplayMaximumLuminance, masteringDisplayMinimumLuminance);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetMDCV(PngStruct* pngPtr, PngInfo* infoPtr, double* whiteX, ref double whiteY, double* redX, double* redY, ref double greenX, double* greenY, double* blueX, double* blueY, double* masteringDisplayMaximumLuminance, double* masteringDisplayMinimumLuminance)
		{
			fixed (double* pwhiteY = &whiteY)
			{
				fixed (double* pgreenX = &greenX)
				{
					uint ret = GetMDCVNative(pngPtr, infoPtr, whiteX, (double*)pwhiteY, redX, redY, (double*)pgreenX, greenY, blueX, blueY, masteringDisplayMaximumLuminance, masteringDisplayMinimumLuminance);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetMDCV(PngStruct* pngPtr, PngInfo* infoPtr, ref double whiteX, ref double whiteY, double* redX, double* redY, ref double greenX, double* greenY, double* blueX, double* blueY, double* masteringDisplayMaximumLuminance, double* masteringDisplayMinimumLuminance)
		{
			fixed (double* pwhiteX = &whiteX)
			{
				fixed (double* pwhiteY = &whiteY)
				{
					fixed (double* pgreenX = &greenX)
					{
						uint ret = GetMDCVNative(pngPtr, infoPtr, (double*)pwhiteX, (double*)pwhiteY, redX, redY, (double*)pgreenX, greenY, blueX, blueY, masteringDisplayMaximumLuminance, masteringDisplayMinimumLuminance);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetMDCV(PngStruct* pngPtr, PngInfo* infoPtr, double* whiteX, double* whiteY, ref double redX, double* redY, ref double greenX, double* greenY, double* blueX, double* blueY, double* masteringDisplayMaximumLuminance, double* masteringDisplayMinimumLuminance)
		{
			fixed (double* predX = &redX)
			{
				fixed (double* pgreenX = &greenX)
				{
					uint ret = GetMDCVNative(pngPtr, infoPtr, whiteX, whiteY, (double*)predX, redY, (double*)pgreenX, greenY, blueX, blueY, masteringDisplayMaximumLuminance, masteringDisplayMinimumLuminance);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetMDCV(PngStruct* pngPtr, PngInfo* infoPtr, ref double whiteX, double* whiteY, ref double redX, double* redY, ref double greenX, double* greenY, double* blueX, double* blueY, double* masteringDisplayMaximumLuminance, double* masteringDisplayMinimumLuminance)
		{
			fixed (double* pwhiteX = &whiteX)
			{
				fixed (double* predX = &redX)
				{
					fixed (double* pgreenX = &greenX)
					{
						uint ret = GetMDCVNative(pngPtr, infoPtr, (double*)pwhiteX, whiteY, (double*)predX, redY, (double*)pgreenX, greenY, blueX, blueY, masteringDisplayMaximumLuminance, masteringDisplayMinimumLuminance);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetMDCV(PngStruct* pngPtr, PngInfo* infoPtr, double* whiteX, ref double whiteY, ref double redX, double* redY, ref double greenX, double* greenY, double* blueX, double* blueY, double* masteringDisplayMaximumLuminance, double* masteringDisplayMinimumLuminance)
		{
			fixed (double* pwhiteY = &whiteY)
			{
				fixed (double* predX = &redX)
				{
					fixed (double* pgreenX = &greenX)
					{
						uint ret = GetMDCVNative(pngPtr, infoPtr, whiteX, (double*)pwhiteY, (double*)predX, redY, (double*)pgreenX, greenY, blueX, blueY, masteringDisplayMaximumLuminance, masteringDisplayMinimumLuminance);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetMDCV(PngStruct* pngPtr, PngInfo* infoPtr, ref double whiteX, ref double whiteY, ref double redX, double* redY, ref double greenX, double* greenY, double* blueX, double* blueY, double* masteringDisplayMaximumLuminance, double* masteringDisplayMinimumLuminance)
		{
			fixed (double* pwhiteX = &whiteX)
			{
				fixed (double* pwhiteY = &whiteY)
				{
					fixed (double* predX = &redX)
					{
						fixed (double* pgreenX = &greenX)
						{
							uint ret = GetMDCVNative(pngPtr, infoPtr, (double*)pwhiteX, (double*)pwhiteY, (double*)predX, redY, (double*)pgreenX, greenY, blueX, blueY, masteringDisplayMaximumLuminance, masteringDisplayMinimumLuminance);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetMDCV(PngStruct* pngPtr, PngInfo* infoPtr, double* whiteX, double* whiteY, double* redX, ref double redY, ref double greenX, double* greenY, double* blueX, double* blueY, double* masteringDisplayMaximumLuminance, double* masteringDisplayMinimumLuminance)
		{
			fixed (double* predY = &redY)
			{
				fixed (double* pgreenX = &greenX)
				{
					uint ret = GetMDCVNative(pngPtr, infoPtr, whiteX, whiteY, redX, (double*)predY, (double*)pgreenX, greenY, blueX, blueY, masteringDisplayMaximumLuminance, masteringDisplayMinimumLuminance);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetMDCV(PngStruct* pngPtr, PngInfo* infoPtr, ref double whiteX, double* whiteY, double* redX, ref double redY, ref double greenX, double* greenY, double* blueX, double* blueY, double* masteringDisplayMaximumLuminance, double* masteringDisplayMinimumLuminance)
		{
			fixed (double* pwhiteX = &whiteX)
			{
				fixed (double* predY = &redY)
				{
					fixed (double* pgreenX = &greenX)
					{
						uint ret = GetMDCVNative(pngPtr, infoPtr, (double*)pwhiteX, whiteY, redX, (double*)predY, (double*)pgreenX, greenY, blueX, blueY, masteringDisplayMaximumLuminance, masteringDisplayMinimumLuminance);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetMDCV(PngStruct* pngPtr, PngInfo* infoPtr, double* whiteX, ref double whiteY, double* redX, ref double redY, ref double greenX, double* greenY, double* blueX, double* blueY, double* masteringDisplayMaximumLuminance, double* masteringDisplayMinimumLuminance)
		{
			fixed (double* pwhiteY = &whiteY)
			{
				fixed (double* predY = &redY)
				{
					fixed (double* pgreenX = &greenX)
					{
						uint ret = GetMDCVNative(pngPtr, infoPtr, whiteX, (double*)pwhiteY, redX, (double*)predY, (double*)pgreenX, greenY, blueX, blueY, masteringDisplayMaximumLuminance, masteringDisplayMinimumLuminance);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetMDCV(PngStruct* pngPtr, PngInfo* infoPtr, ref double whiteX, ref double whiteY, double* redX, ref double redY, ref double greenX, double* greenY, double* blueX, double* blueY, double* masteringDisplayMaximumLuminance, double* masteringDisplayMinimumLuminance)
		{
			fixed (double* pwhiteX = &whiteX)
			{
				fixed (double* pwhiteY = &whiteY)
				{
					fixed (double* predY = &redY)
					{
						fixed (double* pgreenX = &greenX)
						{
							uint ret = GetMDCVNative(pngPtr, infoPtr, (double*)pwhiteX, (double*)pwhiteY, redX, (double*)predY, (double*)pgreenX, greenY, blueX, blueY, masteringDisplayMaximumLuminance, masteringDisplayMinimumLuminance);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetMDCV(PngStruct* pngPtr, PngInfo* infoPtr, double* whiteX, double* whiteY, ref double redX, ref double redY, ref double greenX, double* greenY, double* blueX, double* blueY, double* masteringDisplayMaximumLuminance, double* masteringDisplayMinimumLuminance)
		{
			fixed (double* predX = &redX)
			{
				fixed (double* predY = &redY)
				{
					fixed (double* pgreenX = &greenX)
					{
						uint ret = GetMDCVNative(pngPtr, infoPtr, whiteX, whiteY, (double*)predX, (double*)predY, (double*)pgreenX, greenY, blueX, blueY, masteringDisplayMaximumLuminance, masteringDisplayMinimumLuminance);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetMDCV(PngStruct* pngPtr, PngInfo* infoPtr, ref double whiteX, double* whiteY, ref double redX, ref double redY, ref double greenX, double* greenY, double* blueX, double* blueY, double* masteringDisplayMaximumLuminance, double* masteringDisplayMinimumLuminance)
		{
			fixed (double* pwhiteX = &whiteX)
			{
				fixed (double* predX = &redX)
				{
					fixed (double* predY = &redY)
					{
						fixed (double* pgreenX = &greenX)
						{
							uint ret = GetMDCVNative(pngPtr, infoPtr, (double*)pwhiteX, whiteY, (double*)predX, (double*)predY, (double*)pgreenX, greenY, blueX, blueY, masteringDisplayMaximumLuminance, masteringDisplayMinimumLuminance);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetMDCV(PngStruct* pngPtr, PngInfo* infoPtr, double* whiteX, ref double whiteY, ref double redX, ref double redY, ref double greenX, double* greenY, double* blueX, double* blueY, double* masteringDisplayMaximumLuminance, double* masteringDisplayMinimumLuminance)
		{
			fixed (double* pwhiteY = &whiteY)
			{
				fixed (double* predX = &redX)
				{
					fixed (double* predY = &redY)
					{
						fixed (double* pgreenX = &greenX)
						{
							uint ret = GetMDCVNative(pngPtr, infoPtr, whiteX, (double*)pwhiteY, (double*)predX, (double*)predY, (double*)pgreenX, greenY, blueX, blueY, masteringDisplayMaximumLuminance, masteringDisplayMinimumLuminance);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetMDCV(PngStruct* pngPtr, PngInfo* infoPtr, ref double whiteX, ref double whiteY, ref double redX, ref double redY, ref double greenX, double* greenY, double* blueX, double* blueY, double* masteringDisplayMaximumLuminance, double* masteringDisplayMinimumLuminance)
		{
			fixed (double* pwhiteX = &whiteX)
			{
				fixed (double* pwhiteY = &whiteY)
				{
					fixed (double* predX = &redX)
					{
						fixed (double* predY = &redY)
						{
							fixed (double* pgreenX = &greenX)
							{
								uint ret = GetMDCVNative(pngPtr, infoPtr, (double*)pwhiteX, (double*)pwhiteY, (double*)predX, (double*)predY, (double*)pgreenX, greenY, blueX, blueY, masteringDisplayMaximumLuminance, masteringDisplayMinimumLuminance);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetMDCV(PngStruct* pngPtr, PngInfo* infoPtr, double* whiteX, double* whiteY, double* redX, double* redY, double* greenX, ref double greenY, double* blueX, double* blueY, double* masteringDisplayMaximumLuminance, double* masteringDisplayMinimumLuminance)
		{
			fixed (double* pgreenY = &greenY)
			{
				uint ret = GetMDCVNative(pngPtr, infoPtr, whiteX, whiteY, redX, redY, greenX, (double*)pgreenY, blueX, blueY, masteringDisplayMaximumLuminance, masteringDisplayMinimumLuminance);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetMDCV(PngStruct* pngPtr, PngInfo* infoPtr, ref double whiteX, double* whiteY, double* redX, double* redY, double* greenX, ref double greenY, double* blueX, double* blueY, double* masteringDisplayMaximumLuminance, double* masteringDisplayMinimumLuminance)
		{
			fixed (double* pwhiteX = &whiteX)
			{
				fixed (double* pgreenY = &greenY)
				{
					uint ret = GetMDCVNative(pngPtr, infoPtr, (double*)pwhiteX, whiteY, redX, redY, greenX, (double*)pgreenY, blueX, blueY, masteringDisplayMaximumLuminance, masteringDisplayMinimumLuminance);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetMDCV(PngStruct* pngPtr, PngInfo* infoPtr, double* whiteX, ref double whiteY, double* redX, double* redY, double* greenX, ref double greenY, double* blueX, double* blueY, double* masteringDisplayMaximumLuminance, double* masteringDisplayMinimumLuminance)
		{
			fixed (double* pwhiteY = &whiteY)
			{
				fixed (double* pgreenY = &greenY)
				{
					uint ret = GetMDCVNative(pngPtr, infoPtr, whiteX, (double*)pwhiteY, redX, redY, greenX, (double*)pgreenY, blueX, blueY, masteringDisplayMaximumLuminance, masteringDisplayMinimumLuminance);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetMDCV(PngStruct* pngPtr, PngInfo* infoPtr, ref double whiteX, ref double whiteY, double* redX, double* redY, double* greenX, ref double greenY, double* blueX, double* blueY, double* masteringDisplayMaximumLuminance, double* masteringDisplayMinimumLuminance)
		{
			fixed (double* pwhiteX = &whiteX)
			{
				fixed (double* pwhiteY = &whiteY)
				{
					fixed (double* pgreenY = &greenY)
					{
						uint ret = GetMDCVNative(pngPtr, infoPtr, (double*)pwhiteX, (double*)pwhiteY, redX, redY, greenX, (double*)pgreenY, blueX, blueY, masteringDisplayMaximumLuminance, masteringDisplayMinimumLuminance);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetMDCV(PngStruct* pngPtr, PngInfo* infoPtr, double* whiteX, double* whiteY, ref double redX, double* redY, double* greenX, ref double greenY, double* blueX, double* blueY, double* masteringDisplayMaximumLuminance, double* masteringDisplayMinimumLuminance)
		{
			fixed (double* predX = &redX)
			{
				fixed (double* pgreenY = &greenY)
				{
					uint ret = GetMDCVNative(pngPtr, infoPtr, whiteX, whiteY, (double*)predX, redY, greenX, (double*)pgreenY, blueX, blueY, masteringDisplayMaximumLuminance, masteringDisplayMinimumLuminance);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetMDCV(PngStruct* pngPtr, PngInfo* infoPtr, ref double whiteX, double* whiteY, ref double redX, double* redY, double* greenX, ref double greenY, double* blueX, double* blueY, double* masteringDisplayMaximumLuminance, double* masteringDisplayMinimumLuminance)
		{
			fixed (double* pwhiteX = &whiteX)
			{
				fixed (double* predX = &redX)
				{
					fixed (double* pgreenY = &greenY)
					{
						uint ret = GetMDCVNative(pngPtr, infoPtr, (double*)pwhiteX, whiteY, (double*)predX, redY, greenX, (double*)pgreenY, blueX, blueY, masteringDisplayMaximumLuminance, masteringDisplayMinimumLuminance);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetMDCV(PngStruct* pngPtr, PngInfo* infoPtr, double* whiteX, ref double whiteY, ref double redX, double* redY, double* greenX, ref double greenY, double* blueX, double* blueY, double* masteringDisplayMaximumLuminance, double* masteringDisplayMinimumLuminance)
		{
			fixed (double* pwhiteY = &whiteY)
			{
				fixed (double* predX = &redX)
				{
					fixed (double* pgreenY = &greenY)
					{
						uint ret = GetMDCVNative(pngPtr, infoPtr, whiteX, (double*)pwhiteY, (double*)predX, redY, greenX, (double*)pgreenY, blueX, blueY, masteringDisplayMaximumLuminance, masteringDisplayMinimumLuminance);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetMDCV(PngStruct* pngPtr, PngInfo* infoPtr, ref double whiteX, ref double whiteY, ref double redX, double* redY, double* greenX, ref double greenY, double* blueX, double* blueY, double* masteringDisplayMaximumLuminance, double* masteringDisplayMinimumLuminance)
		{
			fixed (double* pwhiteX = &whiteX)
			{
				fixed (double* pwhiteY = &whiteY)
				{
					fixed (double* predX = &redX)
					{
						fixed (double* pgreenY = &greenY)
						{
							uint ret = GetMDCVNative(pngPtr, infoPtr, (double*)pwhiteX, (double*)pwhiteY, (double*)predX, redY, greenX, (double*)pgreenY, blueX, blueY, masteringDisplayMaximumLuminance, masteringDisplayMinimumLuminance);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetMDCV(PngStruct* pngPtr, PngInfo* infoPtr, double* whiteX, double* whiteY, double* redX, ref double redY, double* greenX, ref double greenY, double* blueX, double* blueY, double* masteringDisplayMaximumLuminance, double* masteringDisplayMinimumLuminance)
		{
			fixed (double* predY = &redY)
			{
				fixed (double* pgreenY = &greenY)
				{
					uint ret = GetMDCVNative(pngPtr, infoPtr, whiteX, whiteY, redX, (double*)predY, greenX, (double*)pgreenY, blueX, blueY, masteringDisplayMaximumLuminance, masteringDisplayMinimumLuminance);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetMDCV(PngStruct* pngPtr, PngInfo* infoPtr, ref double whiteX, double* whiteY, double* redX, ref double redY, double* greenX, ref double greenY, double* blueX, double* blueY, double* masteringDisplayMaximumLuminance, double* masteringDisplayMinimumLuminance)
		{
			fixed (double* pwhiteX = &whiteX)
			{
				fixed (double* predY = &redY)
				{
					fixed (double* pgreenY = &greenY)
					{
						uint ret = GetMDCVNative(pngPtr, infoPtr, (double*)pwhiteX, whiteY, redX, (double*)predY, greenX, (double*)pgreenY, blueX, blueY, masteringDisplayMaximumLuminance, masteringDisplayMinimumLuminance);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetMDCV(PngStruct* pngPtr, PngInfo* infoPtr, double* whiteX, ref double whiteY, double* redX, ref double redY, double* greenX, ref double greenY, double* blueX, double* blueY, double* masteringDisplayMaximumLuminance, double* masteringDisplayMinimumLuminance)
		{
			fixed (double* pwhiteY = &whiteY)
			{
				fixed (double* predY = &redY)
				{
					fixed (double* pgreenY = &greenY)
					{
						uint ret = GetMDCVNative(pngPtr, infoPtr, whiteX, (double*)pwhiteY, redX, (double*)predY, greenX, (double*)pgreenY, blueX, blueY, masteringDisplayMaximumLuminance, masteringDisplayMinimumLuminance);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetMDCV(PngStruct* pngPtr, PngInfo* infoPtr, ref double whiteX, ref double whiteY, double* redX, ref double redY, double* greenX, ref double greenY, double* blueX, double* blueY, double* masteringDisplayMaximumLuminance, double* masteringDisplayMinimumLuminance)
		{
			fixed (double* pwhiteX = &whiteX)
			{
				fixed (double* pwhiteY = &whiteY)
				{
					fixed (double* predY = &redY)
					{
						fixed (double* pgreenY = &greenY)
						{
							uint ret = GetMDCVNative(pngPtr, infoPtr, (double*)pwhiteX, (double*)pwhiteY, redX, (double*)predY, greenX, (double*)pgreenY, blueX, blueY, masteringDisplayMaximumLuminance, masteringDisplayMinimumLuminance);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetMDCV(PngStruct* pngPtr, PngInfo* infoPtr, double* whiteX, double* whiteY, ref double redX, ref double redY, double* greenX, ref double greenY, double* blueX, double* blueY, double* masteringDisplayMaximumLuminance, double* masteringDisplayMinimumLuminance)
		{
			fixed (double* predX = &redX)
			{
				fixed (double* predY = &redY)
				{
					fixed (double* pgreenY = &greenY)
					{
						uint ret = GetMDCVNative(pngPtr, infoPtr, whiteX, whiteY, (double*)predX, (double*)predY, greenX, (double*)pgreenY, blueX, blueY, masteringDisplayMaximumLuminance, masteringDisplayMinimumLuminance);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetMDCV(PngStruct* pngPtr, PngInfo* infoPtr, ref double whiteX, double* whiteY, ref double redX, ref double redY, double* greenX, ref double greenY, double* blueX, double* blueY, double* masteringDisplayMaximumLuminance, double* masteringDisplayMinimumLuminance)
		{
			fixed (double* pwhiteX = &whiteX)
			{
				fixed (double* predX = &redX)
				{
					fixed (double* predY = &redY)
					{
						fixed (double* pgreenY = &greenY)
						{
							uint ret = GetMDCVNative(pngPtr, infoPtr, (double*)pwhiteX, whiteY, (double*)predX, (double*)predY, greenX, (double*)pgreenY, blueX, blueY, masteringDisplayMaximumLuminance, masteringDisplayMinimumLuminance);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetMDCV(PngStruct* pngPtr, PngInfo* infoPtr, double* whiteX, ref double whiteY, ref double redX, ref double redY, double* greenX, ref double greenY, double* blueX, double* blueY, double* masteringDisplayMaximumLuminance, double* masteringDisplayMinimumLuminance)
		{
			fixed (double* pwhiteY = &whiteY)
			{
				fixed (double* predX = &redX)
				{
					fixed (double* predY = &redY)
					{
						fixed (double* pgreenY = &greenY)
						{
							uint ret = GetMDCVNative(pngPtr, infoPtr, whiteX, (double*)pwhiteY, (double*)predX, (double*)predY, greenX, (double*)pgreenY, blueX, blueY, masteringDisplayMaximumLuminance, masteringDisplayMinimumLuminance);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetMDCV(PngStruct* pngPtr, PngInfo* infoPtr, ref double whiteX, ref double whiteY, ref double redX, ref double redY, double* greenX, ref double greenY, double* blueX, double* blueY, double* masteringDisplayMaximumLuminance, double* masteringDisplayMinimumLuminance)
		{
			fixed (double* pwhiteX = &whiteX)
			{
				fixed (double* pwhiteY = &whiteY)
				{
					fixed (double* predX = &redX)
					{
						fixed (double* predY = &redY)
						{
							fixed (double* pgreenY = &greenY)
							{
								uint ret = GetMDCVNative(pngPtr, infoPtr, (double*)pwhiteX, (double*)pwhiteY, (double*)predX, (double*)predY, greenX, (double*)pgreenY, blueX, blueY, masteringDisplayMaximumLuminance, masteringDisplayMinimumLuminance);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetMDCV(PngStruct* pngPtr, PngInfo* infoPtr, double* whiteX, double* whiteY, double* redX, double* redY, ref double greenX, ref double greenY, double* blueX, double* blueY, double* masteringDisplayMaximumLuminance, double* masteringDisplayMinimumLuminance)
		{
			fixed (double* pgreenX = &greenX)
			{
				fixed (double* pgreenY = &greenY)
				{
					uint ret = GetMDCVNative(pngPtr, infoPtr, whiteX, whiteY, redX, redY, (double*)pgreenX, (double*)pgreenY, blueX, blueY, masteringDisplayMaximumLuminance, masteringDisplayMinimumLuminance);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetMDCV(PngStruct* pngPtr, PngInfo* infoPtr, ref double whiteX, double* whiteY, double* redX, double* redY, ref double greenX, ref double greenY, double* blueX, double* blueY, double* masteringDisplayMaximumLuminance, double* masteringDisplayMinimumLuminance)
		{
			fixed (double* pwhiteX = &whiteX)
			{
				fixed (double* pgreenX = &greenX)
				{
					fixed (double* pgreenY = &greenY)
					{
						uint ret = GetMDCVNative(pngPtr, infoPtr, (double*)pwhiteX, whiteY, redX, redY, (double*)pgreenX, (double*)pgreenY, blueX, blueY, masteringDisplayMaximumLuminance, masteringDisplayMinimumLuminance);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetMDCV(PngStruct* pngPtr, PngInfo* infoPtr, double* whiteX, ref double whiteY, double* redX, double* redY, ref double greenX, ref double greenY, double* blueX, double* blueY, double* masteringDisplayMaximumLuminance, double* masteringDisplayMinimumLuminance)
		{
			fixed (double* pwhiteY = &whiteY)
			{
				fixed (double* pgreenX = &greenX)
				{
					fixed (double* pgreenY = &greenY)
					{
						uint ret = GetMDCVNative(pngPtr, infoPtr, whiteX, (double*)pwhiteY, redX, redY, (double*)pgreenX, (double*)pgreenY, blueX, blueY, masteringDisplayMaximumLuminance, masteringDisplayMinimumLuminance);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetMDCV(PngStruct* pngPtr, PngInfo* infoPtr, ref double whiteX, ref double whiteY, double* redX, double* redY, ref double greenX, ref double greenY, double* blueX, double* blueY, double* masteringDisplayMaximumLuminance, double* masteringDisplayMinimumLuminance)
		{
			fixed (double* pwhiteX = &whiteX)
			{
				fixed (double* pwhiteY = &whiteY)
				{
					fixed (double* pgreenX = &greenX)
					{
						fixed (double* pgreenY = &greenY)
						{
							uint ret = GetMDCVNative(pngPtr, infoPtr, (double*)pwhiteX, (double*)pwhiteY, redX, redY, (double*)pgreenX, (double*)pgreenY, blueX, blueY, masteringDisplayMaximumLuminance, masteringDisplayMinimumLuminance);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetMDCV(PngStruct* pngPtr, PngInfo* infoPtr, double* whiteX, double* whiteY, ref double redX, double* redY, ref double greenX, ref double greenY, double* blueX, double* blueY, double* masteringDisplayMaximumLuminance, double* masteringDisplayMinimumLuminance)
		{
			fixed (double* predX = &redX)
			{
				fixed (double* pgreenX = &greenX)
				{
					fixed (double* pgreenY = &greenY)
					{
						uint ret = GetMDCVNative(pngPtr, infoPtr, whiteX, whiteY, (double*)predX, redY, (double*)pgreenX, (double*)pgreenY, blueX, blueY, masteringDisplayMaximumLuminance, masteringDisplayMinimumLuminance);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetMDCV(PngStruct* pngPtr, PngInfo* infoPtr, ref double whiteX, double* whiteY, ref double redX, double* redY, ref double greenX, ref double greenY, double* blueX, double* blueY, double* masteringDisplayMaximumLuminance, double* masteringDisplayMinimumLuminance)
		{
			fixed (double* pwhiteX = &whiteX)
			{
				fixed (double* predX = &redX)
				{
					fixed (double* pgreenX = &greenX)
					{
						fixed (double* pgreenY = &greenY)
						{
							uint ret = GetMDCVNative(pngPtr, infoPtr, (double*)pwhiteX, whiteY, (double*)predX, redY, (double*)pgreenX, (double*)pgreenY, blueX, blueY, masteringDisplayMaximumLuminance, masteringDisplayMinimumLuminance);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetMDCV(PngStruct* pngPtr, PngInfo* infoPtr, double* whiteX, ref double whiteY, ref double redX, double* redY, ref double greenX, ref double greenY, double* blueX, double* blueY, double* masteringDisplayMaximumLuminance, double* masteringDisplayMinimumLuminance)
		{
			fixed (double* pwhiteY = &whiteY)
			{
				fixed (double* predX = &redX)
				{
					fixed (double* pgreenX = &greenX)
					{
						fixed (double* pgreenY = &greenY)
						{
							uint ret = GetMDCVNative(pngPtr, infoPtr, whiteX, (double*)pwhiteY, (double*)predX, redY, (double*)pgreenX, (double*)pgreenY, blueX, blueY, masteringDisplayMaximumLuminance, masteringDisplayMinimumLuminance);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetMDCV(PngStruct* pngPtr, PngInfo* infoPtr, ref double whiteX, ref double whiteY, ref double redX, double* redY, ref double greenX, ref double greenY, double* blueX, double* blueY, double* masteringDisplayMaximumLuminance, double* masteringDisplayMinimumLuminance)
		{
			fixed (double* pwhiteX = &whiteX)
			{
				fixed (double* pwhiteY = &whiteY)
				{
					fixed (double* predX = &redX)
					{
						fixed (double* pgreenX = &greenX)
						{
							fixed (double* pgreenY = &greenY)
							{
								uint ret = GetMDCVNative(pngPtr, infoPtr, (double*)pwhiteX, (double*)pwhiteY, (double*)predX, redY, (double*)pgreenX, (double*)pgreenY, blueX, blueY, masteringDisplayMaximumLuminance, masteringDisplayMinimumLuminance);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetMDCV(PngStruct* pngPtr, PngInfo* infoPtr, double* whiteX, double* whiteY, double* redX, ref double redY, ref double greenX, ref double greenY, double* blueX, double* blueY, double* masteringDisplayMaximumLuminance, double* masteringDisplayMinimumLuminance)
		{
			fixed (double* predY = &redY)
			{
				fixed (double* pgreenX = &greenX)
				{
					fixed (double* pgreenY = &greenY)
					{
						uint ret = GetMDCVNative(pngPtr, infoPtr, whiteX, whiteY, redX, (double*)predY, (double*)pgreenX, (double*)pgreenY, blueX, blueY, masteringDisplayMaximumLuminance, masteringDisplayMinimumLuminance);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetMDCV(PngStruct* pngPtr, PngInfo* infoPtr, ref double whiteX, double* whiteY, double* redX, ref double redY, ref double greenX, ref double greenY, double* blueX, double* blueY, double* masteringDisplayMaximumLuminance, double* masteringDisplayMinimumLuminance)
		{
			fixed (double* pwhiteX = &whiteX)
			{
				fixed (double* predY = &redY)
				{
					fixed (double* pgreenX = &greenX)
					{
						fixed (double* pgreenY = &greenY)
						{
							uint ret = GetMDCVNative(pngPtr, infoPtr, (double*)pwhiteX, whiteY, redX, (double*)predY, (double*)pgreenX, (double*)pgreenY, blueX, blueY, masteringDisplayMaximumLuminance, masteringDisplayMinimumLuminance);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetMDCV(PngStruct* pngPtr, PngInfo* infoPtr, double* whiteX, ref double whiteY, double* redX, ref double redY, ref double greenX, ref double greenY, double* blueX, double* blueY, double* masteringDisplayMaximumLuminance, double* masteringDisplayMinimumLuminance)
		{
			fixed (double* pwhiteY = &whiteY)
			{
				fixed (double* predY = &redY)
				{
					fixed (double* pgreenX = &greenX)
					{
						fixed (double* pgreenY = &greenY)
						{
							uint ret = GetMDCVNative(pngPtr, infoPtr, whiteX, (double*)pwhiteY, redX, (double*)predY, (double*)pgreenX, (double*)pgreenY, blueX, blueY, masteringDisplayMaximumLuminance, masteringDisplayMinimumLuminance);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetMDCV(PngStruct* pngPtr, PngInfo* infoPtr, ref double whiteX, ref double whiteY, double* redX, ref double redY, ref double greenX, ref double greenY, double* blueX, double* blueY, double* masteringDisplayMaximumLuminance, double* masteringDisplayMinimumLuminance)
		{
			fixed (double* pwhiteX = &whiteX)
			{
				fixed (double* pwhiteY = &whiteY)
				{
					fixed (double* predY = &redY)
					{
						fixed (double* pgreenX = &greenX)
						{
							fixed (double* pgreenY = &greenY)
							{
								uint ret = GetMDCVNative(pngPtr, infoPtr, (double*)pwhiteX, (double*)pwhiteY, redX, (double*)predY, (double*)pgreenX, (double*)pgreenY, blueX, blueY, masteringDisplayMaximumLuminance, masteringDisplayMinimumLuminance);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetMDCV(PngStruct* pngPtr, PngInfo* infoPtr, double* whiteX, double* whiteY, ref double redX, ref double redY, ref double greenX, ref double greenY, double* blueX, double* blueY, double* masteringDisplayMaximumLuminance, double* masteringDisplayMinimumLuminance)
		{
			fixed (double* predX = &redX)
			{
				fixed (double* predY = &redY)
				{
					fixed (double* pgreenX = &greenX)
					{
						fixed (double* pgreenY = &greenY)
						{
							uint ret = GetMDCVNative(pngPtr, infoPtr, whiteX, whiteY, (double*)predX, (double*)predY, (double*)pgreenX, (double*)pgreenY, blueX, blueY, masteringDisplayMaximumLuminance, masteringDisplayMinimumLuminance);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetMDCV(PngStruct* pngPtr, PngInfo* infoPtr, ref double whiteX, double* whiteY, ref double redX, ref double redY, ref double greenX, ref double greenY, double* blueX, double* blueY, double* masteringDisplayMaximumLuminance, double* masteringDisplayMinimumLuminance)
		{
			fixed (double* pwhiteX = &whiteX)
			{
				fixed (double* predX = &redX)
				{
					fixed (double* predY = &redY)
					{
						fixed (double* pgreenX = &greenX)
						{
							fixed (double* pgreenY = &greenY)
							{
								uint ret = GetMDCVNative(pngPtr, infoPtr, (double*)pwhiteX, whiteY, (double*)predX, (double*)predY, (double*)pgreenX, (double*)pgreenY, blueX, blueY, masteringDisplayMaximumLuminance, masteringDisplayMinimumLuminance);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetMDCV(PngStruct* pngPtr, PngInfo* infoPtr, double* whiteX, ref double whiteY, ref double redX, ref double redY, ref double greenX, ref double greenY, double* blueX, double* blueY, double* masteringDisplayMaximumLuminance, double* masteringDisplayMinimumLuminance)
		{
			fixed (double* pwhiteY = &whiteY)
			{
				fixed (double* predX = &redX)
				{
					fixed (double* predY = &redY)
					{
						fixed (double* pgreenX = &greenX)
						{
							fixed (double* pgreenY = &greenY)
							{
								uint ret = GetMDCVNative(pngPtr, infoPtr, whiteX, (double*)pwhiteY, (double*)predX, (double*)predY, (double*)pgreenX, (double*)pgreenY, blueX, blueY, masteringDisplayMaximumLuminance, masteringDisplayMinimumLuminance);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetMDCV(PngStruct* pngPtr, PngInfo* infoPtr, ref double whiteX, ref double whiteY, ref double redX, ref double redY, ref double greenX, ref double greenY, double* blueX, double* blueY, double* masteringDisplayMaximumLuminance, double* masteringDisplayMinimumLuminance)
		{
			fixed (double* pwhiteX = &whiteX)
			{
				fixed (double* pwhiteY = &whiteY)
				{
					fixed (double* predX = &redX)
					{
						fixed (double* predY = &redY)
						{
							fixed (double* pgreenX = &greenX)
							{
								fixed (double* pgreenY = &greenY)
								{
									uint ret = GetMDCVNative(pngPtr, infoPtr, (double*)pwhiteX, (double*)pwhiteY, (double*)predX, (double*)predY, (double*)pgreenX, (double*)pgreenY, blueX, blueY, masteringDisplayMaximumLuminance, masteringDisplayMinimumLuminance);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetMDCV(PngStruct* pngPtr, PngInfo* infoPtr, double* whiteX, double* whiteY, double* redX, double* redY, double* greenX, double* greenY, ref double blueX, double* blueY, double* masteringDisplayMaximumLuminance, double* masteringDisplayMinimumLuminance)
		{
			fixed (double* pblueX = &blueX)
			{
				uint ret = GetMDCVNative(pngPtr, infoPtr, whiteX, whiteY, redX, redY, greenX, greenY, (double*)pblueX, blueY, masteringDisplayMaximumLuminance, masteringDisplayMinimumLuminance);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetMDCV(PngStruct* pngPtr, PngInfo* infoPtr, ref double whiteX, double* whiteY, double* redX, double* redY, double* greenX, double* greenY, ref double blueX, double* blueY, double* masteringDisplayMaximumLuminance, double* masteringDisplayMinimumLuminance)
		{
			fixed (double* pwhiteX = &whiteX)
			{
				fixed (double* pblueX = &blueX)
				{
					uint ret = GetMDCVNative(pngPtr, infoPtr, (double*)pwhiteX, whiteY, redX, redY, greenX, greenY, (double*)pblueX, blueY, masteringDisplayMaximumLuminance, masteringDisplayMinimumLuminance);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetMDCV(PngStruct* pngPtr, PngInfo* infoPtr, double* whiteX, ref double whiteY, double* redX, double* redY, double* greenX, double* greenY, ref double blueX, double* blueY, double* masteringDisplayMaximumLuminance, double* masteringDisplayMinimumLuminance)
		{
			fixed (double* pwhiteY = &whiteY)
			{
				fixed (double* pblueX = &blueX)
				{
					uint ret = GetMDCVNative(pngPtr, infoPtr, whiteX, (double*)pwhiteY, redX, redY, greenX, greenY, (double*)pblueX, blueY, masteringDisplayMaximumLuminance, masteringDisplayMinimumLuminance);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetMDCV(PngStruct* pngPtr, PngInfo* infoPtr, ref double whiteX, ref double whiteY, double* redX, double* redY, double* greenX, double* greenY, ref double blueX, double* blueY, double* masteringDisplayMaximumLuminance, double* masteringDisplayMinimumLuminance)
		{
			fixed (double* pwhiteX = &whiteX)
			{
				fixed (double* pwhiteY = &whiteY)
				{
					fixed (double* pblueX = &blueX)
					{
						uint ret = GetMDCVNative(pngPtr, infoPtr, (double*)pwhiteX, (double*)pwhiteY, redX, redY, greenX, greenY, (double*)pblueX, blueY, masteringDisplayMaximumLuminance, masteringDisplayMinimumLuminance);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetMDCV(PngStruct* pngPtr, PngInfo* infoPtr, double* whiteX, double* whiteY, ref double redX, double* redY, double* greenX, double* greenY, ref double blueX, double* blueY, double* masteringDisplayMaximumLuminance, double* masteringDisplayMinimumLuminance)
		{
			fixed (double* predX = &redX)
			{
				fixed (double* pblueX = &blueX)
				{
					uint ret = GetMDCVNative(pngPtr, infoPtr, whiteX, whiteY, (double*)predX, redY, greenX, greenY, (double*)pblueX, blueY, masteringDisplayMaximumLuminance, masteringDisplayMinimumLuminance);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetMDCV(PngStruct* pngPtr, PngInfo* infoPtr, ref double whiteX, double* whiteY, ref double redX, double* redY, double* greenX, double* greenY, ref double blueX, double* blueY, double* masteringDisplayMaximumLuminance, double* masteringDisplayMinimumLuminance)
		{
			fixed (double* pwhiteX = &whiteX)
			{
				fixed (double* predX = &redX)
				{
					fixed (double* pblueX = &blueX)
					{
						uint ret = GetMDCVNative(pngPtr, infoPtr, (double*)pwhiteX, whiteY, (double*)predX, redY, greenX, greenY, (double*)pblueX, blueY, masteringDisplayMaximumLuminance, masteringDisplayMinimumLuminance);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetMDCV(PngStruct* pngPtr, PngInfo* infoPtr, double* whiteX, ref double whiteY, ref double redX, double* redY, double* greenX, double* greenY, ref double blueX, double* blueY, double* masteringDisplayMaximumLuminance, double* masteringDisplayMinimumLuminance)
		{
			fixed (double* pwhiteY = &whiteY)
			{
				fixed (double* predX = &redX)
				{
					fixed (double* pblueX = &blueX)
					{
						uint ret = GetMDCVNative(pngPtr, infoPtr, whiteX, (double*)pwhiteY, (double*)predX, redY, greenX, greenY, (double*)pblueX, blueY, masteringDisplayMaximumLuminance, masteringDisplayMinimumLuminance);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetMDCV(PngStruct* pngPtr, PngInfo* infoPtr, ref double whiteX, ref double whiteY, ref double redX, double* redY, double* greenX, double* greenY, ref double blueX, double* blueY, double* masteringDisplayMaximumLuminance, double* masteringDisplayMinimumLuminance)
		{
			fixed (double* pwhiteX = &whiteX)
			{
				fixed (double* pwhiteY = &whiteY)
				{
					fixed (double* predX = &redX)
					{
						fixed (double* pblueX = &blueX)
						{
							uint ret = GetMDCVNative(pngPtr, infoPtr, (double*)pwhiteX, (double*)pwhiteY, (double*)predX, redY, greenX, greenY, (double*)pblueX, blueY, masteringDisplayMaximumLuminance, masteringDisplayMinimumLuminance);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetMDCV(PngStruct* pngPtr, PngInfo* infoPtr, double* whiteX, double* whiteY, double* redX, ref double redY, double* greenX, double* greenY, ref double blueX, double* blueY, double* masteringDisplayMaximumLuminance, double* masteringDisplayMinimumLuminance)
		{
			fixed (double* predY = &redY)
			{
				fixed (double* pblueX = &blueX)
				{
					uint ret = GetMDCVNative(pngPtr, infoPtr, whiteX, whiteY, redX, (double*)predY, greenX, greenY, (double*)pblueX, blueY, masteringDisplayMaximumLuminance, masteringDisplayMinimumLuminance);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetMDCV(PngStruct* pngPtr, PngInfo* infoPtr, ref double whiteX, double* whiteY, double* redX, ref double redY, double* greenX, double* greenY, ref double blueX, double* blueY, double* masteringDisplayMaximumLuminance, double* masteringDisplayMinimumLuminance)
		{
			fixed (double* pwhiteX = &whiteX)
			{
				fixed (double* predY = &redY)
				{
					fixed (double* pblueX = &blueX)
					{
						uint ret = GetMDCVNative(pngPtr, infoPtr, (double*)pwhiteX, whiteY, redX, (double*)predY, greenX, greenY, (double*)pblueX, blueY, masteringDisplayMaximumLuminance, masteringDisplayMinimumLuminance);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetMDCV(PngStruct* pngPtr, PngInfo* infoPtr, double* whiteX, ref double whiteY, double* redX, ref double redY, double* greenX, double* greenY, ref double blueX, double* blueY, double* masteringDisplayMaximumLuminance, double* masteringDisplayMinimumLuminance)
		{
			fixed (double* pwhiteY = &whiteY)
			{
				fixed (double* predY = &redY)
				{
					fixed (double* pblueX = &blueX)
					{
						uint ret = GetMDCVNative(pngPtr, infoPtr, whiteX, (double*)pwhiteY, redX, (double*)predY, greenX, greenY, (double*)pblueX, blueY, masteringDisplayMaximumLuminance, masteringDisplayMinimumLuminance);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetMDCV(PngStruct* pngPtr, PngInfo* infoPtr, ref double whiteX, ref double whiteY, double* redX, ref double redY, double* greenX, double* greenY, ref double blueX, double* blueY, double* masteringDisplayMaximumLuminance, double* masteringDisplayMinimumLuminance)
		{
			fixed (double* pwhiteX = &whiteX)
			{
				fixed (double* pwhiteY = &whiteY)
				{
					fixed (double* predY = &redY)
					{
						fixed (double* pblueX = &blueX)
						{
							uint ret = GetMDCVNative(pngPtr, infoPtr, (double*)pwhiteX, (double*)pwhiteY, redX, (double*)predY, greenX, greenY, (double*)pblueX, blueY, masteringDisplayMaximumLuminance, masteringDisplayMinimumLuminance);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetMDCV(PngStruct* pngPtr, PngInfo* infoPtr, double* whiteX, double* whiteY, ref double redX, ref double redY, double* greenX, double* greenY, ref double blueX, double* blueY, double* masteringDisplayMaximumLuminance, double* masteringDisplayMinimumLuminance)
		{
			fixed (double* predX = &redX)
			{
				fixed (double* predY = &redY)
				{
					fixed (double* pblueX = &blueX)
					{
						uint ret = GetMDCVNative(pngPtr, infoPtr, whiteX, whiteY, (double*)predX, (double*)predY, greenX, greenY, (double*)pblueX, blueY, masteringDisplayMaximumLuminance, masteringDisplayMinimumLuminance);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetMDCV(PngStruct* pngPtr, PngInfo* infoPtr, ref double whiteX, double* whiteY, ref double redX, ref double redY, double* greenX, double* greenY, ref double blueX, double* blueY, double* masteringDisplayMaximumLuminance, double* masteringDisplayMinimumLuminance)
		{
			fixed (double* pwhiteX = &whiteX)
			{
				fixed (double* predX = &redX)
				{
					fixed (double* predY = &redY)
					{
						fixed (double* pblueX = &blueX)
						{
							uint ret = GetMDCVNative(pngPtr, infoPtr, (double*)pwhiteX, whiteY, (double*)predX, (double*)predY, greenX, greenY, (double*)pblueX, blueY, masteringDisplayMaximumLuminance, masteringDisplayMinimumLuminance);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetMDCV(PngStruct* pngPtr, PngInfo* infoPtr, double* whiteX, ref double whiteY, ref double redX, ref double redY, double* greenX, double* greenY, ref double blueX, double* blueY, double* masteringDisplayMaximumLuminance, double* masteringDisplayMinimumLuminance)
		{
			fixed (double* pwhiteY = &whiteY)
			{
				fixed (double* predX = &redX)
				{
					fixed (double* predY = &redY)
					{
						fixed (double* pblueX = &blueX)
						{
							uint ret = GetMDCVNative(pngPtr, infoPtr, whiteX, (double*)pwhiteY, (double*)predX, (double*)predY, greenX, greenY, (double*)pblueX, blueY, masteringDisplayMaximumLuminance, masteringDisplayMinimumLuminance);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetMDCV(PngStruct* pngPtr, PngInfo* infoPtr, ref double whiteX, ref double whiteY, ref double redX, ref double redY, double* greenX, double* greenY, ref double blueX, double* blueY, double* masteringDisplayMaximumLuminance, double* masteringDisplayMinimumLuminance)
		{
			fixed (double* pwhiteX = &whiteX)
			{
				fixed (double* pwhiteY = &whiteY)
				{
					fixed (double* predX = &redX)
					{
						fixed (double* predY = &redY)
						{
							fixed (double* pblueX = &blueX)
							{
								uint ret = GetMDCVNative(pngPtr, infoPtr, (double*)pwhiteX, (double*)pwhiteY, (double*)predX, (double*)predY, greenX, greenY, (double*)pblueX, blueY, masteringDisplayMaximumLuminance, masteringDisplayMinimumLuminance);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetMDCV(PngStruct* pngPtr, PngInfo* infoPtr, double* whiteX, double* whiteY, double* redX, double* redY, ref double greenX, double* greenY, ref double blueX, double* blueY, double* masteringDisplayMaximumLuminance, double* masteringDisplayMinimumLuminance)
		{
			fixed (double* pgreenX = &greenX)
			{
				fixed (double* pblueX = &blueX)
				{
					uint ret = GetMDCVNative(pngPtr, infoPtr, whiteX, whiteY, redX, redY, (double*)pgreenX, greenY, (double*)pblueX, blueY, masteringDisplayMaximumLuminance, masteringDisplayMinimumLuminance);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetMDCV(PngStruct* pngPtr, PngInfo* infoPtr, ref double whiteX, double* whiteY, double* redX, double* redY, ref double greenX, double* greenY, ref double blueX, double* blueY, double* masteringDisplayMaximumLuminance, double* masteringDisplayMinimumLuminance)
		{
			fixed (double* pwhiteX = &whiteX)
			{
				fixed (double* pgreenX = &greenX)
				{
					fixed (double* pblueX = &blueX)
					{
						uint ret = GetMDCVNative(pngPtr, infoPtr, (double*)pwhiteX, whiteY, redX, redY, (double*)pgreenX, greenY, (double*)pblueX, blueY, masteringDisplayMaximumLuminance, masteringDisplayMinimumLuminance);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetMDCV(PngStruct* pngPtr, PngInfo* infoPtr, double* whiteX, ref double whiteY, double* redX, double* redY, ref double greenX, double* greenY, ref double blueX, double* blueY, double* masteringDisplayMaximumLuminance, double* masteringDisplayMinimumLuminance)
		{
			fixed (double* pwhiteY = &whiteY)
			{
				fixed (double* pgreenX = &greenX)
				{
					fixed (double* pblueX = &blueX)
					{
						uint ret = GetMDCVNative(pngPtr, infoPtr, whiteX, (double*)pwhiteY, redX, redY, (double*)pgreenX, greenY, (double*)pblueX, blueY, masteringDisplayMaximumLuminance, masteringDisplayMinimumLuminance);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetMDCV(PngStruct* pngPtr, PngInfo* infoPtr, ref double whiteX, ref double whiteY, double* redX, double* redY, ref double greenX, double* greenY, ref double blueX, double* blueY, double* masteringDisplayMaximumLuminance, double* masteringDisplayMinimumLuminance)
		{
			fixed (double* pwhiteX = &whiteX)
			{
				fixed (double* pwhiteY = &whiteY)
				{
					fixed (double* pgreenX = &greenX)
					{
						fixed (double* pblueX = &blueX)
						{
							uint ret = GetMDCVNative(pngPtr, infoPtr, (double*)pwhiteX, (double*)pwhiteY, redX, redY, (double*)pgreenX, greenY, (double*)pblueX, blueY, masteringDisplayMaximumLuminance, masteringDisplayMinimumLuminance);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetMDCV(PngStruct* pngPtr, PngInfo* infoPtr, double* whiteX, double* whiteY, ref double redX, double* redY, ref double greenX, double* greenY, ref double blueX, double* blueY, double* masteringDisplayMaximumLuminance, double* masteringDisplayMinimumLuminance)
		{
			fixed (double* predX = &redX)
			{
				fixed (double* pgreenX = &greenX)
				{
					fixed (double* pblueX = &blueX)
					{
						uint ret = GetMDCVNative(pngPtr, infoPtr, whiteX, whiteY, (double*)predX, redY, (double*)pgreenX, greenY, (double*)pblueX, blueY, masteringDisplayMaximumLuminance, masteringDisplayMinimumLuminance);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetMDCV(PngStruct* pngPtr, PngInfo* infoPtr, ref double whiteX, double* whiteY, ref double redX, double* redY, ref double greenX, double* greenY, ref double blueX, double* blueY, double* masteringDisplayMaximumLuminance, double* masteringDisplayMinimumLuminance)
		{
			fixed (double* pwhiteX = &whiteX)
			{
				fixed (double* predX = &redX)
				{
					fixed (double* pgreenX = &greenX)
					{
						fixed (double* pblueX = &blueX)
						{
							uint ret = GetMDCVNative(pngPtr, infoPtr, (double*)pwhiteX, whiteY, (double*)predX, redY, (double*)pgreenX, greenY, (double*)pblueX, blueY, masteringDisplayMaximumLuminance, masteringDisplayMinimumLuminance);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetMDCV(PngStruct* pngPtr, PngInfo* infoPtr, double* whiteX, ref double whiteY, ref double redX, double* redY, ref double greenX, double* greenY, ref double blueX, double* blueY, double* masteringDisplayMaximumLuminance, double* masteringDisplayMinimumLuminance)
		{
			fixed (double* pwhiteY = &whiteY)
			{
				fixed (double* predX = &redX)
				{
					fixed (double* pgreenX = &greenX)
					{
						fixed (double* pblueX = &blueX)
						{
							uint ret = GetMDCVNative(pngPtr, infoPtr, whiteX, (double*)pwhiteY, (double*)predX, redY, (double*)pgreenX, greenY, (double*)pblueX, blueY, masteringDisplayMaximumLuminance, masteringDisplayMinimumLuminance);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetMDCV(PngStruct* pngPtr, PngInfo* infoPtr, ref double whiteX, ref double whiteY, ref double redX, double* redY, ref double greenX, double* greenY, ref double blueX, double* blueY, double* masteringDisplayMaximumLuminance, double* masteringDisplayMinimumLuminance)
		{
			fixed (double* pwhiteX = &whiteX)
			{
				fixed (double* pwhiteY = &whiteY)
				{
					fixed (double* predX = &redX)
					{
						fixed (double* pgreenX = &greenX)
						{
							fixed (double* pblueX = &blueX)
							{
								uint ret = GetMDCVNative(pngPtr, infoPtr, (double*)pwhiteX, (double*)pwhiteY, (double*)predX, redY, (double*)pgreenX, greenY, (double*)pblueX, blueY, masteringDisplayMaximumLuminance, masteringDisplayMinimumLuminance);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetMDCV(PngStruct* pngPtr, PngInfo* infoPtr, double* whiteX, double* whiteY, double* redX, ref double redY, ref double greenX, double* greenY, ref double blueX, double* blueY, double* masteringDisplayMaximumLuminance, double* masteringDisplayMinimumLuminance)
		{
			fixed (double* predY = &redY)
			{
				fixed (double* pgreenX = &greenX)
				{
					fixed (double* pblueX = &blueX)
					{
						uint ret = GetMDCVNative(pngPtr, infoPtr, whiteX, whiteY, redX, (double*)predY, (double*)pgreenX, greenY, (double*)pblueX, blueY, masteringDisplayMaximumLuminance, masteringDisplayMinimumLuminance);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetMDCV(PngStruct* pngPtr, PngInfo* infoPtr, ref double whiteX, double* whiteY, double* redX, ref double redY, ref double greenX, double* greenY, ref double blueX, double* blueY, double* masteringDisplayMaximumLuminance, double* masteringDisplayMinimumLuminance)
		{
			fixed (double* pwhiteX = &whiteX)
			{
				fixed (double* predY = &redY)
				{
					fixed (double* pgreenX = &greenX)
					{
						fixed (double* pblueX = &blueX)
						{
							uint ret = GetMDCVNative(pngPtr, infoPtr, (double*)pwhiteX, whiteY, redX, (double*)predY, (double*)pgreenX, greenY, (double*)pblueX, blueY, masteringDisplayMaximumLuminance, masteringDisplayMinimumLuminance);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetMDCV(PngStruct* pngPtr, PngInfo* infoPtr, double* whiteX, ref double whiteY, double* redX, ref double redY, ref double greenX, double* greenY, ref double blueX, double* blueY, double* masteringDisplayMaximumLuminance, double* masteringDisplayMinimumLuminance)
		{
			fixed (double* pwhiteY = &whiteY)
			{
				fixed (double* predY = &redY)
				{
					fixed (double* pgreenX = &greenX)
					{
						fixed (double* pblueX = &blueX)
						{
							uint ret = GetMDCVNative(pngPtr, infoPtr, whiteX, (double*)pwhiteY, redX, (double*)predY, (double*)pgreenX, greenY, (double*)pblueX, blueY, masteringDisplayMaximumLuminance, masteringDisplayMinimumLuminance);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetMDCV(PngStruct* pngPtr, PngInfo* infoPtr, ref double whiteX, ref double whiteY, double* redX, ref double redY, ref double greenX, double* greenY, ref double blueX, double* blueY, double* masteringDisplayMaximumLuminance, double* masteringDisplayMinimumLuminance)
		{
			fixed (double* pwhiteX = &whiteX)
			{
				fixed (double* pwhiteY = &whiteY)
				{
					fixed (double* predY = &redY)
					{
						fixed (double* pgreenX = &greenX)
						{
							fixed (double* pblueX = &blueX)
							{
								uint ret = GetMDCVNative(pngPtr, infoPtr, (double*)pwhiteX, (double*)pwhiteY, redX, (double*)predY, (double*)pgreenX, greenY, (double*)pblueX, blueY, masteringDisplayMaximumLuminance, masteringDisplayMinimumLuminance);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetMDCV(PngStruct* pngPtr, PngInfo* infoPtr, double* whiteX, double* whiteY, ref double redX, ref double redY, ref double greenX, double* greenY, ref double blueX, double* blueY, double* masteringDisplayMaximumLuminance, double* masteringDisplayMinimumLuminance)
		{
			fixed (double* predX = &redX)
			{
				fixed (double* predY = &redY)
				{
					fixed (double* pgreenX = &greenX)
					{
						fixed (double* pblueX = &blueX)
						{
							uint ret = GetMDCVNative(pngPtr, infoPtr, whiteX, whiteY, (double*)predX, (double*)predY, (double*)pgreenX, greenY, (double*)pblueX, blueY, masteringDisplayMaximumLuminance, masteringDisplayMinimumLuminance);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetMDCV(PngStruct* pngPtr, PngInfo* infoPtr, ref double whiteX, double* whiteY, ref double redX, ref double redY, ref double greenX, double* greenY, ref double blueX, double* blueY, double* masteringDisplayMaximumLuminance, double* masteringDisplayMinimumLuminance)
		{
			fixed (double* pwhiteX = &whiteX)
			{
				fixed (double* predX = &redX)
				{
					fixed (double* predY = &redY)
					{
						fixed (double* pgreenX = &greenX)
						{
							fixed (double* pblueX = &blueX)
							{
								uint ret = GetMDCVNative(pngPtr, infoPtr, (double*)pwhiteX, whiteY, (double*)predX, (double*)predY, (double*)pgreenX, greenY, (double*)pblueX, blueY, masteringDisplayMaximumLuminance, masteringDisplayMinimumLuminance);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetMDCV(PngStruct* pngPtr, PngInfo* infoPtr, double* whiteX, ref double whiteY, ref double redX, ref double redY, ref double greenX, double* greenY, ref double blueX, double* blueY, double* masteringDisplayMaximumLuminance, double* masteringDisplayMinimumLuminance)
		{
			fixed (double* pwhiteY = &whiteY)
			{
				fixed (double* predX = &redX)
				{
					fixed (double* predY = &redY)
					{
						fixed (double* pgreenX = &greenX)
						{
							fixed (double* pblueX = &blueX)
							{
								uint ret = GetMDCVNative(pngPtr, infoPtr, whiteX, (double*)pwhiteY, (double*)predX, (double*)predY, (double*)pgreenX, greenY, (double*)pblueX, blueY, masteringDisplayMaximumLuminance, masteringDisplayMinimumLuminance);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetMDCV(PngStruct* pngPtr, PngInfo* infoPtr, ref double whiteX, ref double whiteY, ref double redX, ref double redY, ref double greenX, double* greenY, ref double blueX, double* blueY, double* masteringDisplayMaximumLuminance, double* masteringDisplayMinimumLuminance)
		{
			fixed (double* pwhiteX = &whiteX)
			{
				fixed (double* pwhiteY = &whiteY)
				{
					fixed (double* predX = &redX)
					{
						fixed (double* predY = &redY)
						{
							fixed (double* pgreenX = &greenX)
							{
								fixed (double* pblueX = &blueX)
								{
									uint ret = GetMDCVNative(pngPtr, infoPtr, (double*)pwhiteX, (double*)pwhiteY, (double*)predX, (double*)predY, (double*)pgreenX, greenY, (double*)pblueX, blueY, masteringDisplayMaximumLuminance, masteringDisplayMinimumLuminance);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetMDCV(PngStruct* pngPtr, PngInfo* infoPtr, double* whiteX, double* whiteY, double* redX, double* redY, double* greenX, ref double greenY, ref double blueX, double* blueY, double* masteringDisplayMaximumLuminance, double* masteringDisplayMinimumLuminance)
		{
			fixed (double* pgreenY = &greenY)
			{
				fixed (double* pblueX = &blueX)
				{
					uint ret = GetMDCVNative(pngPtr, infoPtr, whiteX, whiteY, redX, redY, greenX, (double*)pgreenY, (double*)pblueX, blueY, masteringDisplayMaximumLuminance, masteringDisplayMinimumLuminance);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetMDCV(PngStruct* pngPtr, PngInfo* infoPtr, ref double whiteX, double* whiteY, double* redX, double* redY, double* greenX, ref double greenY, ref double blueX, double* blueY, double* masteringDisplayMaximumLuminance, double* masteringDisplayMinimumLuminance)
		{
			fixed (double* pwhiteX = &whiteX)
			{
				fixed (double* pgreenY = &greenY)
				{
					fixed (double* pblueX = &blueX)
					{
						uint ret = GetMDCVNative(pngPtr, infoPtr, (double*)pwhiteX, whiteY, redX, redY, greenX, (double*)pgreenY, (double*)pblueX, blueY, masteringDisplayMaximumLuminance, masteringDisplayMinimumLuminance);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetMDCV(PngStruct* pngPtr, PngInfo* infoPtr, double* whiteX, ref double whiteY, double* redX, double* redY, double* greenX, ref double greenY, ref double blueX, double* blueY, double* masteringDisplayMaximumLuminance, double* masteringDisplayMinimumLuminance)
		{
			fixed (double* pwhiteY = &whiteY)
			{
				fixed (double* pgreenY = &greenY)
				{
					fixed (double* pblueX = &blueX)
					{
						uint ret = GetMDCVNative(pngPtr, infoPtr, whiteX, (double*)pwhiteY, redX, redY, greenX, (double*)pgreenY, (double*)pblueX, blueY, masteringDisplayMaximumLuminance, masteringDisplayMinimumLuminance);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetMDCV(PngStruct* pngPtr, PngInfo* infoPtr, ref double whiteX, ref double whiteY, double* redX, double* redY, double* greenX, ref double greenY, ref double blueX, double* blueY, double* masteringDisplayMaximumLuminance, double* masteringDisplayMinimumLuminance)
		{
			fixed (double* pwhiteX = &whiteX)
			{
				fixed (double* pwhiteY = &whiteY)
				{
					fixed (double* pgreenY = &greenY)
					{
						fixed (double* pblueX = &blueX)
						{
							uint ret = GetMDCVNative(pngPtr, infoPtr, (double*)pwhiteX, (double*)pwhiteY, redX, redY, greenX, (double*)pgreenY, (double*)pblueX, blueY, masteringDisplayMaximumLuminance, masteringDisplayMinimumLuminance);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetMDCV(PngStruct* pngPtr, PngInfo* infoPtr, double* whiteX, double* whiteY, ref double redX, double* redY, double* greenX, ref double greenY, ref double blueX, double* blueY, double* masteringDisplayMaximumLuminance, double* masteringDisplayMinimumLuminance)
		{
			fixed (double* predX = &redX)
			{
				fixed (double* pgreenY = &greenY)
				{
					fixed (double* pblueX = &blueX)
					{
						uint ret = GetMDCVNative(pngPtr, infoPtr, whiteX, whiteY, (double*)predX, redY, greenX, (double*)pgreenY, (double*)pblueX, blueY, masteringDisplayMaximumLuminance, masteringDisplayMinimumLuminance);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetMDCV(PngStruct* pngPtr, PngInfo* infoPtr, ref double whiteX, double* whiteY, ref double redX, double* redY, double* greenX, ref double greenY, ref double blueX, double* blueY, double* masteringDisplayMaximumLuminance, double* masteringDisplayMinimumLuminance)
		{
			fixed (double* pwhiteX = &whiteX)
			{
				fixed (double* predX = &redX)
				{
					fixed (double* pgreenY = &greenY)
					{
						fixed (double* pblueX = &blueX)
						{
							uint ret = GetMDCVNative(pngPtr, infoPtr, (double*)pwhiteX, whiteY, (double*)predX, redY, greenX, (double*)pgreenY, (double*)pblueX, blueY, masteringDisplayMaximumLuminance, masteringDisplayMinimumLuminance);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetMDCV(PngStruct* pngPtr, PngInfo* infoPtr, double* whiteX, ref double whiteY, ref double redX, double* redY, double* greenX, ref double greenY, ref double blueX, double* blueY, double* masteringDisplayMaximumLuminance, double* masteringDisplayMinimumLuminance)
		{
			fixed (double* pwhiteY = &whiteY)
			{
				fixed (double* predX = &redX)
				{
					fixed (double* pgreenY = &greenY)
					{
						fixed (double* pblueX = &blueX)
						{
							uint ret = GetMDCVNative(pngPtr, infoPtr, whiteX, (double*)pwhiteY, (double*)predX, redY, greenX, (double*)pgreenY, (double*)pblueX, blueY, masteringDisplayMaximumLuminance, masteringDisplayMinimumLuminance);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetMDCV(PngStruct* pngPtr, PngInfo* infoPtr, ref double whiteX, ref double whiteY, ref double redX, double* redY, double* greenX, ref double greenY, ref double blueX, double* blueY, double* masteringDisplayMaximumLuminance, double* masteringDisplayMinimumLuminance)
		{
			fixed (double* pwhiteX = &whiteX)
			{
				fixed (double* pwhiteY = &whiteY)
				{
					fixed (double* predX = &redX)
					{
						fixed (double* pgreenY = &greenY)
						{
							fixed (double* pblueX = &blueX)
							{
								uint ret = GetMDCVNative(pngPtr, infoPtr, (double*)pwhiteX, (double*)pwhiteY, (double*)predX, redY, greenX, (double*)pgreenY, (double*)pblueX, blueY, masteringDisplayMaximumLuminance, masteringDisplayMinimumLuminance);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetMDCV(PngStruct* pngPtr, PngInfo* infoPtr, double* whiteX, double* whiteY, double* redX, ref double redY, double* greenX, ref double greenY, ref double blueX, double* blueY, double* masteringDisplayMaximumLuminance, double* masteringDisplayMinimumLuminance)
		{
			fixed (double* predY = &redY)
			{
				fixed (double* pgreenY = &greenY)
				{
					fixed (double* pblueX = &blueX)
					{
						uint ret = GetMDCVNative(pngPtr, infoPtr, whiteX, whiteY, redX, (double*)predY, greenX, (double*)pgreenY, (double*)pblueX, blueY, masteringDisplayMaximumLuminance, masteringDisplayMinimumLuminance);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetMDCV(PngStruct* pngPtr, PngInfo* infoPtr, ref double whiteX, double* whiteY, double* redX, ref double redY, double* greenX, ref double greenY, ref double blueX, double* blueY, double* masteringDisplayMaximumLuminance, double* masteringDisplayMinimumLuminance)
		{
			fixed (double* pwhiteX = &whiteX)
			{
				fixed (double* predY = &redY)
				{
					fixed (double* pgreenY = &greenY)
					{
						fixed (double* pblueX = &blueX)
						{
							uint ret = GetMDCVNative(pngPtr, infoPtr, (double*)pwhiteX, whiteY, redX, (double*)predY, greenX, (double*)pgreenY, (double*)pblueX, blueY, masteringDisplayMaximumLuminance, masteringDisplayMinimumLuminance);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetMDCV(PngStruct* pngPtr, PngInfo* infoPtr, double* whiteX, ref double whiteY, double* redX, ref double redY, double* greenX, ref double greenY, ref double blueX, double* blueY, double* masteringDisplayMaximumLuminance, double* masteringDisplayMinimumLuminance)
		{
			fixed (double* pwhiteY = &whiteY)
			{
				fixed (double* predY = &redY)
				{
					fixed (double* pgreenY = &greenY)
					{
						fixed (double* pblueX = &blueX)
						{
							uint ret = GetMDCVNative(pngPtr, infoPtr, whiteX, (double*)pwhiteY, redX, (double*)predY, greenX, (double*)pgreenY, (double*)pblueX, blueY, masteringDisplayMaximumLuminance, masteringDisplayMinimumLuminance);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetMDCV(PngStruct* pngPtr, PngInfo* infoPtr, ref double whiteX, ref double whiteY, double* redX, ref double redY, double* greenX, ref double greenY, ref double blueX, double* blueY, double* masteringDisplayMaximumLuminance, double* masteringDisplayMinimumLuminance)
		{
			fixed (double* pwhiteX = &whiteX)
			{
				fixed (double* pwhiteY = &whiteY)
				{
					fixed (double* predY = &redY)
					{
						fixed (double* pgreenY = &greenY)
						{
							fixed (double* pblueX = &blueX)
							{
								uint ret = GetMDCVNative(pngPtr, infoPtr, (double*)pwhiteX, (double*)pwhiteY, redX, (double*)predY, greenX, (double*)pgreenY, (double*)pblueX, blueY, masteringDisplayMaximumLuminance, masteringDisplayMinimumLuminance);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetMDCV(PngStruct* pngPtr, PngInfo* infoPtr, double* whiteX, double* whiteY, ref double redX, ref double redY, double* greenX, ref double greenY, ref double blueX, double* blueY, double* masteringDisplayMaximumLuminance, double* masteringDisplayMinimumLuminance)
		{
			fixed (double* predX = &redX)
			{
				fixed (double* predY = &redY)
				{
					fixed (double* pgreenY = &greenY)
					{
						fixed (double* pblueX = &blueX)
						{
							uint ret = GetMDCVNative(pngPtr, infoPtr, whiteX, whiteY, (double*)predX, (double*)predY, greenX, (double*)pgreenY, (double*)pblueX, blueY, masteringDisplayMaximumLuminance, masteringDisplayMinimumLuminance);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetMDCV(PngStruct* pngPtr, PngInfo* infoPtr, ref double whiteX, double* whiteY, ref double redX, ref double redY, double* greenX, ref double greenY, ref double blueX, double* blueY, double* masteringDisplayMaximumLuminance, double* masteringDisplayMinimumLuminance)
		{
			fixed (double* pwhiteX = &whiteX)
			{
				fixed (double* predX = &redX)
				{
					fixed (double* predY = &redY)
					{
						fixed (double* pgreenY = &greenY)
						{
							fixed (double* pblueX = &blueX)
							{
								uint ret = GetMDCVNative(pngPtr, infoPtr, (double*)pwhiteX, whiteY, (double*)predX, (double*)predY, greenX, (double*)pgreenY, (double*)pblueX, blueY, masteringDisplayMaximumLuminance, masteringDisplayMinimumLuminance);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetMDCV(PngStruct* pngPtr, PngInfo* infoPtr, double* whiteX, ref double whiteY, ref double redX, ref double redY, double* greenX, ref double greenY, ref double blueX, double* blueY, double* masteringDisplayMaximumLuminance, double* masteringDisplayMinimumLuminance)
		{
			fixed (double* pwhiteY = &whiteY)
			{
				fixed (double* predX = &redX)
				{
					fixed (double* predY = &redY)
					{
						fixed (double* pgreenY = &greenY)
						{
							fixed (double* pblueX = &blueX)
							{
								uint ret = GetMDCVNative(pngPtr, infoPtr, whiteX, (double*)pwhiteY, (double*)predX, (double*)predY, greenX, (double*)pgreenY, (double*)pblueX, blueY, masteringDisplayMaximumLuminance, masteringDisplayMinimumLuminance);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetMDCV(PngStruct* pngPtr, PngInfo* infoPtr, ref double whiteX, ref double whiteY, ref double redX, ref double redY, double* greenX, ref double greenY, ref double blueX, double* blueY, double* masteringDisplayMaximumLuminance, double* masteringDisplayMinimumLuminance)
		{
			fixed (double* pwhiteX = &whiteX)
			{
				fixed (double* pwhiteY = &whiteY)
				{
					fixed (double* predX = &redX)
					{
						fixed (double* predY = &redY)
						{
							fixed (double* pgreenY = &greenY)
							{
								fixed (double* pblueX = &blueX)
								{
									uint ret = GetMDCVNative(pngPtr, infoPtr, (double*)pwhiteX, (double*)pwhiteY, (double*)predX, (double*)predY, greenX, (double*)pgreenY, (double*)pblueX, blueY, masteringDisplayMaximumLuminance, masteringDisplayMinimumLuminance);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetMDCV(PngStruct* pngPtr, PngInfo* infoPtr, double* whiteX, double* whiteY, double* redX, double* redY, ref double greenX, ref double greenY, ref double blueX, double* blueY, double* masteringDisplayMaximumLuminance, double* masteringDisplayMinimumLuminance)
		{
			fixed (double* pgreenX = &greenX)
			{
				fixed (double* pgreenY = &greenY)
				{
					fixed (double* pblueX = &blueX)
					{
						uint ret = GetMDCVNative(pngPtr, infoPtr, whiteX, whiteY, redX, redY, (double*)pgreenX, (double*)pgreenY, (double*)pblueX, blueY, masteringDisplayMaximumLuminance, masteringDisplayMinimumLuminance);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetMDCV(PngStruct* pngPtr, PngInfo* infoPtr, ref double whiteX, double* whiteY, double* redX, double* redY, ref double greenX, ref double greenY, ref double blueX, double* blueY, double* masteringDisplayMaximumLuminance, double* masteringDisplayMinimumLuminance)
		{
			fixed (double* pwhiteX = &whiteX)
			{
				fixed (double* pgreenX = &greenX)
				{
					fixed (double* pgreenY = &greenY)
					{
						fixed (double* pblueX = &blueX)
						{
							uint ret = GetMDCVNative(pngPtr, infoPtr, (double*)pwhiteX, whiteY, redX, redY, (double*)pgreenX, (double*)pgreenY, (double*)pblueX, blueY, masteringDisplayMaximumLuminance, masteringDisplayMinimumLuminance);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetMDCV(PngStruct* pngPtr, PngInfo* infoPtr, double* whiteX, ref double whiteY, double* redX, double* redY, ref double greenX, ref double greenY, ref double blueX, double* blueY, double* masteringDisplayMaximumLuminance, double* masteringDisplayMinimumLuminance)
		{
			fixed (double* pwhiteY = &whiteY)
			{
				fixed (double* pgreenX = &greenX)
				{
					fixed (double* pgreenY = &greenY)
					{
						fixed (double* pblueX = &blueX)
						{
							uint ret = GetMDCVNative(pngPtr, infoPtr, whiteX, (double*)pwhiteY, redX, redY, (double*)pgreenX, (double*)pgreenY, (double*)pblueX, blueY, masteringDisplayMaximumLuminance, masteringDisplayMinimumLuminance);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetMDCV(PngStruct* pngPtr, PngInfo* infoPtr, ref double whiteX, ref double whiteY, double* redX, double* redY, ref double greenX, ref double greenY, ref double blueX, double* blueY, double* masteringDisplayMaximumLuminance, double* masteringDisplayMinimumLuminance)
		{
			fixed (double* pwhiteX = &whiteX)
			{
				fixed (double* pwhiteY = &whiteY)
				{
					fixed (double* pgreenX = &greenX)
					{
						fixed (double* pgreenY = &greenY)
						{
							fixed (double* pblueX = &blueX)
							{
								uint ret = GetMDCVNative(pngPtr, infoPtr, (double*)pwhiteX, (double*)pwhiteY, redX, redY, (double*)pgreenX, (double*)pgreenY, (double*)pblueX, blueY, masteringDisplayMaximumLuminance, masteringDisplayMinimumLuminance);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetMDCV(PngStruct* pngPtr, PngInfo* infoPtr, double* whiteX, double* whiteY, ref double redX, double* redY, ref double greenX, ref double greenY, ref double blueX, double* blueY, double* masteringDisplayMaximumLuminance, double* masteringDisplayMinimumLuminance)
		{
			fixed (double* predX = &redX)
			{
				fixed (double* pgreenX = &greenX)
				{
					fixed (double* pgreenY = &greenY)
					{
						fixed (double* pblueX = &blueX)
						{
							uint ret = GetMDCVNative(pngPtr, infoPtr, whiteX, whiteY, (double*)predX, redY, (double*)pgreenX, (double*)pgreenY, (double*)pblueX, blueY, masteringDisplayMaximumLuminance, masteringDisplayMinimumLuminance);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetMDCV(PngStruct* pngPtr, PngInfo* infoPtr, ref double whiteX, double* whiteY, ref double redX, double* redY, ref double greenX, ref double greenY, ref double blueX, double* blueY, double* masteringDisplayMaximumLuminance, double* masteringDisplayMinimumLuminance)
		{
			fixed (double* pwhiteX = &whiteX)
			{
				fixed (double* predX = &redX)
				{
					fixed (double* pgreenX = &greenX)
					{
						fixed (double* pgreenY = &greenY)
						{
							fixed (double* pblueX = &blueX)
							{
								uint ret = GetMDCVNative(pngPtr, infoPtr, (double*)pwhiteX, whiteY, (double*)predX, redY, (double*)pgreenX, (double*)pgreenY, (double*)pblueX, blueY, masteringDisplayMaximumLuminance, masteringDisplayMinimumLuminance);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetMDCV(PngStruct* pngPtr, PngInfo* infoPtr, double* whiteX, ref double whiteY, ref double redX, double* redY, ref double greenX, ref double greenY, ref double blueX, double* blueY, double* masteringDisplayMaximumLuminance, double* masteringDisplayMinimumLuminance)
		{
			fixed (double* pwhiteY = &whiteY)
			{
				fixed (double* predX = &redX)
				{
					fixed (double* pgreenX = &greenX)
					{
						fixed (double* pgreenY = &greenY)
						{
							fixed (double* pblueX = &blueX)
							{
								uint ret = GetMDCVNative(pngPtr, infoPtr, whiteX, (double*)pwhiteY, (double*)predX, redY, (double*)pgreenX, (double*)pgreenY, (double*)pblueX, blueY, masteringDisplayMaximumLuminance, masteringDisplayMinimumLuminance);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetMDCV(PngStruct* pngPtr, PngInfo* infoPtr, ref double whiteX, ref double whiteY, ref double redX, double* redY, ref double greenX, ref double greenY, ref double blueX, double* blueY, double* masteringDisplayMaximumLuminance, double* masteringDisplayMinimumLuminance)
		{
			fixed (double* pwhiteX = &whiteX)
			{
				fixed (double* pwhiteY = &whiteY)
				{
					fixed (double* predX = &redX)
					{
						fixed (double* pgreenX = &greenX)
						{
							fixed (double* pgreenY = &greenY)
							{
								fixed (double* pblueX = &blueX)
								{
									uint ret = GetMDCVNative(pngPtr, infoPtr, (double*)pwhiteX, (double*)pwhiteY, (double*)predX, redY, (double*)pgreenX, (double*)pgreenY, (double*)pblueX, blueY, masteringDisplayMaximumLuminance, masteringDisplayMinimumLuminance);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetMDCV(PngStruct* pngPtr, PngInfo* infoPtr, double* whiteX, double* whiteY, double* redX, ref double redY, ref double greenX, ref double greenY, ref double blueX, double* blueY, double* masteringDisplayMaximumLuminance, double* masteringDisplayMinimumLuminance)
		{
			fixed (double* predY = &redY)
			{
				fixed (double* pgreenX = &greenX)
				{
					fixed (double* pgreenY = &greenY)
					{
						fixed (double* pblueX = &blueX)
						{
							uint ret = GetMDCVNative(pngPtr, infoPtr, whiteX, whiteY, redX, (double*)predY, (double*)pgreenX, (double*)pgreenY, (double*)pblueX, blueY, masteringDisplayMaximumLuminance, masteringDisplayMinimumLuminance);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetMDCV(PngStruct* pngPtr, PngInfo* infoPtr, ref double whiteX, double* whiteY, double* redX, ref double redY, ref double greenX, ref double greenY, ref double blueX, double* blueY, double* masteringDisplayMaximumLuminance, double* masteringDisplayMinimumLuminance)
		{
			fixed (double* pwhiteX = &whiteX)
			{
				fixed (double* predY = &redY)
				{
					fixed (double* pgreenX = &greenX)
					{
						fixed (double* pgreenY = &greenY)
						{
							fixed (double* pblueX = &blueX)
							{
								uint ret = GetMDCVNative(pngPtr, infoPtr, (double*)pwhiteX, whiteY, redX, (double*)predY, (double*)pgreenX, (double*)pgreenY, (double*)pblueX, blueY, masteringDisplayMaximumLuminance, masteringDisplayMinimumLuminance);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetMDCV(PngStruct* pngPtr, PngInfo* infoPtr, double* whiteX, ref double whiteY, double* redX, ref double redY, ref double greenX, ref double greenY, ref double blueX, double* blueY, double* masteringDisplayMaximumLuminance, double* masteringDisplayMinimumLuminance)
		{
			fixed (double* pwhiteY = &whiteY)
			{
				fixed (double* predY = &redY)
				{
					fixed (double* pgreenX = &greenX)
					{
						fixed (double* pgreenY = &greenY)
						{
							fixed (double* pblueX = &blueX)
							{
								uint ret = GetMDCVNative(pngPtr, infoPtr, whiteX, (double*)pwhiteY, redX, (double*)predY, (double*)pgreenX, (double*)pgreenY, (double*)pblueX, blueY, masteringDisplayMaximumLuminance, masteringDisplayMinimumLuminance);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetMDCV(PngStruct* pngPtr, PngInfo* infoPtr, ref double whiteX, ref double whiteY, double* redX, ref double redY, ref double greenX, ref double greenY, ref double blueX, double* blueY, double* masteringDisplayMaximumLuminance, double* masteringDisplayMinimumLuminance)
		{
			fixed (double* pwhiteX = &whiteX)
			{
				fixed (double* pwhiteY = &whiteY)
				{
					fixed (double* predY = &redY)
					{
						fixed (double* pgreenX = &greenX)
						{
							fixed (double* pgreenY = &greenY)
							{
								fixed (double* pblueX = &blueX)
								{
									uint ret = GetMDCVNative(pngPtr, infoPtr, (double*)pwhiteX, (double*)pwhiteY, redX, (double*)predY, (double*)pgreenX, (double*)pgreenY, (double*)pblueX, blueY, masteringDisplayMaximumLuminance, masteringDisplayMinimumLuminance);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetMDCV(PngStruct* pngPtr, PngInfo* infoPtr, double* whiteX, double* whiteY, ref double redX, ref double redY, ref double greenX, ref double greenY, ref double blueX, double* blueY, double* masteringDisplayMaximumLuminance, double* masteringDisplayMinimumLuminance)
		{
			fixed (double* predX = &redX)
			{
				fixed (double* predY = &redY)
				{
					fixed (double* pgreenX = &greenX)
					{
						fixed (double* pgreenY = &greenY)
						{
							fixed (double* pblueX = &blueX)
							{
								uint ret = GetMDCVNative(pngPtr, infoPtr, whiteX, whiteY, (double*)predX, (double*)predY, (double*)pgreenX, (double*)pgreenY, (double*)pblueX, blueY, masteringDisplayMaximumLuminance, masteringDisplayMinimumLuminance);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetMDCV(PngStruct* pngPtr, PngInfo* infoPtr, ref double whiteX, double* whiteY, ref double redX, ref double redY, ref double greenX, ref double greenY, ref double blueX, double* blueY, double* masteringDisplayMaximumLuminance, double* masteringDisplayMinimumLuminance)
		{
			fixed (double* pwhiteX = &whiteX)
			{
				fixed (double* predX = &redX)
				{
					fixed (double* predY = &redY)
					{
						fixed (double* pgreenX = &greenX)
						{
							fixed (double* pgreenY = &greenY)
							{
								fixed (double* pblueX = &blueX)
								{
									uint ret = GetMDCVNative(pngPtr, infoPtr, (double*)pwhiteX, whiteY, (double*)predX, (double*)predY, (double*)pgreenX, (double*)pgreenY, (double*)pblueX, blueY, masteringDisplayMaximumLuminance, masteringDisplayMinimumLuminance);
									return ret;
								}
							}
						}
					}
				}
			}
		}
	}
}
