name: Build libpng Libraries

on: [workflow_dispatch]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            arch: x86_64
            cmake-arch: x64
            vcpkg-triplet: x64-linux
          - os: linux
            arch: arm64
            cmake-arch: aarch64
            runner-label: self-hosted
            vcpkg-triplet: arm64-linux
          - os: windows-latest
            arch: x86_64
            cmake-arch: x64
            vcpkg-triplet: x64-windows-static
          - os: windows-latest
            arch: x86
            cmake-arch: win32
            vcpkg-triplet: x86-windows-static
          - os: windows-latest
            arch: arm64
            cmake-arch: arm64
            vcpkg-triplet: arm64-windows-static
          - os: macos-latest
            arch: x86_64
            cmake-arch: x86_64
            vcpkg-triplet: x64-osx
          - os: macos-latest
            arch: arm64
            cmake-arch: arm64
            vcpkg-triplet: arm64-osx

    steps:
      - uses: actions/checkout@v4.1.7
        with:
          repository: "pnggroup/libpng"
          path: "libpng"
          ref: "v1.6.47"
          submodules: true

      - name: Install Dependencies on Ubuntu
        if: matrix.os == 'linux' || matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake curl zip unzip tar ninja-build

      - name: Install vcpkg on Linux and macOS
        if: runner.os != 'Windows'
        run: |
          cd libpng 
          git clone https://github.com/microsoft/vcpkg.git
          ./vcpkg/bootstrap-vcpkg.sh
          ./vcpkg/vcpkg install zlib --triplet ${{ matrix.vcpkg-triplet }}
    
      - name: Install vcpkg on Windows
        if: runner.os == 'Windows'
        run: |
          cd libpng 
          git clone https://github.com/microsoft/vcpkg.git
          ./vcpkg/bootstrap-vcpkg.bat
          ./vcpkg/vcpkg.exe install zlib --triplet ${{ matrix.vcpkg-triplet }}

      - name: Configure libpng with CMake on Linux
        if: matrix.os == 'linux' || matrix.os == 'ubuntu-latest'
        run: |
          cd libpng
          cmake -S ./ -B ./build -DCMAKE_BUILD_TYPE=Release -DCMAKE_SYSTEM_PROCESSOR=${{ matrix.cmake-arch }} -DPNG_SHARED=ON -DPNG_STATIC=OFF -DVCPKG_TARGET_TRIPLET=${{ matrix.vcpkg-triplet }} -DCMAKE_TOOLCHAIN_FILE="./vcpkg/scripts/buildsystems/vcpkg.cmake"

      - name: Configure libpng with CMake on Windows
        if: matrix.os == 'windows-latest' && matrix.arch != 'arm64'
        run: |
          cd libpng
          cmake -S ./ -B ./build -DCMAKE_BUILD_TYPE=Release -A ${{ matrix.cmake-arch }} -DPNG_SHARED=ON -DPNG_STATIC=OFF -DVCPKG_TARGET_TRIPLET=${{ matrix.vcpkg-triplet }} -DCMAKE_TOOLCHAIN_FILE="./vcpkg/scripts/buildsystems/vcpkg.cmake"

      - name: Configure libpng with CMake on Windows (ARM64)
        if: matrix.os == 'windows-latest' && matrix.arch == 'arm64'
        run: |
          cd libpng
          cmake -S ./ -B ./build -DCMAKE_BUILD_TYPE=Release -A ${{ matrix.cmake-arch }} -DPNG_SHARED=ON -DPNG_STATIC=OFF -DCMAKE_SYSTEM_VERSION=10.0.26100.0 -DVCPKG_TARGET_TRIPLET=${{ matrix.vcpkg-triplet }} -DCMAKE_TOOLCHAIN_FILE="./vcpkg/scripts/buildsystems/vcpkg.cmake"

      - name: Configure libpng with CMake on macOS
        if: matrix.os == 'macos-latest'
        run: |
          cd libpng
          cmake -S ./ -B ./build -DCMAKE_BUILD_TYPE=Release -DCMAKE_OSX_ARCHITECTURES=${{ matrix.cmake-arch }} -DPNG_SHARED=ON -DPNG_STATIC=OFF -DVCPKG_TARGET_TRIPLET=${{ matrix.vcpkg-triplet }} -DCMAKE_TOOLCHAIN_FILE="./vcpkg/scripts/buildsystems/vcpkg.cmake"

      - name: Build libpng
        run: cmake --build libpng/build --config Release

      - name: Move Windows binaries
        if: matrix.os == 'windows-latest'
        run: |
          mv libpng/build/Release/*.dll libpng/build/

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4.3.4
        with:
          name: libpng-${{ matrix.os }}-${{ matrix.arch }}-artifacts
          path: |
            libpng/build/*.dll
            libpng/build/*.so
            libpng/build/*.dylib
          if-no-files-found: ignore # 'warn' or 'ignore' or 'error'
